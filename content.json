[{"title":"Ts 配置翻译","date":"2022-07-27T16:00:00.000Z","path":"2022/07/28/Ts/ts配置翻译/","text":"&quot;compilerOptions&quot;: &#123; &quot;incremental&quot;: true, &#x2F;&#x2F; TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度 &quot;tsBuildInfoFile&quot;: &quot;.&#x2F;buildFile&quot;, &#x2F;&#x2F; 增量编译文件的存储位置 &quot;diagnostics&quot;: true, &#x2F;&#x2F; 打印诊断信息 &quot;target&quot;: &quot;ES5&quot;, &#x2F;&#x2F; 目标语言的版本 &quot;module&quot;: &quot;CommonJS&quot;, &#x2F;&#x2F; 生成代码的模板标准 &quot;outFile&quot;: &quot;.&#x2F;app.js&quot;, &#x2F;&#x2F; 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;, &quot;lib&quot;: [&quot;DOM&quot;, &quot;ES2015&quot;, &quot;ScriptHost&quot;, &quot;ES2019.Array&quot;], &#x2F;&#x2F; TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;, &quot;allowJS&quot;: true, &#x2F;&#x2F; 允许编译器编译JS，JSX文件 &quot;checkJs&quot;: true, &#x2F;&#x2F; 允许在JS文件中报错，通常与allowJS一起使用 &quot;outDir&quot;: &quot;.&#x2F;dist&quot;, &#x2F;&#x2F; 指定输出目录 &quot;rootDir&quot;: &quot;.&#x2F;&quot;, &#x2F;&#x2F; 指定输出文件目录(用于输出)，用于控制输出目录结构 &quot;declaration&quot;: true, &#x2F;&#x2F; 生成声明文件，开启后会自动生成声明文件 &quot;declarationDir&quot;: &quot;.&#x2F;file&quot;, &#x2F;&#x2F; 指定生成声明文件存放目录 &quot;emitDeclarationOnly&quot;: true, &#x2F;&#x2F; 只生成声明文件，而不会生成js文件 &quot;sourceMap&quot;: true, &#x2F;&#x2F; 生成目标文件的sourceMap文件 &quot;inlineSourceMap&quot;: true, &#x2F;&#x2F; 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中 &quot;declarationMap&quot;: true, &#x2F;&#x2F; 为声明文件生成sourceMap &quot;typeRoots&quot;: [], &#x2F;&#x2F; 声明文件目录，默认时node_modules&#x2F;@types &quot;types&quot;: [], &#x2F;&#x2F; 加载的声明文件包 &quot;removeComments&quot;:true, &#x2F;&#x2F; 删除注释 &quot;noEmit&quot;: true, &#x2F;&#x2F; 不输出文件,即编译后不会生成任何js文件 &quot;noEmitOnError&quot;: true, &#x2F;&#x2F; 发送错误时不输出任何文件 &quot;noEmitHelpers&quot;: true, &#x2F;&#x2F; 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用 &quot;importHelpers&quot;: true, &#x2F;&#x2F; 通过tslib引入helper函数，文件必须是模块 &quot;downlevelIteration&quot;: true, &#x2F;&#x2F; 降级遍历器实现，如果目标源是es3&#x2F;5，那么遍历器会有降级的实现 &quot;strict&quot;: true, &#x2F;&#x2F; 开启所有严格的类型检查 &quot;alwaysStrict&quot;: true, &#x2F;&#x2F; 在代码中注入&#39;use strict&#39; &quot;noImplicitAny&quot;: true, &#x2F;&#x2F; 不允许隐式的any类型 &quot;strictNullChecks&quot;: true, &#x2F;&#x2F; 不允许把null、undefined赋值给其他类型的变量 &quot;strictFunctionTypes&quot;: true, &#x2F;&#x2F; 不允许函数参数双向协变 &quot;strictPropertyInitialization&quot;: true, &#x2F;&#x2F; 类的实例属性必须初始化 &quot;strictBindCallApply&quot;: true, &#x2F;&#x2F; 严格的bind&#x2F;call&#x2F;apply检查 &quot;noImplicitThis&quot;: true, &#x2F;&#x2F; 不允许this有隐式的any类型 &quot;noUnusedLocals&quot;: true, &#x2F;&#x2F; 检查只声明、未使用的局部变量(只提示不报错) &quot;noUnusedParameters&quot;: true, &#x2F;&#x2F; 检查未使用的函数参数(只提示不报错) &quot;noFallthroughCasesInSwitch&quot;: true, &#x2F;&#x2F; 防止switch语句贯穿(即如果没有break语句后面不会执行) &quot;noImplicitReturns&quot;: true, &#x2F;&#x2F;每个分支都会有返回值 &quot;esModuleInterop&quot;: true, &#x2F;&#x2F; 允许export&#x3D;导出，由import from 导入 &quot;allowUmdGlobalAccess&quot;: true, &#x2F;&#x2F; 允许在模块中全局变量的方式访问umd模块 &quot;moduleResolution&quot;: &quot;node&quot;, &#x2F;&#x2F; 模块解析策略，ts默认用node的解析策略，即相对的方式导入 &quot;baseUrl&quot;: &quot;.&#x2F;&quot;, &#x2F;&#x2F; 解析非相对模块的基地址，默认是当前目录 &quot;paths&quot;: &#123; &#x2F;&#x2F; 路径映射，相对于baseUrl &#x2F;&#x2F; 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置 &quot;jquery&quot;: [&quot;node_modules&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&quot;] &#125;, &quot;rootDirs&quot;: [&quot;src&quot;,&quot;out&quot;], &#x2F;&#x2F; 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错 &quot;listEmittedFiles&quot;: true, &#x2F;&#x2F; 打印输出文件 &quot;listFiles&quot;: true&#x2F;&#x2F; 打印编译的文件(包括引用的声明文件) &#125; &#x2F;&#x2F; 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件） &quot;include&quot;: [ &quot;src&#x2F;**&#x2F;*&quot; ], &#x2F;&#x2F; 指定一个排除列表（include的反向操作） &quot;exclude&quot;: [ &quot;demo.ts&quot; ], &#x2F;&#x2F; 指定哪些文件使用该配置（属于手动一个个指定文件） &quot;files&quot;: [ &quot;demo.ts&quot; ]","tags":[{"name":"ts","slug":"ts","permalink":"http://example.com/tags/ts/"}]},{"title":"app开发功能点","date":"2022-07-27T16:00:00.000Z","path":"2022/07/28/UniApp/app功能点/","text":"保持登录 onLaunch声明周期判断是否存在token,存在直接跳转到首页 手动关闭&#x2F;&#x2F; #ifdef APP-PLUS plus.navigator.closeSplashscreen(); &#x2F;&#x2F; #endif 配置app-plus&#123; splashscreen:&#123; alwaysShowBeforeRender:false &#x2F;&#x2F;是否等待首页渲染完毕后再关闭启动界面 autoclose:false &#x2F;&#x2F;是否自动关闭启动界面 &#125; &#125; 将app应用的第一个页面设置为首页 &quot;pages&quot;: [ &#123; &quot;path&quot;: &quot;pages&#x2F;index&#x2F;index&quot;, &quot;style&quot;: &#123; &quot;navigationBarTitleText&quot;: &quot;首页&quot;, &quot;navigationStyle&quot;: &quot;custom&quot; &#125; &#125;, &#x2F;&#x2F;pages数组中第一项表示应用启动页，参考：https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;collocation&#x2F;pages &#123; &quot;path&quot;: &quot;pages&#x2F;login&#x2F;index&quot;, &quot;style&quot;: &#123; &quot;navigationBarTitleText&quot;: &quot;登录&quot;, &quot;navigationStyle&quot;: &quot;custom&quot; &#125; &#125;, 重新打包app app分包优化&quot;app-plus&quot;: &#123; &quot;optimization&quot;: &#123; &quot;subPackages&quot;: true &#125;, &quot;runmode&quot; : &quot;liberate&quot; &#x2F;&#x2F; 开启分包优化后，必须配置资源释放模式 &#125; 先配置好,然后再按小程序一样配置pages.json文件 平台差异的写法#ifdef 指的是仅在某个平台上使用 #ifndef 在除了这个平台的其他平台上使用(非此平台使用） #endif 结束条件编译 标识对应的平台 APP-PLUS 代表是5+App平台 MP 代表微信小程序&#x2F;支付宝小程序&#x2F;百度小程序&#x2F;头条小程序&#x2F;QQ小程序平台 MP-WEIXIN 代表微信小程序平台 MP-ALIPAY 代表支付宝小程序平台 MP-BAIDU 代表度小程序平台 MP-TOUTIAO 代表头条小程序平台 MP-QQ 代表QQ小程序平台 H5 代表H5平台 APP-PLUS-NVUE 代表5+App nvue平台 #ifdef APP-PLUS 需条件编译的代码 #endif template &lt;!-- #ifdef MP --&gt; &lt;view class&#x3D;&quot;titile&quot;&gt;我是小程序端&lt;&#x2F;view&gt; &lt;!-- #endif --&gt; &lt;!-- #ifdef H5 --&gt; &lt;view class&#x3D;&quot;titile1&quot;&gt;我是h5端&lt;&#x2F;view&gt; &lt;!-- #endif --&gt; js methods: &#123; &#x2F;&#x2F;小程序中生效 &#x2F;&#x2F;#ifdef MP click()&#123; console.log(&#39;小程序平台生效&#39;) &#125;, &#x2F;&#x2F; #endif &#x2F;&#x2F;#ifdef H5 click()&#123; console.log(&#39;H5平台生效&#39;) &#125;, &#x2F;&#x2F; #endif &#125; css &lt;style lang&#x3D;&quot;scss&quot; scoped&gt; &#x2F;&#x2F;小程序中生效 &#x2F;&#x2F;#ifdef MP .titile&#123; font-size:30rpx &#125; &#x2F;&#x2F; #endif &#x2F;&#x2F;#ifdef H5 .titile1&#123; font-size:20rpx &#125; &#x2F;&#x2F; #endif &lt;&#x2F;style &gt;","tags":[{"name":"uniapp","slug":"uniapp","permalink":"http://example.com/tags/uniapp/"}]},{"title":"app开发功能点","date":"2022-07-27T16:00:00.000Z","path":"2022/07/28/UniApp/app功能点跟优化/","text":"保持登录 onLaunch声明周期判断是否存在token,存在直接跳转到首页 手动关闭&#x2F;&#x2F; #ifdef APP-PLUS plus.navigator.closeSplashscreen(); &#x2F;&#x2F; #endif 配置app-plus&#123; splashscreen:&#123; alwaysShowBeforeRender:false &#x2F;&#x2F;是否等待首页渲染完毕后再关闭启动界面 autoclose:false &#x2F;&#x2F;是否自动关闭启动界面 &#125; &#125; 将app应用的第一个页面设置为首页 &quot;pages&quot;: [ &#123; &quot;path&quot;: &quot;pages&#x2F;index&#x2F;index&quot;, &quot;style&quot;: &#123; &quot;navigationBarTitleText&quot;: &quot;首页&quot;, &quot;navigationStyle&quot;: &quot;custom&quot; &#125; &#125;, &#x2F;&#x2F;pages数组中第一项表示应用启动页，参考：https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;collocation&#x2F;pages &#123; &quot;path&quot;: &quot;pages&#x2F;login&#x2F;index&quot;, &quot;style&quot;: &#123; &quot;navigationBarTitleText&quot;: &quot;登录&quot;, &quot;navigationStyle&quot;: &quot;custom&quot; &#125; &#125;, 重新打包app","tags":[{"name":"uniapp","slug":"uniapp","permalink":"http://example.com/tags/uniapp/"}]},{"title":"若依框架分离版使用","date":"2022-07-27T16:00:00.000Z","path":"2022/07/28/Vue/若依分离版使用/","text":"使用多级菜单使用正常在系统菜单菜单管理设置,2级菜单不包括二级在设置好之后还需要调到目录上 路由配置路由统一在系统管理菜单管理处配置,鼠标触碰问号有响应的提示! 路由缓存,文档有说明!会根据路径配置来筛选是否需要keepalive缓存,配置的路径也就是name,name可以大小写,但是组件的name属性必须大写开头 图标使用文档有说明,如果想改变颜色,直接改变父组件的color就行. iconfont下载时统一 128*128 大小! 其它字体图标用iconfont,大小大概40px一致性 字典的使用api listData获取所有字典的列表 getDicts 获取单个类型的所有数据,传入类型string 修改参数就是修改参数设置页面中的各类参数,可以利用api&#x2F;config处的api在其它页面调用也可以进行修改,文档有说明 接口错误提示request.js 已经同意了错误提示功能,不需要再trycath后弹出模态窗,errorcode.js可以自行添加状态码的错误提示 通用方法 内置5个方法$tab 页签操作,导航栏页签跳转删除添加等 $modal 模态框对象 $auth 认证对象 $cache 缓存对象 $download 下载文件 组件 Editor 富文本组件v-model 绑定一个字符值, 设置下高度就可以使用,里面的图片会自动上传","tags":[{"name":"若依","slug":"若依","permalink":"http://example.com/tags/%E8%8B%A5%E4%BE%9D/"}]},{"title":"若依框架 学习","date":"2022-07-27T16:00:00.000Z","path":"2022/07/28/Vue/若依框架/","text":"目录结构 bin一些执行脚本 build打包的一些配置项 publictitle 栏图标跟加载页 robots.txt 返爬虫文件,反扒协议 src&#x2F;api所有的 api 封装 src&#x2F;asstes图片图标字体样式等等静态资源存放点 styles 自定义的一些全局样式 src&#x2F;components全局组件 Breadcrumb 面包屑导航栏 面包屑导航栏组件 Crontab 表达式生成器, 系统监控-&gt;定时任务有使用 DictData 字典数据组件 DictTag 字典标签组件 Editor 富文本编辑器 FileUpload 文件上传组件 Hamburger 导航栏左侧汉堡包图标菜单组件 HeaderSearch 头部搜索 header 组件 IconSelect 图标菜单选择器组件 iFrame 页面嵌套组件 ImagePreview 多图预览组件 ImageUpload 多图同时选择上传组件 Pagination 分页功能组件 PanThumb 未知 ParentView 路由组件 RightPanel 右侧菜单组件,头像处 RightToolbar 右侧联合按钮组件,表格右上角处 RuoYi 导航栏菜单上的 github 图标组件(前后分离版) Screenfull 全屏组件 SizeSelect 布局大小按钮 SvgIcon svg 图标组件 ThemePicker 颜色选择器组件 TopNav 顶部显示 viewtag 的组件 src&#x2F;directive全局指令 dialog 拖拽弹窗系列 clipboaerd 文字复制粘贴 perssion 权限处理 src&#x2F;layout布局模块 src&#x2F;plugins插件 auth 验证用户是否拥有某（些）权限或角色相关的封装 (前端手册有示例) cache 数据缓存的封装 (前端手册有示例) download 文件处理之类的封装 (前端手册有示例) modal 所有模态框的封装 (前端手册有示例) tab 导航栏页签操作的封装(前端手册有示例) index 将这些封装以挂到了vue全局 src&#x2F;store app.js 布局变化相关的方法封装 permission.js 路由权限管理 setting.js 布局相关设置 tagsView.js 导航栏页签相关操作 user.js 个人中心相关操作,登录,退出等等 src&#x2F;utils 工具封装 dict 字典类的封装 generator 代码生成器相关 auth.js token存删方法 errorcode.js 接口状态码错误信息 index.js 函数功能封装 ruoyi.js 函数功能封装 jsencrypt.js 数据加密解密传输 permission.js 部分值的权限校验 request.js axios封装 scroll-to.js 滚动条位置的封装 validate.js 一些正则校验的封装 src&#x2F;view components element-icons.js 字体图标库名称 index.vue 字体图标选择组件 svg-icons.js 判断后缀为SVG样式算法 dashiboard（首页） BarChart.vue 柱状图组件 LineChart.vue 折线图组件 PanelGroup.vue 访客，消息栏功能组件 PieChart.vue 饼状图组件 RaddarChart.vue 柱状图组件 mixins resize.js 首页在进行切换时保护首页状态和大小 error（发生错误导航页面） 401.vue 401错误页面 404.vue 404错误页面 monitor（系统监控）各种页面 system (系统管理) 各种页面 dept 部门管理 config 参数设置 dict 字典管理 data.vue 点击字典类型数据进入页面 index.vue 字典管理页面 enum 菜单管理 notice 通告公告 post 岗位管理 role 角色管理 user 用户管理 profile index.vue 个人信息界面 resetPwd.vue 修改密码组件 userAvatar.vue 上传头像组件 userInfo.vue 基本资料修改页面 tool（系统工具） build（表单构建） index.vue 表单构建左边功能框 CodeTypeDialog.vue 生成代码与复制代码点击弹出框 Draggableltem.vue 没看懂 IconsDialog.vue 选择图标 RightPanel.vue 表单构建右边功能框 TreeNodeDialog.vue 树形级联选择框（没看懂在哪） gen（代码生成 需手动访问&#x2F;tool&#x2F;gen进入） swagger（系统接口） index_v1.vue 其他 index.vue 首页 login.vue 登录页面 permission.js 路由拦截配置 settings.js 系统默认设置 文档使用 路由配置 前端手册–&gt;路由使用 权限的使用 前端手册–&gt;权限的使用 图标的使用 前端手册–&gt;图标的使用 字典的使用 前端手册–&gt;字典的使用 修改后台参数 前端手册–&gt;字典的使用 内容复制 前端手册–&gt;字典的使用","tags":[{"name":"若依","slug":"若依","permalink":"http://example.com/tags/%E8%8B%A5%E4%BE%9D/"}]},{"title":"moment使用","date":"2022-07-27T16:00:00.000Z","path":"2022/07/28/其他/Moment/","text":"moment安装“moment”: “2.29.3”, import moment from &#39;moment&#39;; import &#39;moment&#x2F;locale&#x2F;zh-cn.js&#39;; moment.locale(&#39;zh-cn&#39;); export const moment_ &#x3D; moment; export default &#123; install: vm &#x3D;&gt; &#123; vm.prototype.$moment &#x3D; moment; &#125; &#125;;","tags":[{"name":"moment","slug":"moment","permalink":"http://example.com/tags/moment/"}]},{"title":"虚拟机下载","date":"2022-07-27T16:00:00.000Z","path":"2022/07/28/其他/虚拟机下载/","text":"虚拟机搭建 下载操作系统镜像 https:&#x2F;&#x2F;msdn.itellyou.cn&#x2F; 虚拟机安装包正常安装不要勾选更新2个选项在最后一步输入许可证 打开虚拟机 创建虚拟机 选择第二个安装程序 选择刚才下载的系统 固类选择bios 网盘有备份","tags":[{"name":"window","slug":"window","permalink":"http://example.com/tags/window/"}]},{"title":"hbuilderX eslint格式化配置","date":"2022-07-04T16:00:00.000Z","path":"2022/07/05/Vscode/hbuilderX格式化配置/","text":"hbuiderx 格式化配置[相关连接]https://blog.csdn.net/m0_67394002/article/details/123346267 准备插件eslint-js eslint-plugin-vue 2.eslint-js 的.eslintrc.js&#x2F;&#x2F; 详细配置教程请参考：http:&#x2F;&#x2F;eslint.cn&#x2F;docs&#x2F;user-guide&#x2F;configuring module.exports &#x3D; &#123; &#39;plugins&#39;: [ &#39;html&#39; ], &#39;parserOptions&#39;: &#123; &#39;ecmaVersion&#39;: 2018, &#39;sourceType&#39;: &#39;module&#39;, &#39;ecmaFeatures&#39;: &#123; &#39;jsx&#39;: true &#125;, &#39;allowImportExportEverywhere&#39;: false &#125;, &#39;rules&#39;: &#123; &#39;no-alert&#39;: 0, &#39;eqeqeq&#39;: [&#39;error&#39;, &#39;always&#39;], &#x2F;&#x2F; 用强等于做判断 &#39;semi&#39;: [&#39;error&#39;, &#39;never&#39;], &#x2F;&#x2F; 结尾不分号 &#39;no-multi-spaces&#39;: &#39;error&#39;, &#39;quotes&#39;: [&#39;error&#39;, &#39;single&#39;], &#x2F;&#x2F; 使用单引号 &#39;arrow-parens&#39;: [&#39;error&#39;, &#39;as-needed&#39;], &#x2F;&#x2F; 简略箭头函数 &#39;object-curly-newline&#39;: [&#39;error&#39;, &#123; &#39;multiline&#39;: true &#125;], &#x2F;&#x2F; 在属性内部或属性之间有换行符，就要求有换行符 &#39;object-curly-spacing&#39;: [&#39;error&#39;, &#39;always&#39;] &#x2F;&#x2F; 要求花括号内有空格 (除了 &#123;&#125;) &#125; &#125; eslint-vue 的.eslintrc.jsmodule.exports &#x3D; &#123; &#39;extends&#39;: &#39;plugin:vue&#x2F;essential&#39;, &#39;parserOptions&#39;: &#123; ecmaVersion: 2018, sourceType: &#39;module&#39; &#125;, &#39;rules&#39;: &#123; &#39;no-alert&#39;: 0, &#39;eqeqeq&#39;: [&#39;error&#39;, &#39;always&#39;], &#x2F;&#x2F; 用强等于做判断 &#39;semi&#39;: [&#39;error&#39;, &#39;never&#39;], &#x2F;&#x2F; 结尾不分号 &#39;no-multi-spaces&#39;: &#39;error&#39;, &#39;quotes&#39;: [&#39;error&#39;, &#39;single&#39;], &#x2F;&#x2F; 使用单引号 &#39;arrow-parens&#39;: [&#39;error&#39;, &#39;as-needed&#39;], &#x2F;&#x2F; 简略箭头函数 &#39;object-curly-newline&#39;: [&#39;error&#39;, &#123; &#39;multiline&#39;: true &#125;], &#x2F;&#x2F; 在属性内部或属性之间有换行符，就要求有换行符 &#39;object-curly-spacing&#39;: [&#39;error&#39;, &#39;always&#39;], &#x2F;&#x2F; 要求花括号内有空格 (除了 &#123;&#125;) &#x2F;&#x2F;在computed properties中禁用异步actions &#39;vue&#x2F;no-async-in-computed-properties&#39;: &#39;error&#39;, &#x2F;&#x2F;不允许重复的keys &#39;vue&#x2F;no-dupe-keys&#39;: &#39;error&#39;, &#x2F;&#x2F;不允许重复的attributes &#39;vue&#x2F;no-duplicate-attributes&#39;: &#39;warn&#39;, &#x2F;&#x2F;在 标签下不允许解析错误 &#39;vue&#x2F;no-parsing-error&#39;: [&#39;error&#39;, &#123; &#39;x-invalid-end-tag&#39;: false, &#125;], &#x2F;&#x2F;不允许覆盖保留关键字 &#39;vue&#x2F;no-reserved-keys&#39;: &#39;error&#39;, &#x2F;&#x2F;强制data必须是一个带返回值的函数 &#x2F;&#x2F; &quot;vue&#x2F;no-shared-component-data&quot;: &quot;error&quot;, &#x2F;&#x2F;不允许在computed properties中出现副作用。 &#39;vue&#x2F;no-side-effects-in-computed-properties&#39;: &#39;error&#39;, &#x2F;&#x2F;不允许key属性 &#39;vue&#x2F;no-template-key&#39;: &#39;warn&#39;, &#x2F;&#x2F;在 中不允许mustaches &#39;vue&#x2F;no-textarea-mustache&#39;: &#39;error&#39;, &#x2F;&#x2F;不允许在v-for或者范围内的属性出现未使用的变量定义 &#39;vue&#x2F;no-unused-vars&#39;: &#39;warn&#39;, &#x2F;&#x2F;标签需要v-bind:is属性 &#39;vue&#x2F;require-component-is&#39;: &#39;error&#39;, &#x2F;&#x2F; render 函数必须有一个返回值 &#39;vue&#x2F;require-render-return&#39;: &#39;error&#39;, &#x2F;&#x2F;保证 v-bind:key 和 v-for 指令成对出现 &#39;vue&#x2F;require-v-for-key&#39;: &#39;error&#39;, &#x2F;&#x2F; 检查默认的prop值是否有效 &#39;vue&#x2F;require-valid-default-prop&#39;: &#39;error&#39;, &#x2F;&#x2F; 保证computed属性中有return语句 &#39;vue&#x2F;return-in-computed-property&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 template 根节点 &#39;vue&#x2F;valid-template-root&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-bind 指令 &#39;vue&#x2F;valid-v-bind&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-cloak 指令 &#39;vue&#x2F;valid-v-cloak&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-else-if 指令 &#39;vue&#x2F;valid-v-else-if&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-else 指令 &#39;vue&#x2F;valid-v-else&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-for 指令 &#39;vue&#x2F;valid-v-for&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-html 指令 &#39;vue&#x2F;valid-v-html&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-if 指令 &#39;vue&#x2F;valid-v-if&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-model 指令 &#39;vue&#x2F;valid-v-model&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-on 指令 &#39;vue&#x2F;valid-v-on&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-once 指令 &#39;vue&#x2F;valid-v-once&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-pre 指令 &#39;vue&#x2F;valid-v-pre&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-show 指令 &#39;vue&#x2F;valid-v-show&#39;: &#39;error&#39;, &#x2F;&#x2F; 强制校验 v-text 指令 &#39;vue&#x2F;valid-v-text&#39;: &#39;error&#39;, &#39;vue&#x2F;comment-directive&#39;: 0 &#125; &#125; 设置tab补全工具-&gt;设置-&gt;编辑器配置-&gt;勾选 Tab键自动插入代码助手选中项 设置缩进长度为2工具 -&gt; 设置 -&gt; 常用配置 -&gt; 制表符长度 改为 2 解构赋值不将大括号换行工具 -&gt; 设置 -&gt; 插件配置 -&gt; 自定义jsbeautify格式化规则的jsbeautifyrc.js中将 “brace_style&quot;选项添加&quot;preserve-inline” &#39;brace_style&#39;: &#39;collapse,preserve-inline&#39; 快捷键设置工具-&gt;自定义快捷键 然后找到格式化的快捷键语句从左侧复制到右侧就可以使用了 [eslint-js介绍]https://hx.dcloud.net.cn/Tutorial/extension/eslint-js [eslint-vue介绍]https://hx.dcloud.net.cn/Tutorial/extension/eslint-vue 最后重启编辑器生效!","tags":[{"name":"hbuilderX","slug":"hbuilderX","permalink":"http://example.com/tags/hbuilderX/"}]},{"title":"mqtt 协议","date":"2022-07-04T16:00:00.000Z","path":"2022/07/05/插件库/Mqtt协议/","text":"使用 npm[npm地址]https://www.npmjs.com/package/mqtt 配置 import mqtt from &#39;mqtt&#39; import &#123; unitoast &#125; from &#39;@&#x2F;src&#x2F;utlils&#x2F;auth.js&#39; import &#123; showLoading, hideLoading &#125; from &#39;@&#x2F;src&#x2F;utlils&#x2F;loading.js&#39; export default &#123; namespaced: true, state: &#123; client: &#39;&#39;, &#x2F;&#x2F;连接实例 options: &#123; &#x2F;&#x2F;配置 connectTimeout: 40000, clientId: &#39;id&#39;, username: &#39;定义的用户名&#39;, password: &#39;密码&#39;, clean: true, &#125;, subscribe: [&#39;通信&#39;], &#x2F;&#x2F;当前主题 &#125;, mutations: &#123; &#x2F;&#x2F; 开启连接 openLink(state, path) &#123; if (!path) return console.log(&#39;地址为空&#39;) showLoading(&#39;加载中&#39;) if (state.client.connected) &#123; state.client.end() &#x2F;&#x2F;Fix:如果当前已连接必须断开连接,否则多次连接导致重连报错 &#125; state.client &#x3D; mqtt.connect(path, state.options) &#x2F;&#x2F; 监听连接 state.client.on(&#39;connect&#39;, () &#x3D;&gt; &#123; unitoast(&#39;服务已连接&#39;) hideLoading() &#125;) &#x2F;&#x2F; 接收消息 state.client.on(&#39;message&#39;, (topic, message) &#x3D;&gt; &#123; let msg &#x3D; message.toString() console.log(&#39;接收到了信息&#39;, msg, topic) &#x2F;&#x2F; if (msg &amp;&amp; JSON.parse(msg).connect &#x3D;&#x3D;&#x3D; &#39;ok&#39;) &#123; &#x2F;&#x2F; console.log(&#39;接收信息成功&#39;) &#x2F;&#x2F; console.log(msg) &#x2F;&#x2F; &#125; &#125;) &#x2F;&#x2F; 监听重连 state.client.on(&#39;reconnect&#39;, error &#x3D;&gt; &#123; console.log(&#39;正在重连:&#39;, error) &#125;) &#x2F;&#x2F; 监听异常 state.client.on(&#39;error&#39;, error &#x3D;&gt; &#123; console.log(&#39;连接失败:&#39;, error) hideLoading() &#125;) &#x2F;&#x2F; 监听关闭 state.client.on(&#39;close&#39;, error &#x3D;&gt; &#123; unitoast(&#39;服务已关闭&#39;) &#125;) &#125;, &#x2F;&#x2F; 订阅消息 subsTopic(state) &#123; if (!state.client.connected) &#123; return unitoast(&#39;服务未连接&#39;) &#125; state.client.subscribe(state.subscribe[0], &#123; qos: 0 &#125;, error &#x3D;&gt; &#123; if (!error) &#123; unitoast(&#39;通信订阅成功&#39;) &#x2F;&#x2F; 发布一条消息 state.client.publish(state.subscribe[0], &#39;Hello mqtt&#39;) &#125; else &#123; console.log(&#39;通信订阅失败&#39;) &#125; &#125;) &#125;, &#x2F;&#x2F; 关闭连接 closeLink(state) &#123; if (!state.client.connected) &#123; return unitoast(&#39;服务未连接&#39;) &#125; try&#123; state.client &amp;&amp; state.client.end() &#x2F;&#x2F;Fix:如果当前已连接必须断开连接,否则多次连接导致重连报错 &#125;catch(e)&#123; &#x2F;&#x2F;TODO handle the exception &#125; &#125; &#125; &#125; 订阅主题可根据不同需求订阅不同主题,也可通过通配符订阅多个主题https://blog.csdn.net/weixin_43025071/article/details/82464661 qoshttps://blog.csdn.net/m0_50668851/article/details/1125551710: 如果消息发送失败就不再发送1: 发送过去一条消息,必须收到服务器对应的puback,如果没收到就会重新发送,直到收到为止2: 如果消息发送失败就会重新发送 开发实用 断开连接state.client.end()","tags":[{"name":"mqtt","slug":"mqtt","permalink":"http://example.com/tags/mqtt/"}]},{"title":"chimee曲米播放控件的使用","date":"2022-07-04T16:00:00.000Z","path":"2022/07/05/插件库/chimee播放控件/","text":"chimee曲米的使用import chimee from &quot;chimee&quot;; import chimeePluginControlbar from &quot;chimee-plugin-controlbar&quot;; import ChimeeKernelHls from &#39;chimee-kernel-hls&#39;; import flv from &#39;chimee-kernel-flv&#39;; chimee.install(chimeePluginControlbar); export function createMp4Vedio(url, domID) &#123; return new chimee(&#123; wrapper: document.getElementById(domID), &#x2F;&#x2F; video dom容器 &#x2F;&#x2F; src:&#39;http:&#x2F;&#x2F;cdn.toxicjohann.com&#x2F;lostStar.mp4&#39;, isLive: true, &#x2F;&#x2F;是否直播 src: url, controls: true, autoplay: false, &#x2F;&#x2F; 使用插件 plugin: [ &#123; name: chimeePluginControlbar.name, &#x2F;&#x2F; 或者 &#39;chimeeControl&#39; majorColor: &quot;#FFF&quot;, &#x2F;&#x2F;该插件中，所有的 svg 图 播放进度条，进度颜色 声音控制条，音量颜色 hoverColor: &quot;#9d9d4c&quot;, &#x2F;&#x2F;鼠标放在svg上时的颜色, children: &#123; play: &#123; &#x2F;&#x2F; 配置播放暂停键 icon 及事件 bitmap: false, icon: &#123; play: &quot;&quot;, pause: &quot;&quot;, &#125;, &#125;, progressTime: &#123; &#x2F;&#x2F;时间展示组件 &#125;, progressBar: &#123; &#x2F;&#x2F;进度条控制组件 &#125;, screen: &#123; &#x2F;&#x2F;配置全屏／非全屏 icon 及事件 icon: &#123; full: &quot;&quot;, small: &quot;&quot;, &#125;, &#125;, &#125;, &#125;, ], &#125;) &#125; export function createHlsM3u8Vedio(url, domID) &#123; return new chimee(&#123; wrapper: document.getElementById(domID), &#x2F;&#x2F; video dom容器 &#x2F;&#x2F; src:&#39;https:&#x2F;&#x2F;sf1-hscdn-tos.pstatp.com&#x2F;obj&#x2F;media-fe&#x2F;xgplayer_doc_video&#x2F;hls&#x2F;xgplayer-demo.m3u8&#39;, isLive: true, &#x2F;&#x2F;是否直播 src: url, controls: true, autoplay: false, box: &#39;hls&#39;, kernels: &#123; hls: ChimeeKernelHls, &#125;, &#x2F;&#x2F; 使用插件 plugin: [ &#123; name: chimeePluginControlbar.name, &#x2F;&#x2F; 或者 &#39;chimeeControl&#39; majorColor: &quot;#FFF&quot;, &#x2F;&#x2F;该插件中，所有的 svg 图 播放进度条，进度颜色 声音控制条，音量颜色 hoverColor: &quot;#9d9d4c&quot;, &#x2F;&#x2F;鼠标放在svg上时的颜色, children: &#123; play: &#123; bitmap: false, icon: &#123; play: &quot;&quot;, pause: &quot;&quot;, &#125;, &#125;, progressTime: &#123; &#125;, progressBar: &#123; &#125;, screen: &#123; icon: &#123; full: &quot;&quot;, small: &quot;&quot;, &#125;, &#125;, &#125;, &#125;, ], &#125;) &#125; export function createFlvVedio(url, domID) &#123; return new chimee(&#123; wrapper: document.getElementById(domID), &#x2F;&#x2F; video dom容器 &#x2F;&#x2F; src:&#39;https:&#x2F;&#x2F;sf1-hscdn-tos.pstatp.com&#x2F;obj&#x2F;media-fe&#x2F;xgplayer_doc_video&#x2F;flv&#x2F;xgplayer-demo-360p.flv&#39;, isLive: true, &#x2F;&#x2F;是否直播 src: url, controls: true, autoplay: false, kernels: &#123; flv: flv, &#125;, &#x2F;&#x2F; 使用插件 plugin: [ &#123; name: chimeePluginControlbar.name, &#x2F;&#x2F; 或者 &#39;chimeeControl&#39; majorColor: &quot;#FFF&quot;, &#x2F;&#x2F;该插件中，所有的 svg 图 播放进度条，进度颜色 声音控制条，音量颜色 hoverColor: &quot;#9d9d4c&quot;, &#x2F;&#x2F;鼠标放在svg上时的颜色, children: &#123; play: &#123; bitmap: false, icon: &#123; play: &quot;&quot;, pause: &quot;&quot;, &#125;, &#125;, progressTime: &#123; &#125;, progressBar: &#123; &#125;, screen: &#123; icon: &#123; full: &quot;&quot;, small: &quot;&quot;, &#125;, &#125;, &#125;, &#125;, ], &#125;) &#125;","tags":[{"name":"chimee","slug":"chimee","permalink":"http://example.com/tags/chimee/"}]},{"title":"图片满屏预览","date":"2022-07-04T16:00:00.000Z","path":"2022/07/05/插件库/图片全屏预览/","text":"图片满屏预览npm install vue-directive-image-previewer -D import VueDirectiveImagePreviewer from &#39;vue-directive-image-previewer&#39; import &#39;vue-directive-image-previewer&#x2F;dist&#x2F;assets&#x2F;style.css&#39; Vue.use(VueDirectiveImagePreviewer) &lt;img v-image-preview src&#x3D;&quot;picture-url&quot;&#x2F;&gt;","tags":[{"name":"img","slug":"img","permalink":"http://example.com/tags/img/"}]},{"title":"node 安装包时常见报错","date":"2022-06-28T16:00:00.000Z","path":"2022/06/29/Node/node安装包时常见报错/","text":"找不到 npm-cli.jsbug Cannot find module ‘D:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js‘ 在这个路径的node_module包中找不到 npm的依赖包 解决电脑环境变量顺序导致的,因为先去找的nodejs&#x2F;下的node_module,但是npm包在global环境文件下 环境变量顺序换一下就行了 [相关文章]https://blog.csdn.net/weixin_55333190/article/details/125458197 D:Program 不是内部命令…bug yarn create vite 报错 ‘D:\\Program‘ 不是内部或外部命令,也不是可运行的程序 或批处理文件 解决 原因是“D:\\Program Files”中有空格的问题 将npm的node文件不要放在 Program Files文件夹中,这样就不会找这个文件夹了 环境变量也要改正确 .npmrc 文件也要改 .yarnrc 也要改","tags":[{"name":"node","slug":"node","permalink":"http://example.com/tags/node/"},{"name":"npm","slug":"npm","permalink":"http://example.com/tags/npm/"}]},{"title":"按需引入AntDesign(vue2 跟 vue3)","date":"2022-06-28T16:00:00.000Z","path":"2022/06/29/UI库/按需引入AntDesign/","text":"安装Vue3+vite yarn add ant-design-vue yarn add -D unplugin-vue-components vite.config&#x2F;* * @Author: BORING GHOST * @Date: 2022-06-27 19:04:47 * @LastEditTime: 2022-06-27 19:40:18 * @Description: *&#x2F; import &#123; defineConfig &#125; from &quot;vite&quot;; import vue from &quot;@vitejs&#x2F;plugin-vue&quot;; &#x2F;&#x2F; ant 按需引入 import Components from &quot;unplugin-vue-components&#x2F;vite&quot;; import &#123; AntDesignVueResolver &#125; from &quot;unplugin-vue-components&#x2F;resolvers&quot;; &#x2F;&#x2F; https:&#x2F;&#x2F;vitejs.dev&#x2F;config&#x2F; export default defineConfig(&#123; plugins: [ vue(), Components(&#123; resolvers: [AntDesignVueResolver()] &#125;) ] &#125;); import &#123; message &#125; from &quot;ant-design-vue&quot;; import &quot;ant-design-vue&#x2F;es&#x2F;message&#x2F;style&#x2F;css&quot;; import &#123; App &#125; from &quot;vue&quot;; export default &#123; install: function (Vue: App) &#123; Vue.config.globalProperties.$message &#x3D; message; &#125; &#125;; vue2+webpackyarn add ant-design-vue@1.7.8 yarn add -D babel-plugin-import@1.13.5 module.exports &#x3D; &#123; presets: [&quot;@vue&#x2F;cli-plugin-babel&#x2F;preset&quot;], plugins: [ [ &quot;import&quot;, &#123; libraryName: &quot;ant-design-vue&quot;, libraryDirectory: &quot;es&quot;, style: &quot;css&quot; &#x2F;&#x2F; &#96;style: true&#96; 会加载 less 文件 &#125; ] ] &#125;; import &#123; Button &#125; from &quot;ant-design-vue&quot;; Vue.component(Button.name, Button); 图标需要查看1.7.8版本的组件&lt;a-icon type&#x3D;&quot;star&quot; theme&#x3D;&quot;filled&quot; &#x2F;&gt;","tags":[{"name":"AntDesign","slug":"AntDesign","permalink":"http://example.com/tags/AntDesign/"}]},{"title":"Git的一些常见错误","date":"2022-06-28T16:00:00.000Z","path":"2022/06/29/其他/Git一些常见错误/","text":"添加远程仓库时报错bug $ git remote add origin git@gitee.com:***.git fatal: unsafe repository (&#39;D:&#x2F;D-Desktop&#x2F;Ts学习&#x2F;ts-vanilla&#39; is owned by someone else) To add an exception for this directory, call: git config --global --add safe.directory &#39;D:&#x2F;D-Desktop&#x2F;Ts学习&#x2F;ts-vanilla&#39; windows更新系统后，git报错unsafe repository xxx is owned by someone else 解决 &quot;C:\\Users\\XXX.gitconfig&quot; 打开这个文件，新增 [safe] directory &#x3D; *","tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"vue.config.js的一些配置","date":"2022-06-28T16:00:00.000Z","path":"2022/06/29/其他/vue.config的一些配置/","text":"修改页面titlemodule.exports &#x3D; &#123; chainWebpack: (config) &#x3D;&gt; &#123; config.plugin(&#39;html&#39;).tap((args) &#x3D;&gt; &#123; args[0].title &#x3D; &#39;sadfsdaf&#39; return args &#125;) &#125; &#125; 修改快捷符号 @module.exports &#x3D; &#123; configureWebpack: &#123; &#x2F;&#x2F; provide the app&#39;s title in webpack&#39;s name field, so that &#x2F;&#x2F; it can be accessed in index.html to inject the correct title. resolve: &#123; alias: &#123; &quot;@&quot;: resolve(&quot;src&quot;) &#125; &#125; &#125;, &#125;","tags":[{"name":"vue.config","slug":"vue-config","permalink":"http://example.com/tags/vue-config/"}]},{"title":"pdfmake pdf自动生成","date":"2022-06-28T16:00:00.000Z","path":"2022/06/29/插件库/pdfmake-Pdf生成/","text":"install&quot;pdfmake&quot;: &quot;^0.2.5&quot;, yarn add pdfmake useconst pdfmake &#x3D; require(&quot;pdfmake&#x2F;build&#x2F;pdfmake&quot;); const pdf_fonts &#x3D; require(&quot;pdfmake&#x2F;build&#x2F;vfs_fonts&quot;); pdfmake.vfs &#x3D; pdf_fonts.pdfMake.vfs; var docDefinition &#x3D; &#123; content: &quot;This is an sample PDF printed with pdfMake&quot; &#125;; this.$pdfmake.createPdf(docDefinition).download(&quot;test.pdf&quot;); example[简书中文文档]https://www.jianshu.com/p/129554713e23[官方文档]https://pdfmake.github.io/docs/0.3/getting-started/client-side/methods/ var docDefinition &#x3D; &#123; content: &#39;This is an sample PDF printed with pdfMake&#39; &#125;; pdfMake.createPdf(docDefinition).download(); &#x2F;&#x2F; 下载 pdfMake.createPdf(docDefinition).open(); &#x2F;&#x2F; 新窗口打开 pdfMake.createPdf(docDefinition).print(); &#x2F;&#x2F; 打印 doccontentlet docDefinition&#x3D;&#123; content:string | array&lt;string|object&gt; &#x2F;&#x2F; 为数组时,一个索引为一个断落,索引为对象时可以设置更复杂的样式,可参考官方文档 &#125; styles 等同于 style 标签 let docDefinition&#x3D;&#123; content:[&#123;text:&#39;test text!!!!&#39;,style:&#39;testStyle&#39;&#125;], defaultStyle:&#123; &#x2F;&#x2F; 默认样式 fontSize:15, &#125;, styles:&#123; &#x2F;&#x2F; 重新定义样式 testStyle:&#123; fontSize:22, color:red &#125; &#125; &#125; 样式属性查看文档 列的间隙let docDefinition&#x3D;&#123; content:[ &#39;This paragraph fills full width, as there are no columns. Next paragraph however consists of three columns&#39;, &#123; columns:[ &#123; width: &#39;auto&#39;, &#x2F;&#x2F; 会自动从下一行开始 text: &#39;First column&#39; &#125; ... ] &#125; ] &#125; 表let docDefinition&#x3D;&#123; content: [ &#123; layout: &#39;lightHorizontalLines&#39;, &#x2F;&#x2F; optional table: &#123; &#x2F;&#x2F; headers are automatically repeated if the table spans over multiple pages &#x2F;&#x2F; you can declare how many rows should be treated as headers headerRows: 1, widths: [ &#39;*&#39;, &#39;auto&#39;, 100, &#39;*&#39; ], body: [ &#x2F;&#x2F; body数组中每一个索引就是一行, 索引的值为一个数组, 数组中的每一个索引都是相对应的列,跟导出excel表格的数据结构一样 [ &#39;First&#39;, &#39;Second&#39;, &#39;Third&#39;, &#39;The last one&#39; ], [ &#39;Value 1&#39;, &#39;Value 2&#39;, &#39;Value 3&#39;, &#39;Value 4&#39; ], [ &#123; text: &#39;Bold value&#39;, bold: true &#125;, &#39;Val 2&#39;, &#39;Val 3&#39;, &#39;Val 4&#39; ] ] &#125; &#125; ] &#125; 有序列表和无序列表var docDefinition &#x3D; &#123; content: [ &#39;无需列表: ul&#39;, &#123; &#x2F;&#x2F; to treat a paragraph as a bulleted list, set an array of items under the ul key ul: [ &#39;Item 1&#39;, &#39;Item 2&#39;, &#39;Item 3&#39;, &#123; text: &#39;Item 4&#39;, bold: true &#125;, &#x2F;&#x2F; 依然可以设置样式 ] &#125;, &#39;有序列表 : ol&#39;, &#123; &#x2F;&#x2F; for numbered lists set the ol key ol: [ &#39;Item 1&#39;, &#39;Item 2&#39;, &#39;Item 3&#39; ] &#125; ] &#125;; 页眉页脚var docDefinition &#x3D; &#123; content: new Array(120).fill(&quot;asdasdasdasd&quot;), header: function (currentPage, pageCount, pageSize) &#123; &#x2F;&#x2F; you can apply any logic and return any valid pdfmake element &#x2F;&#x2F; currentPage:当前页 pageCount:页数 和 pageSize:页面大小 return [ &#123; text: &quot;simple text&quot;, alignment: currentPage % 2 ? &quot;left&quot; : &quot;right&quot; &#125;, &#123; canvas: [&#123; type: &quot;rect&quot;, x: 170, y: 32, w: pageSize.width - 170, h: 40 &#125;] &#125; ]; &#125; &#125;; 背景层var docDefinition &#x3D; &#123; content: new Array(120).fill(&quot;asdasdasdasd&quot;), header: function (currentPage) &#123; return [&#123; text: &quot;simple text &quot; + currentPage &#125;]; &#125;, &#x2F;&#x2F; 设置背景 background: function (currentPage, pageSize) &#123; return &#96;page $&#123;currentPage&#125; with size $&#123;pageSize.width&#125; x $&#123;pageSize.height&#125;&#96;; &#125; &#125;; 边距pdfMake 中的任何元素都可以有边距： var docDefinition &#x3D; &#123; content: new Array(120).fill(&quot;asdasdasdasd&quot;), header: function (currentPage) &#123; return [&#123; text: &quot;simple text &quot; + currentPage &#125;]; &#125;, background: function (currentPage, pageSize) &#123; return [ &#123; text: &#96;page $&#123;currentPage&#125; with size $&#123;pageSize.width&#125; x $&#123;pageSize.height&#125;&#96;, margin: [120, 100, 100, 100] &#x2F;&#x2F; 设置一个边距 &#125; ]; &#125; &#125;; 列中的段落更详细的查看文档 var docDefinition &#x3D; &#123; content: [ &quot;paragraph 1&quot;, &quot;paragraph 2&quot;, &#123; &#x2F;&#x2F; 第三段开始设置列 columns: [ &quot;first column is a simple text&quot;, &#x2F;&#x2F; 第二列开始设置段落 [ &#x2F;&#x2F; second column consists of paragraphs &quot;paragraph A&quot;, &quot;paragraph B&quot;, &quot;these paragraphs will be rendered one below another inside the column&quot; ] ] &#125; ] &#125;; 图片这很简单。只需使用{ image: ‘…’ }节点类型。支持 JPEG 和 PNG 格式。 dataUrl || pdfmake 提供的虚拟文件系统 || url 从图像中的名称引用加载图像 var docDefinition &#x3D; &#123; content: [ &#x2F;&#x2F; &#123; &#x2F;&#x2F; &#x2F;&#x2F; you&#39;ll most often use dataURI images on the browser side &#x2F;&#x2F; &#x2F;&#x2F; if no width&#x2F;height&#x2F;fit is provided, the original size will be used &#x2F;&#x2F; image: &quot;data:image&#x2F;jpeg;base64,...encodedContent...&quot; &#x2F;&#x2F; 不配置宽高会使用原始宽高 &#x2F;&#x2F; &#125;, &#123; &#x2F;&#x2F; is supported loading images via url from reference by name in images image: &quot;snow&quot; &#125;, &#123; image: &quot;test&quot; &#125; ], background: function () &#123; return [ &#123; image: &quot;bg&quot; &#125; ]; &#125;, images: &#123; &#x2F;&#x2F; is supported loading images via url (https or http protocol) snow: &quot;https:&#x2F;&#x2F;picsum.photos&#x2F;seed&#x2F;picsum&#x2F;500&#x2F;700&quot;, test: &quot;https:&#x2F;&#x2F;picsum.photos&#x2F;seed&#x2F;picsum&#x2F;600&#x2F;900&quot;, bg: &#123; url: &quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1080&#x2F;367&#x2F;267&quot;, headers: &#123; myheader: &quot;123&quot;, myotherheader: &quot;abc&quot; &#125; &#125;, &#x2F;&#x2F; is supported loading images via url with custom headers strawberries: &#123; url: &quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1080&#x2F;367&#x2F;267&quot;, headers: &#123; myheader: &quot;123&quot;, myotherheader: &quot;abc&quot; &#125; &#125; &#125; &#125;; svg 图像var docDefinition &#x3D; &#123; content: [ &#123; &#x2F;&#x2F; If no width&#x2F;height&#x2F;fit is used, then dimensions from the svg element is used. svg: &#39;&lt;svg width&#x3D;&quot;300&quot; height&#x3D;&quot;200&quot; viewBox&#x3D;&quot;0 0 300 200&quot;&gt;...&lt;&#x2F;svg&gt;&#39; &#125; ] &#125;; 链接var docDefinition &#x3D; &#123; content: [ &#123; text: &quot;google&quot;, link: &quot;http:&#x2F;&#x2F;google.com&quot; &#125;, &#x2F;&#x2F; 链接外部站点 &#123; text: &quot;Go to page 2&quot;, linkToPage: 2 &#125;, &#x2F;&#x2F; 链接到2页码处 &#123; text: &quot;Go to Header&quot;, linkToDestination: &quot;header&quot; &#125;, &#x2F;&#x2F; 链接到 id为header的锚点处 &#123; text: &quot;Header content&quot;, id: &quot;header&quot; &#125; &#x2F;&#x2F; 当前id 为 header ] &#125;; 二维码var docDefinition &#x3D; &#123; content: [ &#x2F;&#x2F; basic usage 二维码中的内容 &#123; qr: &quot;text in QR&quot; &#125;, &#x2F;&#x2F; colored QR 前景色跟背景色 &#123; qr: &quot;text in QR&quot;, foreground: &quot;red&quot;, background: &quot;yellow&quot; &#125; &#x2F;&#x2F; 其它配置查看文档 ] &#125;; 目录var docDefinition &#x3D; &#123; content: [ &#123; toc: &#123; id: &quot;mainToc&quot;, &#x2F;&#x2F; 目录,跳转到 tocItem 为 mainToc 的内容处 title: &#123; text: &quot;INDEX&quot;, style: &quot;header&quot; &#125; &#125; &#125;, &#123; text: &quot;This is a header&quot;, style: &quot;header&quot;, tocItem: &quot;mainToc&quot; &#125; ] &#125;; 水印var docDefinition &#x3D; &#123; watermark: &quot;test watermark&quot;, content: [ .... ] &#125;; 其它配置查看文档 纸张大小var docDefinition &#x3D; &#123; &#x2F;&#x2F; a string or &#123; width: number, height: number &#125; pageSize: &quot;A5&quot;, &#x2F;&#x2F; 这里可以设置相应值, 文档中有说明 content: [ .... ] &#125;; 文档元数据就是这个 pdf 属性当中能够查看到的一些信息 var docDefinition &#x3D; &#123; info: &#123; title: &quot;awesome Document&quot;, author: &quot;john doe&quot;, subject: &quot;subject of document&quot;, keywords: &quot;keywords for document&quot; &#125;, content: &quot;This is an sample PDF printed with pdfMake&quot; &#125;; 压缩var docDefinition &#x3D; &#123; compress: false, content: (...) &#125; 加密和访问权限var docDefinition &#x3D; &#123; userPassword: &quot;123&quot;, &#x2F;&#x2F; 用户密码 用于解密文件 &#x2F;&#x2F; ownerPassword: &quot;123456&quot;, &#x2F;&#x2F;权限密码,解密后拥有以下权限,默认无任何权限 permissions: &#123; printing: &quot;highResolution&quot;, &#x2F;&#x2F;是否允许打印。指定&quot;lowResolution&quot;允许降级打印，或&quot;highResolution&quot;允许以高分辨率打印 modifying: true, &#x2F;&#x2F;是否允许修改文件。指定true允许修改文档内容 copying: false, &#x2F;&#x2F;是否允许复制文本或图形。指定true允许复制 annotating: true, &#x2F;&#x2F;是否允许注释、填表。指定true允许注释和表单填写 fillingForms: true, &#x2F;&#x2F;是否允许填表和签名。指定true允许填写表单域和签名 contentAccessibility: false, &#x2F;&#x2F;是否允许复制可访问性文本。指定true以允许复制以实现可访问性 documentAssembly: true &#x2F;&#x2F;是否允许组装文件。指定true允许文档组装 &#125;, content: [&quot;...&quot;] &#125;; 嵌入附件查看文档 使用经验目录用法var docDefinition &#x3D; &#123; content: [ &#123; toc: &#123; title: &#123; text: &quot;INDEX&quot; &#125; &#125; &#125;, &#123; text: &quot;Introduction&quot;, tocItem: true, tocStyle: &#123; bold: true &#125;, pageBreak: &quot;before&quot; &#125;, &quot;Lorem ipsum dolor sit amet...&quot;, &#123; text: &quot;Background&quot;, tocItem: true, tocMargin: [20, 0, 0, 0], pageBreak: &quot;before&quot; &#125;, &quot;Lorem ipsum dolor sit amet...&quot;, &#123; text: &quot;About the project&quot;, tocItem: true, tocMargin: [20, 0, 0, 0], pageBreak: &quot;before&quot; &#125;, &quot;Lorem ipsum dolor sit amet...&quot;, &#123; text: &quot;About the authors&quot;, tocItem: true, tocMargin: [20, 0, 0, 0], pageBreak: &quot;before&quot; &#125;, &quot;Lorem ipsum dolor sit amet...&quot;, &#123; text: &quot;Abstract&quot;, tocItem: true, tocStyle: &#123; bold: true &#125;, pageBreak: &quot;before&quot; &#125; ] &#125;; 中文支持git clone git@github.com:bpampuch&#x2F;pdfmake.git npm install -g gulp 查看环境变量:npm config get prefix 在github，pafmake地址下载安装包pdfmake-master，打开这个工程，在package.json中devDependencies下添加一项https://github.com/bpampuch/pdfmake &quot;gulp&quot;: &quot;^3.9.1&quot;, &#x2F;&#x2F; 跟全局版本最好一致 npm install 找一个微软雅黑的ttf文件http://m.diyiziti.com/Download/537/ 将pdfmake&#x2F;fonts下腾空并放入微软雅黑.ttf文件 https://gitee.com/talianshe/pafmake-fonts-build 生成vfs_fonts.js文件 文件改成export default 方式导出 import vfs from &quot;.&#x2F;vfs_fonts&quot;; const pdfmake &#x3D; require(&quot;pdfmake&#x2F;build&#x2F;pdfmake&quot;); pdfmake.vfs &#x3D; vfs; pdfmake.fonts &#x3D; &#123; wryh: &#123; normal: &quot;微软雅黑.ttf&quot;, bold: &quot;微软雅黑.ttf&quot;, italics: &quot;微软雅黑.ttf&quot;, bolditalics: &quot;微软雅黑.ttf&quot; &#125; &#125;; let docDefinition &#x3D; &#123; content: [], defaultStyle: &#123; font: &quot;wryh&quot; &#125; &#125;;","tags":[{"name":"pdf","slug":"pdf","permalink":"http://example.com/tags/pdf/"}]},{"title":"nvue开发注意事项","date":"2022-06-21T16:00:00.000Z","path":"2022/06/22/UniApp/nvue开发/","text":"nvue开发注意项nvue专用内置组件跟apihttps://uniapp.dcloud.io/nvue-outline?id=_2%e5%bc%80%e5%8f%91nvue%e9%a1%b5%e9%9d%a2网络示例https://www.cnblogs.com/lzhCreate/p/13765622.html#appnvue%E4%B8%93%E7%94%A8%E7%BB%84%E4%BB%B6 nvue 页面只能使用 flex 布局 不能在 style 中引入字体文件 不支持在css里写背景图background-image，但可以使用image组件和层级来实现类似web中的背景效果。因为原生开发本身也没有web这种背景图概念 nvue 的各组件在安卓端默认是透明的，如果不设置background-color 文字内容，必须只能在text组件下，text组件不能换行写内容，否则会出现无法去除的周边空白 只有text标签可以设置字体大小，字体颜色 布局不能使用百分比、没有媒体查询。 选择器仅支持class 选择器 border 不支持简写 background 不支持简写 v-show （控制元素显示隐藏，v-if和v-else结合使用，写两个v-if会造成样式错乱等） nvue中内容超过用省略号（ 前提要设置text的宽度） vscode不兼容麻烦,尽量在hbuilder开发 nvue暂不支持navigator组件，请使用API跳转 使用nvue开发导航栏时一定要注意subNVues是数组类型还有窗口显示出来但是内容不显示时记得重新编译一下如果开发滚动功能,nvue的list组件能提高性能 list里面可以包裹cell组件 不要指定 &lt;cell&gt; 的 flex 值。Cell 的宽度是由它的父容器决定的，你也不需要指定它的高度。 Cell 的排版的位置是由父容器控制的，所以一般不要为其指定 margin 样式","tags":[{"name":"nvue","slug":"nvue","permalink":"http://example.com/tags/nvue/"}]},{"title":"自定义导航栏","date":"2022-06-21T16:00:00.000Z","path":"2022/06/22/UniApp/自定义导航栏/","text":"在我眼里自定义导航分2类: 原生基础上 || 非原生基础上总结:项目当中能原生就原生,提高性能区别 uni-app 自带原生导航栏，在pages.json里配置。 原生导航的体验更好，渲染新页面时，原生导航栏的渲染无需等待新页面dom加载，可以在新页面进入动画开始时就渲染。 原生导航还可以避免滚动条通顶，并方便的控制原生下拉刷新。 通过pages.json的配置，可以简单的、跨端的、高性能的开发业务。 但原生导航栏的扩展能力有限的。尤其是微信下，没有提供太多导航栏的配置。 在App下，pages.json里每个页面的app-plus下可以设置titleNView等更多参数，可以得到比微信小程序更丰富的扩展性。 另外，开发者也可以在必要时取消原生导航栏，使用view自行绘制导航栏。 原生基础上 通过app-plus属性对自定义导航扩展https://uniapp.dcloud.io/collocation/pages?id=app-plus 文档描述: 1.原生导航能解决业务需求的情况下，尽量使用原生导航,甚至有时需要牺牲一些不是很重要的需求。 2.在App和H5下，uni-app提供了灵活的处理方案：&#96;titleNView、subNVue&#96;、或整页使用nvue。 3.但在小程序下，因为其自身的限制，没有太好的方案。有必要的话，也可以用条件编译分端处理。 所以主要是使用app-plus的titleNView(导航栏)、subNVue(子窗口)属性 titleNView(导航栏) 以下都是在titleNView属性下操作https://uniapp.dcloud.io/collocation/pages?id=app-titlenview 常用的是按钮属性:https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;collocation&#x2F;pages?id&#x3D;app-titlenview-buttons titleNView.buttons.type除了type文档还有其它属性 &quot;buttons&quot;: [&#123;&quot;type&quot;: &quot;menu&quot;&#125;,&#123;&quot;type&quot;: &quot;favorite&quot;&#125;] 其它类型 &quot;forward&quot;：前进按钮 &quot;back&quot;：后退按钮 &quot;share&quot;：分享按钮 &quot;favorite&quot;：收藏按钮 &quot;home&quot;：主页按钮 &quot;menu&quot;：菜单按钮 &quot;close&quot;：关闭按钮 &quot;none&quot;：无样式，不显示图标 自定义返回按钮titleNView.backButton 用法跟button一样,但需需要在autoBackButton设置为true时生效 https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;collocation&#x2F;pages?id&#x3D;app-titlenview-backbuttonstyles titleNView.&lt;其它属性&gt;https://uniapp.dcloud.io/collocation/pages?id=app-titlenview 出了按钮跟返回按钮 还有其它属性比如 searchInput 原生导航栏上的搜索框配置 homeButton 标题栏控件是否显示Home按钮 backgroundImage 背景图片路径 等等 这些按钮的生命周期 &#x2F;&#x2F;其中事件参数e.index值为点击按钮在buttons数组的索引值，从0开始 onNavigationBarButtonTap(e) 该生命周期监听按钮的点击事件 &#x2F;&#x2F;设有搜索框时搜索框的生命周期 onNavigationBarSearchInputChanged()&#x2F;&#x2F;搜索框内容变化 onNavigationBarSearchInputConfirmed()&#x2F;&#x2F;搜索事件也是手机的回车事件 更改这些按钮的方法webView对象文档及其它方法https://www.html5plus.org/doc/zh_cn/webview.html#搜索WebviewObject关键字第47个处 &#x2F;&#x2F; #ifdef APP-PLUS var webView &#x3D; this.$mp.page.$getAppWebview(); &#x2F;&#x2F;必须先获取webview对象 webview.showTitleNViewButtonRedDot()&#x2F;&#x2F;调用方法显示红点 webview.showTitleNViewButtonRedDot()&#x2F;&#x2F;调用方法隐藏红点 webview.setTitleNViewButtonBadge()&#x2F;&#x2F;修改红点角标 webview.setTitleNViewButtonStyle()&#x2F;&#x2F;修改按钮 &#x2F;&#x2F; #endif 这些是原生基础上app-plus的titleNView(导航栏),还有个subNVue(子窗口)属性 subNVue(子窗口)属性 以下都是在subNVue(子窗口)属性下操作配置subNVue.stylehttps://uniapp.dcloud.io/collocation/pages?id=app-subnvuesstyle subNVue是 vue 页面的子窗体，它不是全屏页面，就是用于解决 vue 页面中的层级覆盖和原生界面自定义用的。它也不是组件，就是一个原生子窗体 nvue快速上手 https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;nvue-outline?id&#x3D;_1%e6%96%b0%e5%bb%banvue%e9%a1%b5%e9%9d%a2 方法 const subNVue &#x3D; uni.getSubNVueById(&#39;原生子窗体的 ID&#39;);获取子窗口对象 用于开发弹窗与导航 subNVue对象的方法 https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;api&#x2F;window&#x2F;subNVues?id&#x3D;app-getsubnvuebyid nvue 跟 vue 的通讯 https:&#x2F;&#x2F;ask.dcloud.net.cn&#x2F;article&#x2F;36010 非原生基础上全局取消原生导航栏&quot;navigationStyle&quot;:&quot;custom&quot; 1.取消原生导航栏&quot;navigationStyle&quot;:&quot;custom&quot; 带来的问题:有些新组件已经解决了这个问题. 状态栏(显示电量的那一栏,不是导航栏),导航栏直接陷进去了. 2.处理状态栏问题App因为默认为沉浸式，去除导航栏后，页面顶部会直通到状态栏的区域uni-app 提供内置 CSS 变量解决https://uniapp.dcloud.io/frame?id=css%E5%8F%98%E9%87%8F写成代码后直接解决了我这个问题&lt;!-- #ifdef APP-PLUS --&gt; &lt;view class&#x3D;&quot;status_bar&quot;&gt; &lt;view class&#x3D;&quot;top_view&quot;&gt;&lt;&#x2F;view&gt; &lt;&#x2F;view&gt; &lt;!-- #endif --&gt; &#x2F;* * !!!然后在这下面放自己的导航组件就行 * https:&#x2F;&#x2F;ext.dcloud.net.cn&#x2F;plugin?id&#x3D;52(这个我感觉就可以了) *&#x2F; &#x2F;&#x2F;css部分 .status_bar &#123; height: var(--status-bar-height); width: 100%; background-color: #F8F8F8; &#125; .top_view &#123; height: var(--status-bar-height); width: 100%; position: fixed; background-color: #F8F8F8; top: 0; z-index: 999; &#125; 3.H5、小程序、App端状态栏都不一样，需要重新计算处理,下面是别人处理好的代码直接使用，在App.vue里面设置即可onLaunch: function() &#123; uni.getSystemInfo(&#123; success:function(e)&#123; Vue.prototype.statusBar &#x3D; e.statusBarHeight &#x2F;&#x2F; #ifndef MP if(e.platform &#x3D;&#x3D; &#39;android&#39;) &#123; Vue.prototype.customBar &#x3D; e.statusBarHeight + 50 &#125;else &#123; Vue.prototype.customBar &#x3D; e.statusBarHeight + 45 &#125; &#x2F;&#x2F; #endif &#x2F;&#x2F; #ifdef MP-WEIXIN let custom &#x3D; wx.getMenuButtonBoundingClientRect() Vue.prototype.customBar &#x3D; custom.bottom + custom.top - e.statusBarHeight &#x2F;&#x2F; #endif &#x2F;&#x2F; #ifdef MP-ALIPAY Vue.prototype.customBar &#x3D; e.statusBarHeight + e.titleBarHeight &#x2F;&#x2F; #endif &#125; &#125;) &#125;, 禁用原生导航后 还是可以通过接口改变样式的https://www.html5plus.org/doc/zh_cn/navigator.html#plus.navigator.setStatusBarStyle页面禁用原生导航栏后,仍可设置页面的 navigationBarTextStyle 属性 注意部分低端Android手机（4.4）自身不支持设置状态栏前景色。","tags":[{"name":"tabbar","slug":"tabbar","permalink":"http://example.com/tags/tabbar/"},{"name":"uniapp","slug":"uniapp","permalink":"http://example.com/tags/uniapp/"}]},{"title":"前端开发工具","date":"2022-06-21T16:00:00.000Z","path":"2022/06/22/资料库/前端工具/","text":"学习网址typescript资料https:&#x2F;&#x2F;github.com&#x2F;joye61&#x2F;typescript-tutorial 正则https:&#x2F;&#x2F;www.codejiaonang.com&#x2F;#&#x2F;course&#x2F;regex_chapter1&#x2F;0&#x2F;0 一些资料https:&#x2F;&#x2F;github.com&#x2F;FrontEndGitHub&#x2F;FrontEndGitHub&#x2F;issues&#x2F;37?mode&#x3D;light 插件库node 插件 文件处理multer 其它插件 图片点击全屏预览插件 npm install vue-directive-image-previewer -D css字体库 https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css 视频播放器 MuiPlayer","tags":[{"name":"cdn","slug":"cdn","permalink":"http://example.com/tags/cdn/"}]},{"title":"uview 封装一个http","date":"2022-06-20T16:00:00.000Z","path":"2022/06/21/UniApp/uview封装一个http/","text":"基本配置$u.http.setConfig()方法，传递一个对象作为参数. $u.get | post | put | delete(url, params, header).then(res &#x3D;&gt; {}).catch(res &#x3D;&gt; {}) 其中catch可不写,因为如果不是200状态内部就会进行model提示 所有配置都在 &#x2F;common&#x2F;http.interceptor.js 处写完之后，请在根目录的main.js 的new Vue()和app.$mount()之间引入此文件 &#x2F;&#x2F; http拦截器，此为需要加入的内容，如果不是写在common目录，请自行修改引入路径 import httpInterceptor from &#39;@&#x2F;common&#x2F;http.interceptor.js&#39; &#x2F;&#x2F; 这里需要写在最后，是为了等Vue创建对象完成，引入&quot;app&quot;对象(也即页面的&quot;this&quot;实例) Vue.use(httpInterceptor, app) app.$mount() 文件内容 (配置) const baseUrl&#x3D;&#39;https:&#x2F;&#x2F;api.example.com&#39; const install&#x3D;(Vue,vm)&#x3D;&gt;&#123; &#x2F;&#x2F; 基础配置 Vue.prototype.$u.http.setConfig(&#123; baseUrl, loadingText: &#39;努力加载中~&#39;, loadingTime: 800, &#125;) &#x2F;&#x2F; 请求拦截 Vue.prototype.$u.http.interceptor.request&#x3D;(config)&#x3D;&gt;&#123; config.header.token&#x3D;&#39;&#39; return config &#x2F;&#x2F; 如果return一个false值，则会取消本次请求 &#x2F;&#x2F; if(config.url &#x3D;&#x3D; &#39;&#x2F;user&#x2F;rest&#39;) return false; &#x2F;&#x2F; 取消某次请求 &#125; &#x2F;&#x2F; 响应拦截 Vue.prototype.$u.http.interceptor.response&#x3D;(response)&#x3D;&gt;&#123; if(response.code&#x3D;&#x3D;&#x3D;200)&#123; return resposne.result &#125;else&#123; &#x2F;&#x2F; 如果返回false，则会调用Promise的reject回调， &#x2F;&#x2F; 并将进入this.$u.post(url).then().catch(res&#x3D;&gt;&#123;&#125;)的catch回调中，res为服务端的返回值 return false; &#125; &#125; &#125; export default &#123; install &#125;","tags":[{"name":"uview","slug":"uview","permalink":"http://example.com/tags/uview/"}]},{"title":"uview的安装和功能","date":"2022-06-20T16:00:00.000Z","path":"2022/06/21/UniApp/uview的安装和功能/","text":"组件-内置样式组件-下载方式安装 下载 uview-ui 目录 引入 &#x2F;&#x2F; main.js import uView from &quot;uview-ui&quot;; Vue.use(uView); &#x2F;* uni.scss *&#x2F; @import &#39;uview-ui&#x2F;theme.scss&#39;; &#x2F;* App.vue *&#x2F; &lt;style lang&#x3D;&quot;scss&quot;&gt; &#x2F;* 注意要写在第一行，同时给style标签加入lang&#x3D;&quot;scss&quot;属性 *&#x2F; @import &quot;uview-ui&#x2F;index.scss&quot;; &lt;&#x2F;style&gt; 配置 easycom 组件模式 &#x2F;&#x2F; pages.json &#123; &quot;easycom&quot;: &#123; &quot;^u-(.*)&quot;: &quot;@&#x2F;uview-ui&#x2F;components&#x2F;u-$1&#x2F;u-$1.vue&quot; &#125;, &#x2F;&#x2F; 此为本身已有的内容 &quot;pages&quot;: [ &#x2F;&#x2F; ...... ] &#125; vue.config module.exports &#x3D; &#123; &#x2F;&#x2F; 配置路径别名 configureWebpack: &#123; devServer: &#123; disableHostCheck: true &#125; &#125; &#125; 组件-内置样式 文字省略 重置按钮样式 断点形式 边框(具有 ios 兼容)u-border 组件-注意事项 背景色问题 赋值设备信息的陷阱设备高度问题 小程序主包太大无法预览和发布 ::v-deep 写法问题 Uview js 工具 toast() 提示工具 os() 返回平台信息 andriod or ios sys() 设备信息 http 请求封装教程 api 集中管理 button 节流效果 对象深度克隆 对象深度合并 时间格式化 路由封装 数组乱序 生成全局唯一标识 颜色转换 颜色值 对象转 url 参数 规则校验 MD5 加密 随机数值 去除空格 获取 dom 节点,改变滚动条位置 小程序分享 丰富的模板指南 扩展图标 iconfont 自定义主题 全局变量globalDatavuex","tags":[{"name":"uview","slug":"uview","permalink":"http://example.com/tags/uview/"}]},{"title":"Hexo配置和使用","date":"2022-06-19T16:00:00.000Z","path":"2022/06/20/Hexo/Hexo/","text":"安装脚手架 脚手架 npm install hexo-cli -g 生成文件 init hexo init blog 安装依赖 cd blog npm install 生成网站 hexo g 过后会生成 public 目录 启动网站 hexo server 命令 hexo new &quot;text title&quot; &#x2F;&#x2F; 生成md文章 hexo new draft &quot;&quot; &#x2F;&#x2F; 草稿文章 hexo new page &quot;&quot; &#x2F;&#x2F;纯页面- 存入scaffolds中 配置 Front Matter --- title: &quot;&quot; category: &#x2F;&#x2F;分类 - 1 - 2 conmment: on &#x2F;&#x2F; 是否启用评论 --- 上传到 github 搭建仓库 username.github.io 命名username 必须跟 github 用户名一致 安装依赖 yarn add hexo-deployer-git --save _config.yml 配置 # Deployment ## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment deploy: type: git repo: git@github.com:isAllyn&#x2F;xiaolblog.github.io.git branch: master 代码高亮 # 代码高亮配置文件 highlight: enable: true line_number: true auto_detect: false tab_replace: &#39;&#39; wrap: true hljs: false prismjs: enable: false preprocess: true line_number: true tab_replace: &#39;&#39; 置顶置顶的文章的 Front-matter 中加上 top: true 即可 --- title: BlueLake博客主题的详细配置 tags: [hexo,BlueLake] categories: Hexo博客 top: true --- 相关配置资料 [hexo 详细配置]https://chaoo.gitee.io/2016/12/29/bluelake.html[front-matter 配置]https://hexo.io/zh-cn/docs/front-matter#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE","tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"BlueLake","slug":"BlueLake","permalink":"http://example.com/tags/BlueLake/"}]},{"title":"Hexo的一些错误","date":"2022-06-19T16:00:00.000Z","path":"2022/06/20/Hexo/Hexo的一些错误/","text":"Error [Nunjucks Error] + html error找到这个地方将一些特殊字符改掉","tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"vue2 Button 组件","date":"2022-04-15T16:00:00.000Z","path":"2022/04/16/Tem/Button组件/","text":"&lt;!-- * @Author: BORING GHOST * @Date: 2022-04-16 11:09:52 * @LastEditTime: 2022-04-16 16:27:19 * @Description: 按钮组件 --&gt; &lt;template&gt; &lt;div class&#x3D;&quot;ButtonTem__&quot;&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot;add-btn btn-position icon-theme&quot; v-if&#x3D;&quot; typeStr&#x3D;&#x3D;&#x3D;&#39;add&#39;&quot;&gt; &lt;i class&#x3D;&quot;icon-i iconfontBtn icon-jia&quot;&gt;&lt;&#x2F;i&gt; &lt;div class&#x3D;&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot;del-btn btn-position icon-theme&quot; v-else-if&#x3D;&quot; typeStr&#x3D;&#x3D;&#x3D;&#39;del&#39;&quot;&gt; &lt;i class&#x3D;&quot;icon-i iconfontBtn icon-guanbi&quot;&gt;&lt;&#x2F;i&gt; &lt;span class&#x3D;&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot;export-btn btn-position icon-theme&quot; v-else-if&#x3D;&quot; typeStr&#x3D;&#x3D;&#x3D;&#39;export&#39;&quot;&gt; &lt;span class&#x3D;&quot;icon-i iconfontBtn icon-daochu&quot;&gt;&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot;search-btn btn-position icon-theme&quot; v-else-if&#x3D;&quot; typeStr&#x3D;&#x3D;&#x3D;&#39;search&#39;&quot;&gt; &lt;span class&#x3D;&quot;icon-i iconfontBtn icon-sousuo&quot;&gt;&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot;refresh-btn btn-position icon-theme&quot; v-else-if&#x3D;&quot; typeStr&#x3D;&#x3D;&#x3D;&#39;refresh&#39;&quot;&gt; &lt;span class&#x3D;&quot;icon-i iconfontBtn icon-shuaxin&quot;&gt;&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot;update-btn btn-position icon-theme&quot; v-else-if&#x3D;&quot; typeStr&#x3D;&#x3D;&#x3D;&#39;update&#39;&quot;&gt; &lt;span class&#x3D;&quot;icon-i iconfontBtn icon-xiugai&quot;&gt;&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot;reset-btn btn-position icon-theme&quot; v-else-if&#x3D;&quot; typeStr&#x3D;&#x3D;&#x3D;&#39;reset&#39;&quot;&gt; &lt;span class&#x3D;&quot;icon-i&quot; :class&#x3D;&quot;reset_icon&quot;&gt;&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt; &lt;div @click&#x3D;&quot;btnEventClick&quot; class&#x3D;&quot; default-btn btn-position btn-theme&quot; v-else&gt; &#123;&#123;text&#125;&#125; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;template&gt; &lt;script&gt; export default &#123; name: &#39;ButtonTem&#39;, props: &#123; typeStr: &#123; type: String, default: () &#x3D;&gt; &#39;default&#39; &#125;, text: &#123; type: String, default: () &#x3D;&gt; &#39;Button&#39; &#125;, reset_icon: &#123; type: String, default: () &#x3D;&gt; &#39;iconfontBtn icon-zhongzhi&#39; &#125; &#125;, methods: &#123; &#x2F;** * @event: 点击 *&#x2F; btnEventClick() &#123; this.$emit(&#39;click&#39;) &#125; &#125;, &#125;; &lt;&#x2F;script&gt; &lt;style lang&#x3D;&quot;scss&quot; scoped&gt; .ButtonTem__ &#123; .default-btn &#123; padding: 8px; border: 2px solid rgba(28, 132, 198, 1); color: rgba(255, 255, 255, 1); background-color: rgba(28, 132, 198, 1); &amp;:hover &#123; background-color: rgba(23, 100, 148, 1); border-color: rgba(28, 132, 198, 1); &#125; &amp;:active &#123; background-color: rgba(28, 132, 198, 1); border-color: rgba(23, 100, 148, 1); &#125; &#125; .add-btn &#123; border: 2px solid rgba(28, 132, 198, 1); color: rgba(255, 255, 255, 1); background-color: rgba(28, 132, 198, 1); &amp;:hover &#123; background-color: rgba(23, 100, 148, 1); border-color: rgba(28, 132, 198, 1); &#125; &amp;:active &#123; background-color: rgba(28, 132, 198, 1); border-color: rgba(23, 100, 148, 1); &#125; &#125; .del-btn &#123; border: 2px solid rgba(237, 85, 101, 1); color: rgba(255, 255, 255, 1); background-color: rgba(237, 85, 101, 1); &amp;:hover &#123; background-color: rgba(245, 157, 166, 1); border-color: rgba(237, 85, 101, 0.7); &#125; &amp;:active &#123; background-color: rgba(237, 85, 101, 1); border-color: rgba(245, 157, 166, 1); &#125; &#125; .export-btn &#123; border: 2px solid rgba(248, 172, 89, 1); color: rgba(255, 255, 255, 1); background-color: rgba(248, 172, 89, 1); &amp;:hover &#123; background-color: rgba(212, 146, 75, 1); border-color: rgba(248, 172, 89, 1); &#125; &amp;:active &#123; background-color: rgba(248, 172, 89, 1); border-color: rgba(212, 146, 75, 1); &#125; &#125; .search-btn &#123; border: 2px solid rgba(64, 158, 255, 1); color: rgba(255, 255, 255, 1); background-color: rgba(64, 158, 255, 1); &amp;:hover &#123; background-color: rgba(102, 177, 255, 1); border-color: rgba(64, 158, 255, 1); &#125; &amp;:active &#123; background-color: rgba(64, 158, 255, 1); border-color: rgba(102, 177, 255, 1); &#125; &#125; .refresh-btn &#123; border: 2px solid rgba(39, 208, 216, 1); color: rgba(255, 255, 255, 1); background-color: rgba(39, 208, 216, 1); &amp;:hover &#123; background-color: rgba(39, 208, 216, 1); border-color: rgb(31, 178, 185); &#125; &amp;:active &#123; background-color: rgba(31, 178, 185, 1); border-color: rgba(39, 208, 216, 1); &#125; &#125; .update-btn &#123; border: 2px solid rgba(142, 175, 212, 1); color: rgba(255, 255, 255, 1); background-color: rgba(142, 175, 212, 1); &amp;:hover &#123; background-color: rgba(142, 175, 212, 1); border-color: rgb(107, 141, 180); &#125; &amp;:active &#123; background-color: rgba(107, 141, 180, 1); border-color: rgba(142, 175, 212, 1); &#125; &#125; .reset-btn &#123; border: 2px solid gray; color: rgba(255, 255, 255, 1); background-color: gray; &amp;:hover &#123; background-color: gray; border-color: rgb(128, 128, 128, 0.5); &#125; &amp;:active &#123; background-color: rgba(128, 128, 128, 0.5); border-color: gray; &#125; &#125; &#x2F;* modules *&#x2F; .btn-position &#123; display: flex; justify-content: center; align-items: center; max-height: 33px; &#125; .btn-theme &#123; border-radius: 5px; user-select: none; overflow: hidden; &#125; .icon-theme &#123; padding: 8px; border-radius: 5px; user-select: none; overflow: hidden; .icon-i &#123; padding: 0 5px 0 3px; font-size: 16px; &#125; .text &#123; transform: translateY(10%); &#125; &#125; &#125; &lt;&#x2F;style&gt;","tags":[{"name":"tem","slug":"tem","permalink":"http://example.com/tags/tem/"},{"name":"vue2","slug":"vue2","permalink":"http://example.com/tags/vue2/"}]},{"title":"vue2 头部自适应header组件","date":"2022-04-15T16:00:00.000Z","path":"2022/04/16/Tem/HeaderSearch组件/","text":"&lt;!-- * @Author: BORING GHOST * @Date: 2022-04-15 15:56:47 * @LastEditTime: 2022-04-16 13:57:18 * @Description: 头部搜索框封装 --&gt; &lt;template&gt; &lt;el-card class&#x3D;&quot;card-container_&quot; shadow&#x3D;&quot;hover&quot;&gt; &lt;div class&#x3D;&quot;HearderSearchInput__&quot;&gt; &lt;template v-for&#x3D;&quot;num in item_num&quot;&gt; &lt;div class&#x3D;&quot;InputItem&quot; :key&#x3D;&quot;num&quot;&gt; &lt;slot :name&#x3D;&quot;&#96;item$&#123;num&#125;&#96;&quot;&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt; &lt;&#x2F;template&gt; &lt;&#x2F;div&gt; &lt;&#x2F;el-card&gt; &lt;&#x2F;template&gt; &lt;script&gt; export default &#123; name: &#39;HearderSearchInput&#39;, props: &#123; num: &#123; type: Number, default: () &#x3D;&gt; 8 &#125; &#125;, created() &#123; let ar &#x3D; [] for (let k &#x3D; 1; k &lt;&#x3D; this.num; k++) &#123; ar[k - 1] &#x3D; k &#125; this.item_num &#x3D; ar &#125;, data() &#123; return &#123; item_num: [] &#125;; &#125;, &#125;; &lt;&#x2F;script&gt; &lt;style lang&#x3D;&quot;scss&quot; scoped&gt; .HearderSearchInput__ &#123; display: flex; justify-content: flex-start; align-items: center; flex-wrap: wrap; .InputItem &#123; margin: 6px; &#125; &#125; .card-container_ &#123; ::v-deep .el-card__body &#123; padding: 10px 5px 10px 5px; &#125; &#125; &lt;&#x2F;style&gt;","tags":[{"name":"tem","slug":"tem","permalink":"http://example.com/tags/tem/"},{"name":"vue2","slug":"vue2","permalink":"http://example.com/tags/vue2/"}]},{"title":"vue2 复合型input框封装","date":"2022-04-15T16:00:00.000Z","path":"2022/04/16/Tem/InputItem组件/","text":"&lt;!-- * @Author: BORIN GHOST * @Date: 2022-04-15 16:53:15 * @LastEditTime: 2022-04-16 17:45:31 * @Description: 复合型input框封装 --&gt; &lt;template&gt; &lt;div class&#x3D;&quot;InputItem__&quot;&gt; &lt;div v-show&#x3D;&quot;label?true:false&quot; class&#x3D;&quot;label&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;input-content&quot;&gt; &lt;slot&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;template&gt; &lt;script&gt; export default &#123; name: &#39;InputItem&#39;, props: &#123; label: &#123; type: String, default: () &#x3D;&gt; &#39;&#39; &#125; &#125;, &#125;; &lt;&#x2F;script&gt; &lt;style lang&#x3D;&quot;scss&quot; scoped&gt; .InputItem__ &#123; background-color: rgba(245, 247, 250, 1); border: 1px solid rgba(192, 196, 214, 1); display: flex; border-radius: 3px; justify-content: flex-start; align-items: center; font-size: 15px; overflow: hidden; .label &#123; padding: 5px; &#125; ::v-deep .el-input__inner &#123; border-radius: 0; padding: 5px; border-color: rgba(24, 144, 255, 0); font-size: 15px; &amp;.el-date-editor--daterange, &amp;.el-date-editor--datetimerange &#123; padding: 3px; &#125; &#125; &#x2F;* 聚焦下边框颜色 *&#x2F; ::v-deep .el-input__inner:focus &#123; border-color: rgba(24, 144, 255, 1); &#125; ::v-deep .is-focus .el-input__inner &#123; border-color: rgba(24, 144, 255, 1); &#125; &#125; &lt;&#x2F;style&gt;","tags":[{"name":"tem","slug":"tem","permalink":"http://example.com/tags/tem/"},{"name":"vue2","slug":"vue2","permalink":"http://example.com/tags/vue2/"}]},{"title":"vue-router@4学习笔记","date":"2022-04-15T16:00:00.000Z","path":"2022/04/16/其他/vue-router@4学习笔记/","text":"installnpm i -S vue-router@4 useimport &#123;createRouter,createWebHistory,RouteRecordRaw&#125; from &#39;vue-router&#39; import Layout from &#39;.&#x2F;component.vue&#39; const staticRoutes:Array&lt;RouteRecordRaw&gt;&#x3D;[ &#123; path:&#39;&#x2F;&#39;, name:&#39;home&#39;, component:Layout &#125; ] const router&#x3D;createRouter(&#123; history:createWebHistory(), routes:staticRoutes &#125;) export default router mian.ts import router form &#39;@&#x2F;router&#x2F;index&#39; app.use(router) keep-alive&lt;template&gt; &lt;!-- vue3.0配置 --&gt; &lt;router-view v-slot&#x3D;&quot;&#123; Component &#125;&quot;&gt; &lt;keep-alive&gt; &lt;component :is&#x3D;&quot;Component&quot; :key&#x3D;&quot;$route.name&quot; v-if&#x3D;&quot;$route.meta.keepAlive&quot;&#x2F;&gt; &lt;&#x2F;keep-alive&gt; &lt;component :is&#x3D;&quot;Component&quot; :key&#x3D;&quot;$route.name&quot; v-if&#x3D;&quot;!$route.meta.keepAlive&quot;&#x2F;&gt; &lt;&#x2F;router-view&gt; &lt;&#x2F;template&gt; &lt;!-- add+ --&gt; meta: &#123; keepAlive: true &#125;,","tags":[{"name":"vue-router","slug":"vue-router","permalink":"http://example.com/tags/vue-router/"}]},{"title":"电脑清理","date":"2022-04-08T16:00:00.000Z","path":"2022/04/09/其他/电脑清理/","text":"添加右击打开1、快捷键Win + R，打开： regedit，来到‘注册表编辑器’。 2、输入路径，跳转到‘计算机\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell’ 3.新建项windowterminal 4.新建字符添加一个Icon属性,值为图标的路径,可以不填 5.再新建一个子项叫command,默认值为 C:\\Users\\(用户名)\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -p &quot;Command Prompt&quot; -d . 新电脑配置 开启清理垃圾 右键选择显示设置 选择存储 打开存储感知,点击下方配置 临时文件什么的改为每天 关闭无用开机自启 点击任务栏 点击启动 把不需要的都禁用 修改默认存储盘 显示设置 点击存储然后下滑 点击 更改新内容的保存位置 查看电脑使用记录 进入cmd 输入 recent 回车 C盘清理 download logFiles prefetch temp 4个文件夹删除系统缓存垃圾 wind日常更新补丁包 电脑访问痕迹 临时文件 解决电脑卡顿进入任务管理器 点击文件,运行新任务 输入cmd进入terminal 输入chkdsk回车(检查磁盘系统) 输入sfc&#x2F;scannow回车(查找损坏文件并修复) 激活wind系统创建bat后缀文件 内容为: slmgr&#x2F;skms kms.03k.org slmgr&#x2F;ato wind激活密钥cmd依次输入 win10专业版 slmgr&#x2F;ipk W269N-WFGWX-YVC9B-4J6C9-T83GX slmgr&#x2F;skms kms kms.03k.org slmgr&#x2F;ato win10企业版 slmgr&#x2F;ipk NPPR9-FWDCX-D2C8J-H872K-2FT43 slmgr&#x2F;skms kms kms.03k.org slmgr&#x2F;ato win10家庭版 slmgr&#x2F;ipk TX9XD-98N7V-6WNQ6-BX7FG-H8Q99 slmgr&#x2F;skms kms kms.03k.org slmgr&#x2F;ato 修改电脑密码重启 连续按F8 选择安全模式 出现adminostrator账户,打开管理员,命令窗口 输入 etuserAA123456&#x2F;add 密码就会改成123456 然后重启 查看wifi密码cd cmd for &#x2F;f &quot;skip&#x3D;9 tokens&#x3D;1,2 delims&#x3D;:&quot; %i in (&#39;netsh wlan show profiles&#39;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key&#x3D;clear","tags":[{"name":"window","slug":"window","permalink":"http://example.com/tags/window/"}]},{"title":"vue3 学习笔记","date":"2022-04-07T16:00:00.000Z","path":"2022/04/08/Vue/vue3学习笔记/","text":"****### 区别 或者说是新特性 双向绑定 v2 使用的 Object.definePropety()实现,通过 length or keys 修改监听不到 v3 使用的基于 Proxy Dom 渲染 - v2 使用 diff,对新旧 dom 进行全量对比 - v3 使用 diff 对新旧 dom 对比,v3 不会对静态 dom(没有绑定任何数据)做标记,只对动态 dom(通过 v-bind or &#123;&#123;&#125;&#125; 绑定有数据的)做相应的标记,在数据发生改变时只会对有标记的 dom 进行处理 - 对事件侦听器做了缓存处理,页面不断刷新不会使侦听器销毁再重建 &lt;template v-for :key&gt; &lt;div v-if&#x2F;&gt; &lt;&#x2F;template&gt; 根节点 v3 支持多根节点 &lt;template&gt; &lt;div&#x2F;&gt; &lt;div&#x2F;&gt; &lt;&#x2F;template&gt; v3 添加 render() 函数 JSX 写法 v3 支持多个 v-model (v2 中只支持一个) 添加内置组件 Suspense Tree Shaking v2 中一些没用到的内置 api 都会被打包 v3 新增 tree shaking 特性,因为 api 都需要导出使用,则一些用不到的 api 不会被打包,主要清除了多余的代码比如:import &#123;watch&#125; from &#39;vue&#39; 函数式编程 添加 Setup 钩子,也叫 vue Hook 使用 ref 使用 什么是 ref?ref 和 reactive 一样,也是用来实现响应式数据的方法由于 reactive 必须传递一个对象,所以在实际开发中如果只是想让某个变量实现响应式的时候回非常麻烦所以 Vue3 提供了 ref 方法实现简单值得监听 2.ref 本质ref 底层其实还是 reactive,所以当运行时系统会自动根据传入的 ref 转换成 reactive. 3.ref 注意点在 vue 中使用 ref 的值不用通过 value 获取在 js 中使用 ref 的值必须通过 value 获取 import &#123;ref&#125; from &#39;vue&#39; &#x2F;** * @event: ref * @Tip: *&#x2F; const ref_value &#x3D; ref(&#123; name: &#39;Boring ghost&#39; &#125;) const ref_change &#x3D; () &#x3D;&gt; &#123; ref_value.value.name &#x3D; &#39;Boring ghost is change&#39; &#125; &lt;!-- 按钮 --&gt; &lt;button @click&#x3D;&quot;ref_change&quot;&gt;change ref&lt;&#x2F;button&gt; &lt;div&gt;&#123;&#123;ref_value.name&#125;&#125;&lt;&#x2F;div&gt; Ref 泛型 import &#123; Ref &#125; from &#39;vue&#39; const ref_value:Ref&lt;string&gt;&#x3D;ref(&quot;text&quot;) &#x2F;&#x2F; no problem isRef 判断是否为 ref 对象 import &#123; ref,isRef &#125; from &#39;vue&#39; const ref_vlue &#x3D; ref(&quot;Boring ghost&quot;) const its_value&#x3D; &quot;Boring ghost&quot; isRef(ref_value)&#x2F;&#x2F;return is true isRef(its_value)&#x2F;&#x2F;return is false shallowRef 比较提高性能 监听到 value, value 内部不具备响应式 import &#123; ref, Ref, isRef, shallowRef &#125; from &#39;vue&#39; &#x2F;* shallowRef *&#x2F; let shallowRef_value &#x3D; shallowRef(&#123; name: &#39;shallowRef Boring ghost&#39; &#125;) setTimeout(() &#x3D;&gt; &#123; shallowRef_value.value.name &#x3D; &#39;1221&#39; &#x2F;&#x2F;并不会更新dom上的渲染 console.log(shallowRef_value.value.name) shallowRef_value.value &#x3D; &#123; &#x2F;&#x2F;会更新到dom name: &#39;099999&#39; &#125; &#125;, 1000) &lt;div&gt;&#123;&#123;shallowRef_value.name&#125;&#125;&lt;&#x2F;div&gt; &#x2F;&#x2F;&#39;099999&#39; triggerRef 强制响应 import &#123; ref, Ref, isRef, shallowRef, triggerRef &#125; from &#39;vue&#39; &#x2F;* shallowRef : 非响应 *&#x2F; let shallowRef_value &#x3D; shallowRef(&#123; name: &#39;shallowRef Boring ghost&#39; &#125;) setTimeout(() &#x3D;&gt; &#123; shallowRef_value.value.name &#x3D; &#39;1221&#39; console.log(shallowRef_value.value.name) &#125;, 1000) &#x2F;* triggerRef : 强制响应 *&#x2F; const ref_triggerRef &#x3D; () &#x3D;&gt; &#123; triggerRef(shallowRef_value) &#x2F;&#x2F;Tip:一般搭配shallowRef使用,因为不会响应到dom,如果需要响应就使用trggerRef强制响应 &#125; customRef 自定义 ref &#x2F;* customRef :自定义ref *&#x2F; function my_ref&lt;T&gt;(value: T) &#123; return customRef((trank, trigger) &#x3D;&gt; &#123; return &#123; get() &#123; trank() &#x2F;&#x2F;收集依赖,让这个值变成响应式 return value &#125;, set(newvalue: T) &#123; value &#x3D; newvalue console.log(value, newvalue) trigger() &#x2F;&#x2F;修改完触发一下以实现效果 &#125; &#125; &#125;) &#125; let cus_value &#x3D; my_ref(&#39;Boring ghost&#39;) cus_value.value &#x3D; &#39;new Boring ghost&#39; reactive 响应式 reactive 复杂数据响应式 &#x2F;* reactive : 复杂数据响应式 *&#x2F; let react_arr: &#123; [propName: string]: any &#125; &#x3D; reactive(&#123; name: &#39;Boring ghost&#39;, list: [] &#125;) setTimeout(() &#x3D;&gt; &#123; react_arr.name &#x3D; &#39;new Boring ghost&#39; &#x2F;&#x2F;no problem console.log(react_arr.name) react_arr.list &#x3D; [12] &#x2F;&#x2F;no problem react_arr &#x3D; &#123; name: &#39;two: new Boring ghost&#39; &#125; console.log(react_arr.name) &#x2F;&#x2F;At Question! 直接赋值破坏了响应式,数据变了,但是dom没有响应 react_arr.list &#x3D; [12] &#x2F;&#x2F;At Question! 前面对react_arr直接赋值直接破坏了响应式,所有后面的更改都相当于没有了响应 &lt;!-- 最终的结果就是&#123; &quot;name&quot;: &quot;new Boring ghost&quot;, &quot;list&quot;: [ 12 ] &#125; --&gt; 破坏响应式之后数据改变,是不会响应到dom的 &#125;, 3000) readonly 只读的 &#x2F;* readonly : copy 出一个对象,copy 后这个对象是只读的不能赋值 *&#x2F; let reactive_object &#x3D; reactive(&#123; name: &#39;Boring ghost&#39; &#125;) let copy &#x3D; readonly(reactive_object) reactive_object.name &#x3D; &#39;12122&#39; &#x2F;&#x2F;no problem console.log(copy) &#x2F;&#x2F;no problem &#x2F;&#x2F; copy.name&#x3D;&#39;&#39;&#x2F;&#x2F;At Question! copy 是只读的 shallowReactive 变量只挂载一次 &#x2F;* shallowReactive :挂载到dom后便不会响应,浅层次的会更新 *&#x2F; let shallow_value&#x3D;shallowReactive(&#123; name:&#39;Boring ghost&#39;, obj:&#123; name:&quot;friend&quot; &#125; &#125;) function change_one()&#123; shallow_value.name&#x3D;&quot;new Boring ghost!&quot; &#x2F;&#x2F;no problem and show template &#125; function change_two()&#123; shallow_value.obj.name&#x3D;&quot;new Friend !&quot; &#x2F;&#x2F;At Question! :数据会更改,但是不会更新到template &#125; to 的用法 toRef 原始对象是响应式&#x2F;非响应式 则 toRef 后的对象就是 响应式&#x2F;非响应式 and toRefs 带有解构 响应式的数据在更新视图时,自然会更新那些带有标记但是因为数据并非是响应式而尚未更新的视图 import &#123; toRef, ref, reactive &#125; from &#39;vue&#39; &#x2F;* toRef: 原始对象是响应式&#x2F;非响应式 则 toRef 后的对象就是 响应式&#x2F;非响应式 *&#x2F; &#x2F;* Tip: 更改 toRef 后的数据同时会改变原始数据 *&#x2F; let noRef_obj &#x3D; &#123; name: &#39;Boring ghost&#39; &#125; let ref_zhang &#x3D; reactive(&#123; name: &#39;Boring ghost! zhang&#39; &#125;) let value_newObj &#x3D; toRef(noRef_obj, &#39;name&#39;) let &#123; name &#125; &#x3D; toRefs(noRef_obj)&#x2F;&#x2F;toRefs 可以进行解构 let new_zhang &#x3D; toRef(ref_zhang, &#39;name&#39;) function chage_obj() &#123; noRef_obj.name &#x3D; &#39;new Boring ghost&#39; &#x2F;&#x2F;At Question! 视图是不会改变,原始对象是非响应式 &#x2F;* Tip:若果没有下面这一行,仅靠上面是不会更新视图的,但是加了下面这一行,也就是原始数据本身是响应式的 *&#x2F; &#x2F;* 所以视图是会跟着响应的,在响应的同时,绑定标记的dom自然也就跟着渲染到新状态了 *&#x2F; new_zhang.value &#x3D; &#39;new Boring ghost! zhang&#39; &#x2F;&#x2F;no problem and can show template &#125; toRaw 将响应式对象变成非响应式对象 import &#123; toRef, ref, reactive, toRefs, toRaw &#125; from &#39;vue&#39; let react_lisi &#x3D; reactive(&#123; name: &#39;Boring ghost lisi&#39;, num: 2 &#125;) let new_lisi &#x3D; toRaw(react_lisi) function click_lisi() &#123; new_lisi.name &#x3D; &#39;new Boring ghost&#39; &#x2F;&#x2F;can&#39;t show to template view console.log(new_lisi.name) &#x2F;&#x2F;new Boring ghost &#125; markRaw 标记一个对象，使其永远不会再成为响应式对象。 &lt;!-- 在使用动态组件时非常有用 --&gt; import tem1 from &quot;.&#x2F;tem1.vue&quot; import tem2 from &quot;.&#x2F;tem2.vue&quot; interface Tem&#123; name:string, temName:any &#125; const data&#x3D;reactive&lt;Tem[]&gt;([ &#123; name:&#39;template no.1&#39;, temName:markRaw(tem1) &#125;, &#123; name:&quot;template no.2&quot;, temName:markRaw(tem2) &#125; ]) computed 计算属性 computed import &#123; ref, computed &#125; from &#39;vue&#39; &#x2F;* computed : 计算属性 *&#x2F; let str_one &#x3D; ref(&#39;&#39;) let str_two &#x3D; ref(&#39;&#39;) let compute_value &#x3D; computed(&#123; get() &#123; return str_one.value + str_two.value &#125;, set() &#123; str_one.value + str_two.value &#125; &#125;) &lt;!-- or --&gt; let compute_value &#x3D; computed(() &#x3D;&gt; &#123; return str_one.value + str_two.value &#125;) watch 监听tip:reactive 不管写不写 deep 都能够深度监听 &#x2F;* watch 监听 *&#x2F; watch([str_one, str_two], (newv, oldv) &#x3D;&gt; &#123;&#125;, &#123; deep: true, immediate: true &#125;) &lt;!-- 监听单个 --&gt; watch(str_one,()&#x3D;&gt;&#123;&#125;) 高级侦听 &#x2F;* 高级侦听 *&#x2F; let stop_watch &#x3D; watchEffect( oninvalidate &#x3D;&gt; &#123; &#x2F;* Tip: watchEffect 里面的值,只要改变就会执行,包括页面刚加载*&#x2F; console.log(str_one.value) console.log(12) oninvalidate(() &#x3D;&gt; &#123; &#x2F;&#x2F;每次改变都会限执行这个函数,页面刚加载不会执行 console.log(&#39;befor&#39;) &#125;) &#125;, &#123; &#x2F;&#x2F;额外的配置项 flush: &#39;post&#39; &#x2F;&#x2F;post 组件更新后执行,pre 更新前 sync同步 &#125; ) &#x2F;* 返回值可以停止监听 *&#x2F; stop_watch() 使用组件引入后可以直接使用 &lt;script setup lang&#x3D;&quot;ts&quot;&gt; &#x2F;* 引入组件 *&#x2F; import tem from &#39;.&#x2F;components&#x2F;test_template.vue&#39; &lt;&#x2F;script&gt; 生命周期顺序 &#x2F;* 生命周期的顺序 *&#x2F; import &#123; onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted &#125; from &#39;vue&#39; &#x2F;* setup *&#x2F; console.log(&#39;setup 是最先执行的,可以处理一些数据,same as created&#39;) &#x2F;* onBeforeMount *&#x2F; onBeforeMount(() &#x3D;&gt; &#123; console.log(&#39;dom渲染之前,这里获取不到dom元素&#39;) &#125;) &#x2F;* onMounted *&#x2F; onMounted(() &#x3D;&gt; &#123; console.log(&#39;don渲染完之后,这里可以对dom元素进行操作&#39;) &#125;) &#x2F;* onBeforeUpdate *&#x2F; onBeforeUpdate(() &#x3D;&gt; &#123; console.log(&#39;数据改变dom更新之前&#39;) &#125;) &#x2F;* onUpdated *&#x2F; onUpdated(() &#x3D;&gt; &#123; console.log(&#39;数据改变dom更新完成&#39;) &#125;) &#x2F;* onBeforeUnmount *&#x2F; onBeforeUnmount(() &#x3D;&gt; &#123; console.log(&#39;组件卸载之前,same as vue2 befordestory&#39;) &#125;) &#x2F;* onUnmounted *&#x2F; onUnmounted(() &#x3D;&gt; &#123; console.log(&#39;组件卸载完成,same as vue2 destoryed&#39;) &#125;) 组件传参 same as vue2 &lt;script&gt; export default &#123; props: &#123; props_value: &#123; type: String &#125; &#125; &#125; &lt;&#x2F;script&gt; setup 语法糖 &amp; ts 中 不需要导出接口, setup 默认以解析 &lt;script setup lang&#x3D;&#39;ts&#39;&gt; interface Props &#123; props_value: string &#125; defineProps&lt;Props&gt;() &lt;&#x2F;script&gt; &lt;div&gt;值:&#123;&#123;props_value&#125;&#125;&lt;&#x2F;div&gt; props 的默认值 &#x2F;* son template&#39;s props *&#x2F; interface Props &#123; name: string, array:number[] &#125; withDefaults(defineProps&lt;Props&gt;(), &#123; name: &#39;当前为默认值&#39;, array: () &#x3D;&gt; [], &#x2F;&#x2F;复杂类型使用返回值 &#125;) 子向父传递参数 通过 defineEmits API ,语法糖以解析,不需要 import &lt;!-- son template --&gt; const emits &#x3D; defineEmits([&#39;on-change&#39;,&#39;on-click&#39;]) function emitToFather()&#123; emits(&#39;on-click&#39;,&#39;这是传递的参数&#39;) &#125; &lt;!-- father template :same as vue2--&gt; function self_click(arg:string)&#123; console.log(arg) &#x2F;&#x2F;return value is &#39;这是传递的参数&#39; &#125; &lt;tem @on-click&#x3D;&#39;self_click&#39;&#x2F;&gt; 通过依赖注入跨多子组件传参 注入之后直接在当前组件使用没有用 修改参数也会响应变化到其它组件的值 &lt;!-- parent component --&gt; import &#123; ref, Ref, provide, inject &#125; from &#39;vue&#39; let test_value &#x3D; ref(&#39;name&#39;) provide(&#39;test_give&#39;, test_value) &#x2F;&#x2F;ref传递不要.value &lt;!-- son no1 --&gt; import com2 from &#39;@&#x2F;components&#x2F;other&#x2F;com_no2.vue&#39; let son_value &#x3D; inject(&#39;test_give&#39;, ref(&#39;default value&#39;)) &lt;!-- son no2 --&gt; import &#123; inject, Ref, ref &#125; from &#39;vue&#39; &#x2F;* Tip:inject 必须给一个默认值,否则会报错 *&#x2F; let son_value &#x3D; inject(&#39;test_give&#39;, ref(&#39;default value&#39;)) function change_value() &#123; son_value.value &#x3D; &#39;new value&#39; &#125; eventBus 传参 vue3 移除了 emit on 方法,需要自己创建一个 utils 工具 &lt;!-- here is eventBus --&gt; class Bus&#123; list:&#123;[key:string]:Array&lt;Function&gt;&#125; constructor()&#123; this.list&#x3D;&#123;&#125; &#125; on(name:string,arg:Function)&#123; this.list[name]&#x3D;this.list[name]||[] this.list[name].push(arg) &#125; emit(name:string,arg?:any)&#123; if(this.list[name])&#123; for(let fn of this.list[name])&#123; fn(arg) &#125; &#125; &#125; &#125; export default new Bus() &lt;!-- here brother no1 --&gt; import bus from &#39;.&#x2F;eventBus&#39; bus.on(&#39;test_fn&#39;,()&#x3D;&gt;&#123;..&#125;) &lt;!-- here brother no2 --&gt; import bus from &#39;.&#x2F;eventBus&#39; bus.emit(&#39;test_fn&#39;,&#39;arg_value&#39;) 组件 全局组件 局部组件 递归组件 main.ts 注册全局组件 &#x2F;* these is need use&#39;s template *&#x2F; import btnTem1 from &#39;.&#x2F;components&#x2F;btnTem1.vue&#39; import btnTem2 from &#39;.&#x2F;components&#x2F;btnTem2.vue&#39; const app &#x3D; createApp(App) app.component(&#39;btnTem1&#39;, btnTem1) app.component(&#39;btnTem2&#39;, btnTem2) app.mount(&#39;#app&#39;) 动态组件的渲染 &lt;!-- template --&gt; &lt;component :is&#x3D;&#39;current_component&#39;&#x2F;&gt; &lt;button @click&#x3D;&#39;switch_component&#39;&#x2F;&gt; &lt;!-- script --&gt; import 引入一些组件,例: tem1 tem2 tem3 interface Tem&#123; name:string, comName:any &#125; const component_data&#x3D;reactive&lt;Tem[]&gt;([ &#123; name:&#39;component no.1&#39;, comName:markRaw(tem1),&#x2F;&#x2F;永久注销他的响应式来提高性能 &#125;, &#123; name:&#39;component no.2&#39;, comName:markRaw(tem2) &#125;, &#123; name:&#39;component no.3&#39;, comName:markRaw(tem3) &#125; ]) const current_compontent&#x3D;ref(component_data[0].comName) function switch_component()&#123; let random_num&#x3D;Math.floor(Math.random()*(3-0)+0) current_component.value&#x3D;component_data[random_num].comName &#125; 组件异步加载 作用:组件过大时使用能提高性能 打包后也会将组件的逻辑单独打一个文件,不会添加主逻辑文件的负担例:一个 demo 引入的子组件非常大时可使用,这样这个页面加载时就不会同步加载这个组件,如果同步加载这个组件这个组件又比较大就会出现页面加载白屏卡顿的现象 方式一 default 为默认插槽 fallback 为加载时所显示的插槽 import &#123; defineAsyncComponent &#125; from &#39;vue&#39; &#x2F;* 异步组件 *&#x2F; const async_compoent &#x3D; defineAsyncComponent(() &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;other&#x2F;Async_component.vue&#39;)) const async_compoent2 &#x3D; defineAsyncComponent(() &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;other&#x2F;Async_component2.vue&#39;)) &lt;!-- the bottom is template --&gt; &lt;div&gt;异步组件&lt;&#x2F;div&gt; &lt;Suspense&gt; &lt;template #default&gt; &lt;async_compoent&gt;&lt;&#x2F;async_compoent&gt; &lt;&#x2F;template&gt; &lt;template #fallback&gt; &lt;div&gt;loading...&lt;&#x2F;div&gt; &lt;&#x2F;template&gt; &lt;&#x2F;Suspense&gt; &lt;Suspense&gt; &lt;template #default&gt; &lt;async_compoent2&gt;&lt;&#x2F;async_compoent2&gt; &lt;&#x2F;template&gt; &lt;template #fallback&gt; &lt;div&gt;loading...&lt;&#x2F;div&gt; &lt;&#x2F;template&gt; &lt;&#x2F;Suspense&gt; 方式二 import loading_component And error_component! let async_component&#x3D;defineAsyncComponent(&#123; loader:()&#x3D;&gt;import(&#39;..&#x2F;component.vue&#39;),&#x2F;&#x2F;需要加载的组件 loadingComponent:loading_component,&#x2F;&#x2F;提前导入好的loading组件 errorComponent:error_component,&#x2F;&#x2F;提前导入好的error404组件 delay:200,&#x2F;&#x2F;延迟多久之后开始显示loading组件 timeout:3000,&#x2F;&#x2F;loading加载多久后组件还没加载完就显示error组件,error组件显示之后,组件若是加载完成了,还是会显示组件的 &#125;) &lt;!-- the bottom is template --&gt; &lt;async_component&gt;&lt;&#x2F;async_component&gt; 组件插槽 &lt;!-- in the son component! --&gt; &lt;template&gt; &lt;div&gt; &lt;!-- 匿名插槽 --&gt; &lt;slot&gt;&lt;&#x2F;slot&gt; &lt;!-- 具名插槽 --&gt; &lt;slot name&#x3D;&#39;name_slot&#39;&gt;&lt;&#x2F;slot&gt; &lt;!-- 具名作用域 --&gt; &lt;slot name&#x3D;&#39;var_slot&#39; :ref_data&#x3D;&#39;ref_data&#39;&gt;&lt;&#x2F;slot&gt; &lt;&#x2F;div&gt; &lt;&#x2F;template&gt; &lt;!-- in the parent component! --&gt; import slot_component from &#39;.&#x2F;component.vue&#39; &lt;template&gt; &lt;div&gt; &lt;slot_component&gt; &lt;div&gt;匿名&lt;&#x2F;div&gt; &lt;template #name_slot&gt; 具名 &lt;&#x2F;template&gt; &lt;template #var_slot&#x3D;&#39;data&#39;&gt; 作用域具名,数据:&#123;&#123;data&#125;&#125; &lt;&#x2F;template&gt; &lt;&#x2F;slot_component&gt; &lt;&#x2F;div&gt; &lt;&#x2F;template&gt; telepoer 传送组件 能够将组件内随意挂载到某个 class id or html 上! Tip:挂载的 dom 必须在 teleport 之前渲染,所以一般都是用它来实现弹窗效果直接挂载到 body 上面,因为按钮点击时 dom 都是渲染好的 文档中的按钮就是弹窗 &lt;Teleport to&#x3D;&quot;.teleport_calss&quot;&gt; &lt;div&gt;this is teleport component content!&lt;&#x2F;div&gt; &lt;&#x2F;Teleport&gt; keep-alive 组件缓存 组件渲染好第一次将不会再次渲染,提高了客户体验 首次会执行 mounted 跟 activeted,第二次不再执行 mounted setup 语法糖设置不了组件 name,所以排除动态组件缓存搭配 if &lt;keep-alive&gt; &lt;component v-if&#x3D;&#39;current_com!&#x3D;&#x3D;com_no2&#39; :is&#x3D;&#39;current_com&#39;&#x2F;&gt; &lt;&#x2F;keep-alive&gt; &lt;component v-if&#x3D;&#39;current_com&#x3D;&#x3D;&#x3D;com_no2&#39; :is&#x3D;&#39;current_com&#39;&gt; transtion 内置动画组件 作用:搭配并为 if show 添加动画对组件实现显示隐藏功能 https://vuejs.org/guide/built-ins/transition.html#the-transition-component普通使用 name &lt;transition name&#x3D;&quot;test&quot;&gt; &lt;div v-show&#x3D;&quot;bool&quot; class&#x3D;&quot;test_box&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;transition&gt; .test_box &#123; width: 200px; height: 200px; background-color: teal; margin: 60px auto; &#125; .test-enter-to, .test-leave-from &#123; width: 200px; height: 200px; &#125; .test-enter-active, .test-leave-active &#123; transition: all 1s ease; &#125; .test-enter-from, .test-leave-to &#123; width: 0; height: 0; &#125; 组件属性结合库来使用 https://animate.style/ &lt;transition enter-active-class&#x3D;&quot;animate__animated animate__backInDown&quot; leave-active-class&#x3D;&quot;animate__animated animate__backOutDown&quot; :duration&#x3D;&quot;&#123; enter: 1000, leave: 1000 &#125;&quot; name&#x3D;&quot;animate_css&quot; &gt; &lt;div v-show&#x3D;&quot;bool1&quot; class&#x3D;&quot;test_box&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;transition&gt; transtion生命周期结合 库 实现动画https://greensock.com/docs/v3/GSAP/Tween 在过度生命周期,多个 done 回调,done 执行才表示过渡结束 这个看起来相对丝滑 npm install gsap -s import gsap from &#39;gsap&#39; function before_enter(el: Element) &#123; gsap.set(el, &#123; width: 0, height: 0 &#125;) console.log(&#39;过渡之前&#39;) &#125; function enter(el: Element, done: gsap.Callback) &#123; console.log(&#39;进入过渡完成&#39;) gsap.to(el, &#123; width: 200, height: 200, onComplete: done &#125;) &#125; function leave(el: Element, done: gsap.Callback) &#123; console.log(&#39;离开过渡完成&#39;) gsap.to(el, &#123; width: 0, height: 0, onComplete: done &#125;) &#125; &lt;button @click&#x3D;&quot;bool2 &#x3D; !bool2&quot;&gt;the bottom is Hook and gsap&lt;&#x2F;button&gt; &lt;transition @before-enter&#x3D;&quot;before_enter&quot; @enter&#x3D;&quot;enter&quot; @leave&#x3D;&quot;leave&quot;&gt; &lt;div v-show&#x3D;&quot;bool2&quot; class&#x3D;&quot;test_box&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;transition&gt; appear 页面加载完成后执行的动画 &lt;button&gt;the bottom is Hook and gsap&lt;&#x2F;button&gt; &lt;transition :appear&#x3D;&quot;true&quot; appear-active-class&#x3D;&quot;animate__animated animate__backInLeft&quot;&gt; &lt;div class&#x3D;&quot;test_box&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;transition&gt; TransitionGroup 内置动画列表组件 主要用来实现对列表的动画展示,用法与 transition 一致 &lt;div class&#x3D;&quot;app_page&quot;&gt; &lt;button&gt;the bottom is transitionGroup component&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;add&quot;&gt;add&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;splice&quot;&gt;splice&lt;&#x2F;button&gt; &lt;div class&#x3D;&quot;list&quot;&gt; &lt;TransitionGroup enter-active-class&#x3D;&quot;animate__animated animate__bounceInLeft&quot; leave-active-class&#x3D;&quot;animate__animated animate__backOutRight&quot; &gt; &lt;div class&#x3D;&quot;item&quot; v-for&#x3D;&quot;item in transitionGroup_arr&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;div&gt; &lt;&#x2F;TransitionGroup&gt; &lt;&#x2F;div&gt; let transitionGroup_arr &#x3D; reactive([1, 2, 3, 4, 5, 6]) function add() &#123; let random_num &#x3D; Math.floor(Math.random() * (transitionGroup_arr.length - 0) + 0) let random_num2 &#x3D; Math.floor(Math.random() * (100 - 0) + 0) transitionGroup_arr.splice(random_num, 0, random_num2) &#125; function splice() &#123; let random_num &#x3D; Math.floor(Math.random() * (transitionGroup_arr.length - 0) + 0) transitionGroup_arr.splice(random_num, 1) &#125; TransitionGroup move-class let transitionGroup_arr1 &#x3D; reactive([1, 2, 3, 4, 5, 6]) function move() &#123; let random_num &#x3D; Math.floor(Math.random() * (transitionGroup_arr1.length - 0) + 0) let random_num1 &#x3D; Math.floor(Math.random() * (transitionGroup_arr1.length - 0) + 0) let value &#x3D; transitionGroup_arr1[random_num] transitionGroup_arr1[random_num] &#x3D; transitionGroup_arr1[random_num1] transitionGroup_arr1[random_num1] &#x3D; value &#125; &lt;button&gt;the bottom is transitionGroup moveClass&lt;&#x2F;button&gt; &lt;button @click&#x3D;&quot;move&quot;&gt;splice&lt;&#x2F;button&gt; &lt;TransitionGroup class&#x3D;&quot;move_class&quot; tag&#x3D;&quot;div&quot; move-class&#x3D;&quot;mmm&quot;&gt; &lt;div class&#x3D;&quot;item&quot; v-for&#x3D;&quot;item in transitionGroup_arr1&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;div&gt; &lt;&#x2F;TransitionGroup&gt; .move_class &#123; position: relative; &#125; .mmm &#123; transition: all 0.5s ease; &#125; gsap 实现数字动画 let num &#x3D; ref(8) let num1 &#x3D; ref(8) watch(() &#x3D;&gt; num.value, (newv, oldv) &#x3D;&gt; &#123; gsap.to(num1, &#123; duration: .5, value: newv &#125;) &#125;) &lt;input type&#x3D;&quot;number&quot; step&#x3D;&quot;20&quot; v-model&#x3D;&quot;num&quot; &#x2F;&gt; &lt;div&gt;&#123;&#123; num1.toFixed(0) &#125;&#125;&lt;&#x2F;div&gt; 自定义指令 指令的 Hook 与 v2 一致 import &#123; Directive &#125; from &#39;vue&#39; const vTest: Directive &#x3D; &#123; created() &#123; console.log(&#39;created...&#39;) &#125;, mounted(...arg) &#123; console.log(&#39;mounted...&#39;) console.log(arg) &#125; &#125; &lt;div v-test:aaa&#x3D;&quot;&#123; key_name: &#39;key_value&#39; &#125;&quot;&gt;自定义指令&lt;&#x2F;div&gt; 简写 import &#123; Directive, DirectiveBinding &#125; from &#39;vue&#39; const vTest: Directive &#x3D; (el: HTMLElement, arg: DirectiveBinding) &#x3D;&gt; &#123; console.log(el, arg) &#125; &lt;div v-test:aaa&#x3D;&quot;&#123; key_name: &#39;key_value&#39; &#125;&quot;&gt;自定义指令&lt;&#x2F;div&gt; 全局变量 vue3 移除了 filter 过滤器,这是用来代替过滤器的. main.ts 定义 定义完之后重启项目跟 vscode declare module &#39;@vue&#x2F;runtime-core&#39; &#123; export interface ComponentCustomProperties &#123; global_value: string &#125; &#125; app.config.globalProperties.global_value &#x3D; &#39;自定义全局变量&#39; 使用 &lt;div&gt;&#123;&#123; global_value &#125;&#125;&lt;&#x2F;div&gt; element ui 注意点 安装后在 tsconfig.ts 配置,否则没有提示 添加 &quot;types&quot;:[&#39;element-plus&#x2F;global&#39;]","tags":[{"name":"vue3","slug":"vue3","permalink":"http://example.com/tags/vue3/"}]},{"title":"pinia 学习笔记","date":"2022-04-07T16:00:00.000Z","path":"2022/04/08/其他/Pinia/","text":"installnpm i -S pinia useimport &#123; createPinia &#125; from &#39;pinia&#39; app.use(createPinia()) difineStoreimport &#123; defineStore &#125; from &#39;pinia&#39; export const test_store &#x3D; defineStore(&#39;test_store&#39;, &#123; state: () &#x3D;&gt; &#123; return &#123; name: &#39;Boring ghost!&#39;, &#125; &#125;, getters: &#123; new_name: (state) &#x3D;&gt; &#39;new &#39; + state.name, &#125;, actions: &#123; refresh() &#123; this.name &#x3D; &#39;refresh Boring ghost!&#39; &#125;, &#125;, &#125;) at component import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() &lt;div&gt;this is store state value:&#123;&#123; store.name &#125;&#125;&lt;&#x2F;div&gt; set state直接解构会失去响应式 const &#123;name&#125; &#x3D; test_store() &#x2F;&#x2F;At question! this is error! &lt;!-- bottom is no problem --&gt; import &#123;storeToRefs&#125; from &quot;pinia&quot; const &#123;name&#125; &#x3D; storeToRefs(test_store()) 方式一 import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() store.name&#x3D;&#39;new value&#39; 方式二批量修改 store.$patch(&#123; name:&#39;new value&#39;, key2:&quot;new value&quot; &#125;) 方式三(推荐) store.$patch((state)&#x3D;&gt;&#123; state.name&#x3D;&quot;new value&quot; &#125;) pinia Actions 支持同步跟异步 import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() store.fn() API $reset 将state回复成初始状态 import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() store.$reset() &#x2F;&#x2F;直接调用不需要传参 $subscribe state发生变化就会触发 store.$subscribe((args,state)&#x3D;&gt;&#123;&#125;,&#123; detached:true,&#x2F;&#x2F;true:组件销毁后任然监听 deep:true &#125;) $onAction 调用actions就会被触发 store.$onAction((args)&#x3D;&gt;&#123;&#125;,true)&#x2F;&#x2F;true:组件销毁后任然监听","tags":[{"name":"pinia","slug":"pinia","permalink":"http://example.com/tags/pinia/"}]},{"title":"vite 学习笔记","date":"2022-04-07T16:00:00.000Z","path":"2022/04/08/其他/Vite/","text":"安装npm init vite@latest 相比webpack vite 直接type&#x3D;’module’ 引入就预览,而 webpack 打一次包后再预览 vite HMR热更新,只刷新更新部分的内容,非所有内容 vite Rollip 插件打包 使用ts 选择 vue-ts 模板时自带 typescript, 只需要npm i 配置 resolve.alias path会报2307,根据提示install @types&#x2F;node 即可vite.config.ts import &#123; resolve &#125; from &#39;path&#39; export default defineConfig(&#123; resolve:&#123; alias:&#123; &#39;@&#39;:resolve(__dirname,&#39;src&#39;) &#125; &#125; &#125;) tsconfig.json add+ &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@&#x2F;*&quot;: [&quot;src&#x2F;*&quot;], &quot;@page&#x2F;*&quot;: [&quot;src&#x2F;page&#x2F;*&quot;], &quot;@img&#x2F;*&quot;: [&quot;src&#x2F;asstes&#x2F;img&#x2F;*&quot;] &#125; vite 中使用 process 变量 使用查看文档https://vitejs.cn/guide/env-and-mode.html#modes unplugin-auto-import 自动导入插件https://github.com/antfu/unplugin-auto-import 配置import AutoImport from &#39;unplugin-auto-import&#x2F;vite&#39; export default defineConfig(&#123; plugins: [AutoImport(&#123; imports: [&#39;vue&#39;], dts: &#39;src&#x2F;auto-import.d.ts&#39;, &#125;)] &#125;) 浏览器兼容npm i -D @vitejs/plugin-legacy plugins: [ vue(), legacyPlugin(&#123; targets: [&quot;defaults&quot;, &quot;not IE 11&quot;], additionalLegacyPolyfills: [&quot;regenerator-runtime&#x2F;runtime&quot;] &#x2F;&#x2F; 面向IE11时需要此插件 &#125;) ], 提升打包性能 静态文件夹管理 build: &#123; rollupOptions: &#123; output: &#123; chunkFileNames: &#39;js&#x2F;[name]-[hash].js&#39;, entryFileNames: &#39;js&#x2F;[name]-[hash].js&#39;, assetFileNames: &#39;[ext]&#x2F;[name]-[hash].[ext]&#39;, &#125; &#125; &#125; 压缩插件 压缩静态资源较大的文件,一些js，css，html，以及静态资源。gzip是用算法压缩文件，节省流量。等文件到达浏览器后，浏览器会解压文件，解压出的源文件与gzip之前的大小是没变化的。但是传输过程的流量消耗和带宽节省了。 npm i -D vite-plugin-compression import viteCompression from &#39;vite-plugin-compression&#39; viteCompression(&#123; verbose: true, disable: false, threshold: 10240, algorithm: &#39;gzip&#39;, ext: &#39;.gz&#39;, &#125;) 生产环境移除 console build:&#123; minify:&quot;terser&quot;, terserOptions: &#123; compress: &#123; drop_console: true, drop_debugger: true &#125; &#125; &#125; PWA 离线npm i -S vite-plugin-pwa import &#123; VitePWA &#125; from &#39;vite-plugin-pwa&#39; plugins:[ ... VitePWA(&#123; manifest: &#123;&#125;, workbox: &#123; skipWaiting: true, clientsClaim: true &#125; &#125;) ] css前缀npm i -D autoprefixer &quot;defaults&quot;, &#x2F;&#x2F; 默认 &quot;last 2 versions&quot;, &quot;last 2 versions&quot;, &#x2F;&#x2F; 兼容主流浏览器的最近两个版本 &quot;&gt; 1%&quot;, &quot;&gt; 1%&quot;, &#x2F;&#x2F; 兼容主流浏览器的最近两个版本 &quot;&gt; 1%&quot;, &quot;iOS 7&quot;, &#x2F;&#x2F; 使用的浏览器需要在市场上的份额大于 1 &quot;iOS 7&quot;, &quot;last 3 iOS versions&quot; &#x2F;&#x2F; 兼容 ios 的最新 3 个版本 postcss.config.js module.exports &#x3D; &#123; plugins: &#123; &#x2F;&#x2F;如果产生重突就将autoprefixer对象注释掉，因为脚手架内部也默认配置了一样的 autoprefixer: &#123; overrideBrowserslist: [ &quot;Android 4.1&quot;, &quot;iOS 7.1&quot;, &quot;Chrome &gt; 31&quot;, &quot;ff &gt; 31&quot;, &quot;ie &gt;&#x3D; 8&quot;, &quot;last 10 versions&quot; &#x2F;&#x2F; 所有主流浏览器最近10版本用 ], grid: true &#125;, &#125; 适屏npm i -S postcss-pxtorem &quot;postcss-pxtorem&quot;: &quot;^6.0.0&quot; flexible 同样改成24 postcss.config.js &quot;postcss-pxtorem&quot;: &#123; rootValue(&#123; file &#125;) &#123;&#x2F;&#x2F;根元素的值1920 24份为准是80 return file.indexOf(&quot;vant&quot;) !&#x3D;&#x3D; -1 ? 37.5 : 80 &#125;, propList: [&quot;*&quot;], mediaQuery: false, selectorBlackList: [&quot;fiexdPx&quot;],&#x2F;&#x2F;忽略转换,例如:.fiexdPx_app_page minPixelValue: 6, exclude: &#x2F;node_modules&#x2F;i &#125; module.exports &#x3D; &#123; plugins: &#123; &#x2F;&#x2F;如果产生重突就将autoprefixer对象注释掉，因为脚手架内部也默认配置了一样的 autoprefixer: &#123;&#125;, &quot;postcss-pxtorem&quot;: &#123; rootValue(&#123; file &#125;) &#123; return file.indexOf(&quot;vant&quot;) !&#x3D;&#x3D; -1 ? 37.5 : 192 &#125;, propList: [&quot;*&quot;], &#x2F;&#x2F;*表示转换所有 height表示值转换高 exclude: &#x2F;node_modules&#x2F;i, unitPrecision: 5, &#x2F;&#x2F;保留rem小数点多少位 mediaQuery: false, &#x2F;&#x2F;媒体查询( @media screen 之类的)中不生效 minPixelValue: 12, &#x2F;&#x2F;px小于12的不会被转换 selectorBlackList: [&#39;.radius&#39;], &#x2F;&#x2F;则是一个对css选择器进行过滤的数组，比如你设置为[&#39;fs&#39;]，那例如fs-xl类名，里面有关px的样式将不被转换，这里也支持正则写法。 &#125; &#125; &#125;","tags":[{"name":"vite","slug":"vite","permalink":"http://example.com/tags/vite/"}]},{"title":"vue3中i18n的使用","date":"2022-04-07T16:00:00.000Z","path":"2022/04/08/其他/vue-i18n/","text":"v3 usenpm i -S vue-i18n@next configconst i18n&#x3D;createI18n(&#123; locale:&quot;&quot;, fallbackLocale?: &#39;zh-CN&#39;,&#x2F;&#x2F;没有英文的时候默认中文语言 locale: &#39;zh-CN&#39;, &#x2F;&#x2F; 语言标识 globalInjection: true, &#x2F;&#x2F;使用全局$t()函数 message:message, &#x2F;&#x2F;信息 legacy:false, &#x2F;&#x2F;跟v3的comsitionapi 有关 &#125;) export default i18n app.use(i18n) the main.js use the template: &lt;button&gt;&#123;&#123; $t(&quot;title&quot;) &#125;&#125;&lt;&#x2F;button&gt; let i18n &#x3D; useI18n(); i18n.locale.value &#x3D; e.target.innerText; Functionconst getCurrentLanguge &#x3D; () &#x3D;&gt; &#123; const win_lang &#x3D; navigator.language&#x2F;&#x2F;浏览器使用的语言 const current_lang &#x3D; win_lang.indexOf(&#39;zh&#39;) !&#x3D;&#x3D; -1 ? &#39;zh&#39; : &#39;en&#39; localStorage.setItem(&#39;lang&#39;, current_lang) return current_lang &#125;","tags":[{"name":"i18n","slug":"i18n","permalink":"http://example.com/tags/i18n/"}]},{"title":"pinia 学习笔记","date":"2022-04-07T16:00:00.000Z","path":"2022/04/08/插件库/Pinia/","text":"installnpm i -S pinia useimport &#123; createPinia &#125; from &#39;pinia&#39; app.use(createPinia()) difineStoreimport &#123; defineStore &#125; from &#39;pinia&#39; export const test_store &#x3D; defineStore(&#39;test_store&#39;, &#123; state: () &#x3D;&gt; &#123; return &#123; name: &#39;Boring ghost!&#39;, &#125; &#125;, getters: &#123; new_name: (state) &#x3D;&gt; &#39;new &#39; + state.name, &#125;, actions: &#123; refresh() &#123; this.name &#x3D; &#39;refresh Boring ghost!&#39; &#125;, &#125;, &#125;) at component import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() &lt;div&gt;this is store state value:&#123;&#123; store.name &#125;&#125;&lt;&#x2F;div&gt; set state直接解构会失去响应式 const &#123;name&#125; &#x3D; test_store() &#x2F;&#x2F;At question! this is error! &lt;!-- bottom is no problem --&gt; import &#123;storeToRefs&#125; from &quot;pinia&quot; const &#123;name&#125; &#x3D; storeToRefs(test_store()) 方式一 import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() store.name&#x3D;&#39;new value&#39; 方式二批量修改 store.$patch(&#123; name:&#39;new value&#39;, key2:&quot;new value&quot; &#125;) 方式三(推荐) store.$patch((state)&#x3D;&gt;&#123; state.name&#x3D;&quot;new value&quot; &#125;) pinia Actions 支持同步跟异步 import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() store.fn() API $reset 将state回复成初始状态 import &#123; test_store &#125; from &#39;@&#x2F;store&#x2F;store_test&#39; const store &#x3D; test_store() store.$reset() &#x2F;&#x2F;直接调用不需要传参 $subscribe state发生变化就会触发 store.$subscribe((args,state)&#x3D;&gt;&#123;&#125;,&#123; detached:true,&#x2F;&#x2F;true:组件销毁后任然监听 deep:true &#125;) $onAction 调用actions就会被触发 store.$onAction((args)&#x3D;&gt;&#123;&#125;,true)&#x2F;&#x2F;true:组件销毁后任然监听","tags":[{"name":"pinia","slug":"pinia","permalink":"http://example.com/tags/pinia/"}]},{"title":"vite 学习笔记","date":"2022-04-07T16:00:00.000Z","path":"2022/04/08/插件库/Vite/","text":"安装npm init vite@latest 相比webpack vite 直接type&#x3D;’module’ 引入就预览,而 webpack 打一次包后再预览 vite HMR热更新,只刷新更新部分的内容,非所有内容 vite Rollip 插件打包 使用ts 选择 vue-ts 模板时自带 typescript, 只需要npm i 配置 resolve.alias path会报2307,根据提示install @types&#x2F;node 即可vite.config.ts import &#123; resolve &#125; from &#39;path&#39; export default defineConfig(&#123; resolve:&#123; alias:&#123; &#39;@&#39;:resolve(__dirname,&#39;src&#39;) &#125; &#125; &#125;) tsconfig.json add+ &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@&#x2F;*&quot;: [&quot;src&#x2F;*&quot;], &quot;@page&#x2F;*&quot;: [&quot;src&#x2F;page&#x2F;*&quot;], &quot;@img&#x2F;*&quot;: [&quot;src&#x2F;asstes&#x2F;img&#x2F;*&quot;] &#125; vite 中使用 process 变量 使用查看文档https://vitejs.cn/guide/env-and-mode.html#modes unplugin-auto-import 自动导入插件https://github.com/antfu/unplugin-auto-import 配置import AutoImport from &#39;unplugin-auto-import&#x2F;vite&#39; export default defineConfig(&#123; plugins: [AutoImport(&#123; imports: [&#39;vue&#39;], dts: &#39;src&#x2F;auto-import.d.ts&#39;, &#125;)] &#125;) 浏览器兼容npm i -D @vitejs/plugin-legacy plugins: [ vue(), legacyPlugin(&#123; targets: [&quot;defaults&quot;, &quot;not IE 11&quot;], additionalLegacyPolyfills: [&quot;regenerator-runtime&#x2F;runtime&quot;] &#x2F;&#x2F; 面向IE11时需要此插件 &#125;) ], 提升打包性能 静态文件夹管理 build: &#123; rollupOptions: &#123; output: &#123; chunkFileNames: &#39;js&#x2F;[name]-[hash].js&#39;, entryFileNames: &#39;js&#x2F;[name]-[hash].js&#39;, assetFileNames: &#39;[ext]&#x2F;[name]-[hash].[ext]&#39;, &#125; &#125; &#125; 压缩插件 压缩静态资源较大的文件,一些js，css，html，以及静态资源。gzip是用算法压缩文件，节省流量。等文件到达浏览器后，浏览器会解压文件，解压出的源文件与gzip之前的大小是没变化的。但是传输过程的流量消耗和带宽节省了。 npm i -D vite-plugin-compression import viteCompression from &#39;vite-plugin-compression&#39; viteCompression(&#123; verbose: true, disable: false, threshold: 10240, algorithm: &#39;gzip&#39;, ext: &#39;.gz&#39;, &#125;) 生产环境移除 console build:&#123; minify:&quot;terser&quot;, terserOptions: &#123; compress: &#123; drop_console: true, drop_debugger: true &#125; &#125; &#125; PWA 离线npm i -S vite-plugin-pwa import &#123; VitePWA &#125; from &#39;vite-plugin-pwa&#39; plugins:[ ... VitePWA(&#123; manifest: &#123;&#125;, workbox: &#123; skipWaiting: true, clientsClaim: true &#125; &#125;) ] css前缀npm i -D autoprefixer &quot;defaults&quot;, &#x2F;&#x2F; 默认 &quot;last 2 versions&quot;, &quot;last 2 versions&quot;, &#x2F;&#x2F; 兼容主流浏览器的最近两个版本 &quot;&gt; 1%&quot;, &quot;&gt; 1%&quot;, &#x2F;&#x2F; 兼容主流浏览器的最近两个版本 &quot;&gt; 1%&quot;, &quot;iOS 7&quot;, &#x2F;&#x2F; 使用的浏览器需要在市场上的份额大于 1 &quot;iOS 7&quot;, &quot;last 3 iOS versions&quot; &#x2F;&#x2F; 兼容 ios 的最新 3 个版本 postcss.config.js module.exports &#x3D; &#123; plugins: &#123; &#x2F;&#x2F;如果产生重突就将autoprefixer对象注释掉，因为脚手架内部也默认配置了一样的 autoprefixer: &#123; overrideBrowserslist: [ &quot;Android 4.1&quot;, &quot;iOS 7.1&quot;, &quot;Chrome &gt; 31&quot;, &quot;ff &gt; 31&quot;, &quot;ie &gt;&#x3D; 8&quot;, &quot;last 10 versions&quot; &#x2F;&#x2F; 所有主流浏览器最近10版本用 ], grid: true &#125;, &#125; 适屏npm i -S postcss-pxtorem &quot;postcss-pxtorem&quot;: &quot;^6.0.0&quot; flexible 同样改成24 postcss.config.js &quot;postcss-pxtorem&quot;: &#123; rootValue(&#123; file &#125;) &#123;&#x2F;&#x2F;根元素的值1920 24份为准是80 return file.indexOf(&quot;vant&quot;) !&#x3D;&#x3D; -1 ? 37.5 : 80 &#125;, propList: [&quot;*&quot;], mediaQuery: false, selectorBlackList: [&quot;fiexdPx&quot;],&#x2F;&#x2F;忽略转换,例如:.fiexdPx_app_page minPixelValue: 6, exclude: &#x2F;node_modules&#x2F;i &#125; module.exports &#x3D; &#123; plugins: &#123; &#x2F;&#x2F;如果产生重突就将autoprefixer对象注释掉，因为脚手架内部也默认配置了一样的 autoprefixer: &#123;&#125;, &quot;postcss-pxtorem&quot;: &#123; rootValue(&#123; file &#125;) &#123; return file.indexOf(&quot;vant&quot;) !&#x3D;&#x3D; -1 ? 37.5 : 192 &#125;, propList: [&quot;*&quot;], &#x2F;&#x2F;*表示转换所有 height表示值转换高 exclude: &#x2F;node_modules&#x2F;i, unitPrecision: 5, &#x2F;&#x2F;保留rem小数点多少位 mediaQuery: false, &#x2F;&#x2F;媒体查询( @media screen 之类的)中不生效 minPixelValue: 12, &#x2F;&#x2F;px小于12的不会被转换 selectorBlackList: [&#39;.radius&#39;], &#x2F;&#x2F;则是一个对css选择器进行过滤的数组，比如你设置为[&#39;fs&#39;]，那例如fs-xl类名，里面有关px的样式将不被转换，这里也支持正则写法。 &#125; &#125; &#125;","tags":[{"name":"vite","slug":"vite","permalink":"http://example.com/tags/vite/"}]},{"title":"vue3中i18n的使用","date":"2022-04-07T16:00:00.000Z","path":"2022/04/08/插件库/vue-i18n/","text":"v3 usenpm i -S vue-i18n@next configconst i18n&#x3D;createI18n(&#123; locale:&quot;&quot;, fallbackLocale?: &#39;zh-CN&#39;,&#x2F;&#x2F;没有英文的时候默认中文语言 locale: &#39;zh-CN&#39;, &#x2F;&#x2F; 语言标识 globalInjection: true, &#x2F;&#x2F;使用全局$t()函数 message:message, &#x2F;&#x2F;信息 legacy:false, &#x2F;&#x2F;跟v3的comsitionapi 有关 &#125;) export default i18n app.use(i18n) the main.js use the template: &lt;button&gt;&#123;&#123; $t(&quot;title&quot;) &#125;&#125;&lt;&#x2F;button&gt; let i18n &#x3D; useI18n(); i18n.locale.value &#x3D; e.target.innerText; Functionconst getCurrentLanguge &#x3D; () &#x3D;&gt; &#123; const win_lang &#x3D; navigator.language&#x2F;&#x2F;浏览器使用的语言 const current_lang &#x3D; win_lang.indexOf(&#39;zh&#39;) !&#x3D;&#x3D; -1 ? &#39;zh&#39; : &#39;en&#39; localStorage.setItem(&#39;lang&#39;, current_lang) return current_lang &#125;","tags":[{"name":"i18n","slug":"i18n","permalink":"http://example.com/tags/i18n/"}]},{"title":"webpack4+ts完整配置","date":"2022-04-06T16:00:00.000Z","path":"2022/04/07/其他/webpack4+ts完整配置/","text":"package.json &#123; &quot;name&quot;: &quot;books-ts&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;license&quot;: &quot;MIT&quot;, &quot;scripts&quot;: &#123; &quot;build&quot;: &quot;webpack --mode production&quot;, &quot;serve&quot;: &quot;npx webpack-dev-server&quot; &#125;, &quot;browserslist&quot;: &#123; &quot;development&quot;: [ &quot;last 1 chrome version&quot;, &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ], &quot;production&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not op_mini all&quot; ] &#125;, &quot;devDependencies&quot;: &#123; &quot;typescript&quot;: &quot;4.6.3&quot;, &quot;ts-loader&quot;: &quot;8.0.11&quot;, &quot;css-loader&quot;: &quot;3.4.2&quot;, &quot;file-loader&quot;: &quot;3.0.1&quot;, &quot;html-loader&quot;: &quot;0.5.5&quot;, &quot;html-webpack-plugin&quot;: &quot;3.2.0&quot;, &quot;clean-webpack-plugin&quot;: &quot;1.0.0&quot;, &quot;less&quot;: &quot;3.0.0&quot;, &quot;less-loader&quot;: &quot;5.0.0&quot;, &quot;sass&quot;: &quot;1.30.0&quot;, &quot;sass-loader&quot;: &quot;10.1.0&quot;, &quot;mini-css-extract-plugin&quot;: &quot;0.9.0&quot;, &quot;optimize-css-assets-webpack-plugin&quot;: &quot;5.0.3&quot;, &quot;postcss-loader&quot;: &quot;3.0.0&quot;, &quot;postcss-preset-env&quot;: &quot;6.7.0&quot;, &quot;style-loader&quot;: &quot;1.1.3&quot;, &quot;url-loader&quot;: &quot;3.0.0&quot;, &quot;webpack&quot;: &quot;4.41.6&quot;, &quot;webpack-cli&quot;: &quot;3.3.11&quot;, &quot;webpack-dev-server&quot;: &quot;3.10.3&quot; &#125; &#125; webpack.config.js const &#123; resolve &#125; &#x3D; require(&#39;path&#39;) const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;) const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;) const optimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;) const CleanWebpackPlugin &#x3D; require(&#39;clean-webpack-plugin&#39;) process.env.NODE_ENV &#x3D; &#39;production&#39; &#x2F;&#x2F;指定环境为生产环境,postcss兼容时会选择生产的配置 module.exports &#x3D; &#123; entry: &#39;.&#x2F;js&#x2F;index.js&#39;,&#x2F;&#x2F;入口文件 devServer: &#123;&#x2F;&#x2F;开发服务的配置,只打包到内存,不做实际打包,作用于开发时实时预览 contentBase: resolve(__dirname, &#39;dist&#39;),&#x2F;&#x2F;打包后的文件路径,跟出口文件路径一致 compress: true,&#x2F;&#x2F;是否开启gzip 压缩 port: &#39;888&#39;,&#x2F;&#x2F;启动后的端口 index: &#39;index.html&#39;,&#x2F;&#x2F;索引文件的文件名,默认就是index.html,配置一下应该启动会快一点.. publicPath: &#39;&#x2F;&#39;,&#x2F;&#x2F;静态资源访问路径 默认就是&#x2F; &#x3D;&gt; 比如: ip&#x2F;build.js (文档有说明) hot: true,&#x2F;&#x2F;开启HMR overlay: true,&#x2F;&#x2F;代码出错开启全屏错误提示 watchContentBase: true,&#x2F;&#x2F; 监视contentBase目录下所有文件 watchOptions: &#123; ignored: &#x2F;node_modules&#x2F; &#x2F;&#x2F;忽略文件 &#125;, clientLogLevel: &#39;none&#39;,&#x2F;&#x2F;不要显示启动服务的日志信息 &#x2F;&#x2F; quiet: true,&#x2F;&#x2F;除了初始启动信息之外的任何内容都不会被打印到控制台 TODO :小项目没必要关闭,还可以检查一下打包的信息 &#125;, output: &#123;&#x2F;&#x2F;打包出口配置 filename: &#39;js&#x2F;main.js&#39;,&#x2F;&#x2F;出口文件的文件名 path: resolve(__dirname, &#39;dist&#39;),&#x2F;&#x2F;所有打包后的文件放入dist文件夹下 chunkFilename: &#39;js&#x2F;[name]_chunk_[hash:6].js&#39;,&#x2F;&#x2F; TODO :如果不配置改命名,那么做了代码分割的那些包命名就会成为一个个数字 0.js &#125;, module: &#123; rules: [ &#123; oneOf: [&#x2F;&#x2F;loader已经编译过的,不会再进行编译,如果存在还需要编译的情况,可以把对象单独抽出去 &#123; test: &#x2F;\\.css$&#x2F;i, use: [ &#x2F;&#x2F; &#39;style-loader&#39;,&#x2F;&#x2F;将出口文件里的css插入到html中的style标签中 &#123; loader: MiniCssExtractPlugin.loader, options: &#123; publicPath: &#39;..&#x2F;&#39; &#x2F;&#x2F; TODO :因为css单独提取是配置了提取到css文件夹下,也就是多出了一层css,所以这里也要相应的回退一层 &#125; &#125;,&#x2F;&#x2F;将出口文件中的css内容编译成css文件,并引入html文件中 &#39;css-loader&#39;,&#x2F;&#x2F;将入口文件中引入的css文件编译成css内容放入到出口文件 &#123; loader: &#39;postcss-loader&#39;,&#x2F;&#x2F;css兼容处理 options: &#123; ident: &#39;postcss&#39;, plugins: () &#x3D;&gt; [ require(&#39;postcss-preset-env&#39;)(), &#x2F;&#x2F;自动读取package.json中的兼容配置 ] &#125; &#125; ] &#125;, &#123; test: &#x2F;\\.less$&#x2F;i,&#x2F;&#x2F; TODO :less不要跟css文件混搭使用 use: [ &#123; loader: MiniCssExtractPlugin.loader, options: &#123; publicPath: &#39;..&#x2F;&#39; &#125; &#125;, &#39;css-loader&#39;, &#39;less-loader&#39;,&#x2F;&#x2F;编译less文件 &#123; loader: &#39;postcss-loader&#39;, options: &#123; ident: &#39;postcss&#39;, plugins: () &#x3D;&gt; [ require(&#39;postcss-preset-env&#39;)(), ] &#125; &#125; ] &#125;, &#123; test: &#x2F;\\.scss$&#x2F;i, &#x2F;&#x2F; TODO :scss文件跟css文件不要混合使用 use: [ &#x2F;&#x2F; &#39;style-loader&#39;, &#123; loader: MiniCssExtractPlugin.loader, options: &#123; publicPath: &#39;..&#x2F;&#39; &#x2F;&#x2F; TODO :因为css单独提取是配置了提取到css文件夹下,也就是多出了一层css,所以这里也要相应的回退一层 &#125; &#125;, &#39;css-loader&#39;, &#39;sass-loader&#39;, &#123; loader: &#39;postcss-loader&#39;, options: &#123; ident: &#39;postcss&#39;, plugins: () &#x3D;&gt; [ require(&#39;postcss-preset-env&#39;)(), ] &#125; &#125; ] &#125;, &#123; test: &#x2F;\\.ts$&#x2F;i, loader: &#39;ts-loader&#39;, &#125;, &#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;i, loader: &#39;url-loader&#39;,&#x2F;&#x2F; 处理图片路径 TODO :无法处理html文件的图片,需要搭配html-loader options: &#123; limit: 0,&#x2F;&#x2F;小于0k编译成base64 优点:减少服务请求(服务压力) 缺点:文件变大,加载变慢 esModule: false,&#x2F;&#x2F; TODO :html-loader用的commonjs写法引入图片,需要将url-loader esmodule写法关闭,否则html无法解析 name: &#39;img&#x2F;[name].[hash:6].[ext]&#39;&#x2F;&#x2F;打包后的文件名 &#125; &#125;, &#123; test: &#x2F;\\.html$&#x2F;i,&#x2F;&#x2F;处理html文件的图片 loader: &#39;html-loader&#39; &#125;, &#123; exclude: &#x2F;\\.(html|png|jpg|gif|less|css|js|ts)$&#x2F;i,&#x2F;&#x2F;一定要将js排除,否则会冲突 loader: &#39;file-loader&#39;, options: &#123; name: &#39;asstes&#x2F;[name].[hash:6].[ext]&#39;&#x2F;&#x2F;打包后的文件名 &#125; &#125; ] &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123;&#x2F;&#x2F;以一个模板为基础复刻一个html文件为index.html,并且自动引入出口js文件 template: &#39;.&#x2F;index.html&#39;,&#x2F;&#x2F;模板路径 minify: &#123;&#x2F;&#x2F;模板的压缩配置 (文档有说明( collapseWhitespace: false,&#x2F;&#x2F;去除空白区 removeComments: true,&#x2F;&#x2F;去除注释 &#125; &#125;), new MiniCssExtractPlugin(&#123;&#x2F;&#x2F;将css抽离成单个css文件,并且自动引入到index.html中 filename: &#39;css&#x2F;[name].[hash:6].css&#39; &#125;), new optimizeCssAssetsWebpackPlugin(),&#x2F;&#x2F;压缩css文件 new CleanWebpackPlugin(&#39;.&#x2F;dist&#39;)&#x2F;&#x2F;每次打包清理掉前一次打包的文件 ], resolve: &#123; alias: &#123;&#x2F;&#x2F; 路径别名 &#39;@js3&#39;: resolve(__dirname, &#39;.&#x2F;src&#x2F;js3&#39;), &#125;, extensions: [&#39;.wasm&#39;, &#39;.mjs&#39;, &#39;.js&#39;, &#39;.json&#39;, &#39;.ts&#39;], modules: [resolve(__dirname, &#39;.&#x2F;node_modules&#39;), &#39;node_modules&#39;] &#x2F;&#x2F; TODO :提高解析速度,告诉webpack解析不带路径的模块式默认去哪里找 &#125; &#125;","tags":[{"name":"webpack4","slug":"webpack4","permalink":"http://example.com/tags/webpack4/"}]},{"title":"vscode 默认设置","date":"2022-04-01T16:00:00.000Z","path":"2022/04/02/Vscode/vscode 默认setting/","text":"&#123; &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| name |——————————————————————————————————*&#x2F; &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| name |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||END &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| 格式化:默认 |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||https:&#x2F;&#x2F;blog.csdn.net&#x2F;Gabriel_wei&#x2F;article&#x2F;details&#x2F;90440542 &#x2F;&#x2F;|| &quot;editor.formatOnType&quot;: true, &quot;editor.formatOnSave&quot;: true, &#x2F;&#x2F; 每次保存自动格式化 &quot;editor.tabSize&quot;: 2, &#x2F;&#x2F; 换行默认以tab缩进 2个字符 &#x2F;&#x2F; &quot;editor.wordWrap&quot;: &quot;on&quot;, &#x2F;&#x2F; 控制折行方式 - &quot;on&quot; (根据视区宽度折行) &quot;editor.codeActionsOnSave&quot;: &#123; &#x2F;&#x2F; 每次保存的时候将代码按eslint格式进行修复 &quot;source.fixAll.eslint&quot;: false &#125;, &quot;[vue]&quot;: &#123; &#x2F;&#x2F; vue文件默认格式化方式 vetur &quot;editor.defaultFormatter&quot;: &quot;octref.vetur&quot; &#x2F;&#x2F; &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[javascript]&quot;: &#123; &#x2F;&#x2F; javascript文件默认格式化方式:prettier &#x2F;&#x2F; &quot;editor.defaultFormatter&quot;: &quot;vscode.typescript-language-features&quot; &quot;editor.defaultFormatter&quot;: &quot;vscode.typescript-language-features&quot; &#125;, &quot;[json]&quot;: &#123; &#x2F;&#x2F; json文件默认格式化方式prettier &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[jsonc]&quot;: &#123; &#x2F;&#x2F; json文件默认格式化方式prettier &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[css]&quot;: &#123; &#x2F;&#x2F; css文件默认格式化方式prettier &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[typescript]&quot;: &#123; &#x2F;&#x2F; typescript文件默认格式化方式prettier &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| 格式化:默认 |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||END &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| 格式化:eslint |——————————————————————————————————*&#x2F; &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;&#x2F; 添加 vue 支持 &quot;eslint.validate&quot;: [&quot;javascript&quot;, &quot;javascriptreact&quot;, &quot;vue&quot;, &quot;html&quot;], &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| 格式化:eslint |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||END &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| 格式化:prettier |——————————————————————————————————*&#x2F; &#x2F;&#x2F;|| &#x2F;&#x2F;|| &quot;prettier.eslintIntegration&quot;: false, &#x2F;&#x2F; prettier进行格式化时是否安装eslint配置去执行，建议false &quot;prettier.singleQuote&quot;: true, &#x2F;&#x2F; 如果为true，将使用单引号而不是双引号 &quot;prettier.semi&quot;: true, &#x2F;&#x2F;末尾是否添加分号 &quot;prettier.tabWidth&quot;: 2, &#x2F;&#x2F; 设置格式化缩进4格 &quot;prettier.printWidth&quot;: 1000, &#x2F;&#x2F; 一行最多 1000 字符 &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| 格式化:prettier |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||END &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| 格式化:vetur |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||https:&#x2F;&#x2F;blog.csdn.net&#x2F;Gabriel_wei&#x2F;article&#x2F;details&#x2F;90440542 &#x2F;&#x2F;|| &quot;vetur.format.enable&quot;: true, &#x2F;&#x2F;是否开启vetur格式化器 &#x2F;&#x2F; vetur格式化时html指定用哪个格式化规则 &#x2F;&#x2F; - none: 默认 &#x2F;&#x2F; - prettyhtml: prettyhtml格式花化器 &#x2F;&#x2F; - js-beautify-html: js-beautify格式化 &#x2F;&#x2F; - prettier: prettier格式化 &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;, &#x2F;&#x2F;vue的html区域使用prettyhtml格式化规则 &quot;vetur.format.defaultFormatter.css&quot;: &quot;prettier&quot;, &#x2F;&#x2F;vue的style区域使用prettier规则 &quot;vetur.format.defaultFormatter.postcss&quot;: &quot;prettier&quot;, &#x2F;&#x2F;&lt;style lang&#x3D;&#39;postcss&#39;&gt;区域的默认格式化器 &quot;vetur.format.defaultFormatter.scss&quot;: &quot;prettier&quot;, &#x2F;&#x2F;&lt;style lang&#x3D;&#39;scss&#39;&gt;区域的默认格式化器 &quot;vetur.format.defaultFormatter.less&quot;: &quot;prettier&quot;, &#x2F;&#x2F;&lt;style lang&#x3D;&#39;less&#39;&gt;区域的默认格式化器 &#x2F;&#x2F; Default formatter for &lt;script&gt; region &#x2F;&#x2F; - none: 默认 &#x2F;&#x2F; - prettier: prettier &#x2F;&#x2F; - vscode-typescript: 从vscode TypeScript中获取格式化器 &quot;vetur.format.defaultFormatter.ts&quot;: &quot;prettier&quot;, &#x2F;&#x2F;ts &lt;script&gt;区域的默认格式化程序 &#x2F;&#x2F; Default formatter for &lt;script&gt; region &#x2F;&#x2F; - none: disable formatting &#x2F;&#x2F; - prettier: js formatter from prettier &#x2F;&#x2F; - prettier-eslint: prettier-eslint &#x2F;&#x2F; - vscode-typescript: js formatter from TypeScript &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;, &#x2F;&#x2F;js &lt;script&gt;区域的默认格式化程序 &quot;vetur.format.options.tabSize&quot;: 2, &#x2F;&#x2F;每个缩进级别的空格数 &quot;vetur.format.defaultFormatterOptions&quot;: &#123; &#x2F;&#x2F;相关配置 &quot;js-beautify-html&quot;: &#123; &#x2F;&#x2F; - auto: 仅在超出行长度时才对属性进行换行 &#x2F;&#x2F; - force: 对除第一个属性外的其他每个属性进行换行 &#x2F;&#x2F; - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐 &#x2F;&#x2F; - force-expand-multiline: 对每个属性进行换行 &#x2F;&#x2F; - aligned-multiple: 当超出折行长度时，将属性进行垂直对齐 &quot;wrap_attributes&quot;: &quot;aligned-multiple&quot;, &#x2F;&#x2F; &quot;wrap_attributes&quot;: &quot;auto&quot;, &quot;wrap_line_length&quot;: 80 &#x2F;&#x2F; 设置一行多少字符换行 &#125;, &quot;prettyhtml&quot;: &#123; &quot;printWidth&quot;: 1000, &#x2F;&#x2F; 一行最多 1000 字符 &quot;singleQuote&quot;: false, &#x2F;&#x2F;是否使用单引号 &quot;wrapAttributes&quot;: true, &#x2F;&#x2F;属性是否换行 &quot;sortAttributes&quot;: false &#x2F;&#x2F;?? &#125;, &quot;prettier&quot;: &#123; &#x2F;&#x2F;prettier文档规则 https:&#x2F;&#x2F;prettier.io&#x2F;docs&#x2F;en&#x2F;options.html &quot;printWidth&quot;: 80, &#x2F;&#x2F; 一行最多 80 字符 &quot;tabWidth&quot;: 2, &#x2F;&#x2F;指定每个缩进级别的空格数。 &quot;useTabs&quot;: false, &#x2F;&#x2F;是否使用制表符来缩进 &quot;singleQuote&quot;: true, &#x2F;&#x2F; 使用单引号 &quot;semi&quot;: false, &#x2F;&#x2F; 行尾需要有分号 &quot;trailingComma&quot;: &quot;none&quot;, &#x2F;&#x2F; 末尾不需要逗号 &quot;bracketSpacing&quot;: true, &#x2F;&#x2F; 大括号内的首尾需要空格 &quot;bracketLine&quot;: true, &#x2F;&#x2F;标签换行时&gt;符号要不要独占一行 &quot;jsxBracketSameLine&quot;: false, &#x2F;&#x2F; jsx 标签的反尖括号需要换行 &quot;arrowParens&quot;: &quot;avoid&quot;, &#x2F;&#x2F;箭头函数参数周围可以不用括号 &quot;endOfLine&quot;: &quot;auto&quot;, &#x2F;&#x2F;换行符的使用 &quot;quoteProps&quot;: &quot;as-needed&quot;, &#x2F;&#x2F; 对象的 key 仅在必要时用引号,会在js文件去除对象key的&quot;&quot;号,json文件就会加上 &quot;jsxSingleQuote&quot;: false, &#x2F;&#x2F; jsx 不使用单引号，而使用双引号 &quot;rangeStart&quot;: 0, &#x2F;&#x2F; 每个文件格式化的范围是文件的全部内容 &quot;requirePragma&quot;: false, &#x2F;&#x2F; 不需要写文件开头的 @prettier &quot;insertPragma&quot;: false, &#x2F;&#x2F; 不需要自动在文件开头插入 @prettier &quot;proseWrap&quot;: &quot;always&quot;, &#x2F;&#x2F; 根据打印宽度决定是否折行 printWidth &quot;htmlWhitespaceSensitivity&quot;: &quot;css&quot; &#x2F;&#x2F; 根据显示样式决定 html 要不要折行 &#125; &#125;, &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| 格式化:vetur |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| csscomb配置 |——————————————————————————————————*&#x2F; &#x2F;&#x2F;|| &#x2F;&#x2F;|| &quot;csscomb.formatOnSave&quot;: true, &#x2F;&#x2F;css排序，保存后格式化 &quot;csscomb.preset&quot;: &#123;&#125;, &#x2F;&#x2F;默认规则 没有就遵循项目的.csscomn.json文件 &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| csscomb配置 |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||END &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| SASS 编译器 |——————————————————————————————————*&#x2F; &#x2F;&#x2F;|| &#x2F;&#x2F;|| &quot;easysass.compileAfterSave&quot;: false, &#x2F;&#x2F;保存后是否生成css文件 &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| SASS 编译器 |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||END &#x2F;&#x2F;||START &#x2F;*||———————————————————————————————————————| 注释插件配置 |——————————————————————————————————*&#x2F; &#x2F;&#x2F;|| &#x2F;&#x2F;|| &quot;fileheader.customMade&quot;: &#123; &#x2F;&#x2F;头部文件注释的配置 &quot;Author&quot;: &quot;BORING GHOST&quot;, &quot;Date&quot;: &quot;Do not edit&quot;, &quot;LastEditTime&quot;: &quot;Do not edit&quot;, &quot;Description&quot;: &quot;&quot; &#125;, &quot;fileheader.cursorMode&quot;: &#123; &#x2F;&#x2F;函数注释的配置 &quot;EVENT&quot;: &quot;&quot;, &quot;PARAM&quot;: &quot;&quot; &#125;, &quot;fileheader.configObj&quot;: &#123; &#x2F;&#x2F;md和json文件不自动添加头部注释 &quot;prohibitAutoAdd&quot;: [&quot;json&quot;, &quot;md&quot;, &quot;js&quot;] &#125;, &#x2F;&#x2F;图标主题 &#x2F;&#x2F;缩进时代码块的线条显示，注释时一定要是true &#x2F;&#x2F; &quot;editor.renderIndentGuides&quot;: true, &quot;workbench.colorCustomizations&quot;: &#123; &quot;editorIndentGuide.background&quot;: &quot;#333333&quot;, &quot;editorIndentGuide.activeBackground&quot;: &quot;#a3a3a3&quot; &#125;, &quot;explorer.compactFolders&quot;: false, &#x2F;&#x2F; 新建文件夹是否以紧凑形式呈现文件夹 &quot;git.ignoreWindowsGit27Warning&quot;: true, &#x2F;&#x2F;侧边栏显示方向 &quot;gitee.gist&quot;: &quot;&quot;, &#x2F;&#x2F;代码片段同步插件配置 &quot;gitee.access_token&quot;: &quot;&quot;, &#x2F;&#x2F;代码片段同步插件配置 &quot;search.followSymlinks&quot;: false, &#x2F;&#x2F;加快启动速度：关闭在搜索中跟踪符号 &quot;git.enabled&quot;: false, &#x2F;&#x2F;加快启动速度 同步代码时需要开启 &quot;git.autorefresh&quot;: false, &#x2F;&#x2F;加快启动速度 &quot;git.decorations.enabled&quot;: false, &#x2F;&#x2F;颜色主题 &quot;editor.lineHighlightBackground&quot;: &quot;#f2ca93&quot;, &quot;bracketPairColorizer.depreciation-notice&quot;: false, &#x2F;&#x2F;是否通知扩展已弃用 &quot;explorer.confirmDelete&quot;: false, &quot;workbench.iconTheme&quot;: &quot;material-icon-theme&quot;, &quot;editor.fontSize&quot;: 17, &quot;workbench.colorTheme&quot;: &quot;Visual Studio Dark&quot;, &quot;[scss]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;vscode.css-language-features&quot; &#125;, &quot;workbench.sideBar.location&quot;: &quot;right&quot; &#x2F;&#x2F;|| &#x2F;&#x2F;|| &#x2F;*||———————————————————————————————————————| name |——————————————————————————————————*&#x2F; &#x2F;&#x2F;||END &#125;","tags":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]},{"title":"vscode常用设置","date":"2022-04-01T16:00:00.000Z","path":"2022/04/02/Vscode/vscode常用设置/","text":"vscode配色方案 找到文件C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\theme-defaults\\themes 中的dark_vs.json已写好的然后vscode主题color theme选择Dark (visual studio)参数 https://blog.csdn.net/sinat_39620217/article/details/115618730 单行注释删除//[\\s\\S]*?\\n 多行注释/\\*(.|\\r\\n|\\n)*?\\*/ 块注释多行/\\*(.|\\r\\n|\\n)*?\\*/ 所有注释\\/\\*[\\s\\S]*\\*\\/|\\/\\/.* html注释&lt;!--(.*?)--&gt; 新建文件快捷键 打开Keyboard Shortcuts搜索explorer.n即可","tags":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]},{"title":"我的hbuilder配置","date":"2022-04-01T16:00:00.000Z","path":"2022/04/02/Vscode/我的hbuilder配置/","text":"&#123; &quot;adb.path&quot; : &quot;D:\\\\insatll\\\\ziyuan\\\\anZhuo\\\\Microvirt\\\\MEmu&quot;, &quot;android.simulator.port&quot; : &quot;21503&quot;, &quot;auto-saver.autosave&quot; : false, &quot;builtin.web.server.port&quot; : &quot;29766&quot;, &quot;editor.codeassistKeyTab&quot; : true, &quot;editor.colorScheme&quot; : &quot;Atom One Dark&quot;, &quot;editor.contentAssistSelectionMode&quot; : &quot;数字模式&quot;, &quot;editor.tokenColorCustomizations&quot; : &#123; &quot;[Atom One Dark]&quot; : &#123;&#125;, &quot;[Default]&quot; : &#123;&#125;, &quot;[Monokai]&quot; : &#123;&#125; &#125;, &quot;eslint-js.autoFixOnSave&quot; : true, &quot;eslint-js.validateOnDocumentChanged&quot; : true, &quot;eslint-vue.autoFixOnSave&quot; : true, &quot;eslint-vue.validateOnDocumentChanged&quot; : true, &quot;explorer.iconTheme&quot; : &quot;hx-file-icons-colorful&quot;, &quot;view.remoteDebug.openOnRunDevice&quot; : true, &quot;weApp.devTools.path&quot; : &quot;D:\\\\insatll\\\\ziyuan\\\\weixinkaifgj\\\\微信web开发者工具\\\\微信开发者工具.exe&quot;, &quot;workbench.colorCustomizations&quot; : &#123; &quot;[Atom One Dark]&quot; : &#123; &quot;editor.caretLine&quot; : &quot;#191a21&quot;, &quot;list.activeSelectionBackground&quot; : &quot;#6272a4&quot;, &quot;list.hoverBackground&quot; : &quot;#313341&quot; &#125;, &quot;[Default]&quot; : &#123;&#125;, &quot;[Monokai]&quot; : &#123;&#125; &#125; &#125;","tags":[{"name":"hbuilder","slug":"hbuilder","permalink":"http://example.com/tags/hbuilder/"}]},{"title":"我的jsconfig.json","date":"2022-04-01T16:00:00.000Z","path":"2022/04/02/Vscode/我的jsconfig.json/","text":"&#123; &quot;compilerOptions&quot;: &#123; &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@&#x2F;*&quot;: [ &quot;src&#x2F;*&quot; ] &#125;, &quot;target&quot;: &quot;ES6&quot;, &quot;module&quot;: &quot;commonjs&quot;, &quot;allowSyntheticDefaultImports&quot;: true &#125;, &quot;include&quot;: [ &quot;src&#x2F;**&#x2F;*&quot; ], &quot;exclude&quot;: [ &quot;node_modules&quot; ] &#125;","tags":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]},{"title":"项目中eslint配置","date":"2022-04-01T16:00:00.000Z","path":"2022/04/02/Vscode/项目中eslint配置/","text":"Install Vscode Plugins eslint prettier csscomb Install Project Plugins npm i -g eslint npm i prettier -D Config File npx eslint –init Docs Eslint忽略整个文件 &#x2F;*eslint-disable*&#x2F; 忽略下一行 &#x2F;* eslint-disable-next-line *&#x2F; 忽略文件 .eslintignore me1.Vscode settings.json &#123; &quot;editor.formatOnType&quot;: true, &quot;editor.formatOnSave&quot;: true, &quot;eslint.codeAction.showDocumentation&quot;: &#123; &quot;enable&quot;: true &#125;, &quot;editor.codeActionsOnSave&quot;: &#123; &quot;source.fixAll.eslint&quot;: true &#125;, &quot;csscomb.formatOnSave&quot;: true, &quot;csscomb.preset&quot;: &#123;&#125;, &quot;eslint.validate&quot;: [&quot;javascript&quot;, &quot;javascriptreact&quot;, &quot;html&quot;, &quot;vue&quot;], &quot;[vue]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[javascript]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[json]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[jsonc]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[css]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[typescript]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; &#125;, &quot;[html]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;HookyQR.beautify&quot; &#125; &#125; .eslintrc.js module.exports &#x3D; &#123; env: &#123; browser: true, es2021: true, node: true &#125;, extends: [&quot;eslint:recommended&quot;, &quot;plugin:vue&#x2F;essential&quot;], parserOptions: &#123; ecmaVersion: 12, sourceType: &quot;module&quot; &#125;, plugins: [&quot;vue&quot;], rules: &#123; semi: [2, &quot;always&quot;], &quot;no-console&quot;: 0 &#125; &#125;; .prettierrc.js &#x2F;* DOCS https:&#x2F;&#x2F;prettier.io&#x2F;docs&#x2F;en&#x2F;options.html *&#x2F; module.exports &#x3D; &#123; printWidth: 120, &#x2F;&#x2F; 一行最多 120 字符 tabWidth: 4, &#x2F;&#x2F;指定每个缩进级别的空格数。 useTabs: false, &#x2F;&#x2F;是否使用制表符来缩进 singleQuote: false, &#x2F;&#x2F; 使用单引号 semi: true, &#x2F;&#x2F; 行尾需要有分号 trailingComma: &quot;none&quot;, &#x2F;&#x2F; 末尾不需要逗号 bracketSpacing: true, &#x2F;&#x2F; 大括号内的首尾需要空格 jsxBracketSameLine: false, &#x2F;&#x2F; jsx 标签的反尖括号需要换行 arrowParens: &quot;avoid&quot;, &#x2F;&#x2F;箭头函数参数周围可以不用括号 endOfLine: &quot;auto&quot;, &#x2F;&#x2F;换行符的使用 quoteProps: &quot;as-needed&quot;, &#x2F;&#x2F; 对象的 key 仅在必要时用引号 jsxSingleQuote: false, &#x2F;&#x2F; jsx 不使用单引号，而使用双引号 rangeStart: 0, &#x2F;&#x2F; 每个文件格式化的范围是文件的全部内容 requirePragma: false, &#x2F;&#x2F; 不需要写文件开头的 @prettier insertPragma: false, &#x2F;&#x2F; 不需要自动在文件开头插入 @prettier &#x2F;&#x2F; proseWrap: &#39;always&#39;, &#x2F;&#x2F; 根据打印宽度决定是否折行 printWidth htmlWhitespaceSensitivity: &quot;css&quot; &#x2F;&#x2F; 根据显示样式决定 html 要不要折行 &#125;; .csscomb.json &#123; &quot;exclude&quot;: [&quot;.git&#x2F;**&quot;, &quot;node_modules&#x2F;**&quot;, &quot;bower_components&#x2F;**&quot;], &quot;always-semicolon&quot;: true, &quot;block-indent&quot;: &quot; &quot;, &quot;color-case&quot;: &quot;lower&quot;, &quot;color-shorthand&quot;: true, &quot;element-case&quot;: &quot;lower&quot;, &quot;eof-newline&quot;: true, &quot;leading-zero&quot;: false, &quot;quotes&quot;: &quot;single&quot;, &quot;remove-empty-rulesets&quot;: true, &quot;space-after-colon&quot;: &quot; &quot;, &quot;lines-between-rulesets&quot;: 1, &quot;space-after-combinator&quot;: &quot; &quot;, &quot;space-after-opening-brace&quot;: &quot;\\n&quot;, &quot;space-after-selector-delimiter&quot;: &quot;\\n&quot;, &quot;space-before-closing-brace&quot;: &quot;\\n&quot;, &quot;space-before-colon&quot;: &quot;&quot;, &quot;space-before-combinator&quot;: &quot; &quot;, &quot;space-before-opening-brace&quot;: &quot; &quot;, &quot;space-before-selector-delimiter&quot;: &quot;&quot;, &quot;space-between-declarations&quot;: &quot;\\n&quot;, &quot;strip-spaces&quot;: true, &quot;unitless-zero&quot;: true, &quot;vendor-prefix-align&quot;: true, &quot;sort-order&quot;: [ [ &quot;font&quot;, &quot;font-family&quot;, &quot;font-size&quot;, &quot;font-weight&quot;, &quot;font-style&quot;, &quot;font-variant&quot;, &quot;font-size-adjust&quot;, &quot;font-stretch&quot;, &quot;font-effect&quot;, &quot;font-emphasize&quot;, &quot;font-emphasize-position&quot;, &quot;font-emphasize-style&quot;, &quot;font-smooth&quot;, &quot;line-height&quot;, &quot;position&quot;, &quot;z-index&quot;, &quot;top&quot;, &quot;right&quot;, &quot;bottom&quot;, &quot;left&quot;, &quot;display&quot;, &quot;visibility&quot;, &quot;float&quot;, &quot;clear&quot;, &quot;overflow&quot;, &quot;overflow-x&quot;, &quot;overflow-y&quot;, &quot;-ms-overflow-x&quot;, &quot;-ms-overflow-y&quot;, &quot;clip&quot;, &quot;zoom&quot;, &quot;-webkit-align-content&quot;, &quot;-ms-flex-line-pack&quot;, &quot;align-content&quot;, &quot;-webkit-box-align&quot;, &quot;-moz-box-align&quot;, &quot;-webkit-align-items&quot;, &quot;align-items&quot;, &quot;-ms-flex-align&quot;, &quot;-webkit-align-self&quot;, &quot;-ms-flex-item-align&quot;, &quot;-ms-grid-row-align&quot;, &quot;align-self&quot;, &quot;-webkit-box-flex&quot;, &quot;-webkit-flex&quot;, &quot;-moz-box-flex&quot;, &quot;-ms-flex&quot;, &quot;flex&quot;, &quot;-webkit-flex-flow&quot;, &quot;-ms-flex-flow&quot;, &quot;flex-flow&quot;, &quot;-webkit-flex-basis&quot;, &quot;-ms-flex-preferred-size&quot;, &quot;flex-basis&quot;, &quot;-webkit-box-orient&quot;, &quot;-webkit-box-direction&quot;, &quot;-webkit-flex-direction&quot;, &quot;-moz-box-orient&quot;, &quot;-moz-box-direction&quot;, &quot;-ms-flex-direction&quot;, &quot;flex-direction&quot;, &quot;-webkit-flex-grow&quot;, &quot;-ms-flex-positive&quot;, &quot;flex-grow&quot;, &quot;-webkit-flex-shrink&quot;, &quot;-ms-flex-negative&quot;, &quot;flex-shrink&quot;, &quot;-webkit-flex-wrap&quot;, &quot;-ms-flex-wrap&quot;, &quot;flex-wrap&quot;, &quot;-webkit-box-pack&quot;, &quot;-moz-box-pack&quot;, &quot;-ms-flex-pack&quot;, &quot;-webkit-justify-content&quot;, &quot;justify-content&quot;, &quot;-webkit-box-ordinal-group&quot;, &quot;-webkit-order&quot;, &quot;-moz-box-ordinal-group&quot;, &quot;-ms-flex-order&quot;, &quot;order&quot;, &quot;-webkit-box-sizing&quot;, &quot;-moz-box-sizing&quot;, &quot;box-sizing&quot;, &quot;width&quot;, &quot;min-width&quot;, &quot;max-width&quot;, &quot;height&quot;, &quot;min-height&quot;, &quot;max-height&quot;, &quot;margin&quot;, &quot;margin-top&quot;, &quot;margin-right&quot;, &quot;margin-bottom&quot;, &quot;margin-left&quot;, &quot;padding&quot;, &quot;padding-top&quot;, &quot;padding-right&quot;, &quot;padding-bottom&quot;, &quot;padding-left&quot;, &quot;table-layout&quot;, &quot;empty-cells&quot;, &quot;caption-side&quot;, &quot;border-spacing&quot;, &quot;border-collapse&quot;, &quot;list-style&quot;, &quot;list-style-position&quot;, &quot;list-style-type&quot;, &quot;list-style-image&quot;, &quot;content&quot;, &quot;quotes&quot;, &quot;counter-reset&quot;, &quot;counter-increment&quot;, &quot;resize&quot;, &quot;cursor&quot;, &quot;-webkit-user-select&quot;, &quot;-moz-user-select&quot;, &quot;-ms-user-select&quot;, &quot;user-select&quot;, &quot;nav-index&quot;, &quot;nav-up&quot;, &quot;nav-right&quot;, &quot;nav-down&quot;, &quot;nav-left&quot;, &quot;-webkit-transition&quot;, &quot;-moz-transition&quot;, &quot;-ms-transition&quot;, &quot;-o-transition&quot;, &quot;transition&quot;, &quot;-webkit-transition-delay&quot;, &quot;-moz-transition-delay&quot;, &quot;-ms-transition-delay&quot;, &quot;-o-transition-delay&quot;, &quot;transition-delay&quot;, &quot;-webkit-transition-timing-function&quot;, &quot;-moz-transition-timing-function&quot;, &quot;-ms-transition-timing-function&quot;, &quot;-o-transition-timing-function&quot;, &quot;transition-timing-function&quot;, &quot;-webkit-transition-duration&quot;, &quot;-moz-transition-duration&quot;, &quot;-ms-transition-duration&quot;, &quot;-o-transition-duration&quot;, &quot;transition-duration&quot;, &quot;-webkit-transition-property&quot;, &quot;-moz-transition-property&quot;, &quot;-ms-transition-property&quot;, &quot;-o-transition-property&quot;, &quot;transition-property&quot;, &quot;-webkit-transform&quot;, &quot;-moz-transform&quot;, &quot;-ms-transform&quot;, &quot;-o-transform&quot;, &quot;transform&quot;, &quot;-webkit-transform-origin&quot;, &quot;-moz-transform-origin&quot;, &quot;-ms-transform-origin&quot;, &quot;-o-transform-origin&quot;, &quot;transform-origin&quot;, &quot;-webkit-animation&quot;, &quot;-moz-animation&quot;, &quot;-ms-animation&quot;, &quot;-o-animation&quot;, &quot;animation&quot;, &quot;-webkit-animation-name&quot;, &quot;-moz-animation-name&quot;, &quot;-ms-animation-name&quot;, &quot;-o-animation-name&quot;, &quot;animation-name&quot;, &quot;-webkit-animation-duration&quot;, &quot;-moz-animation-duration&quot;, &quot;-ms-animation-duration&quot;, &quot;-o-animation-duration&quot;, &quot;animation-duration&quot;, &quot;-webkit-animation-play-state&quot;, &quot;-moz-animation-play-state&quot;, &quot;-ms-animation-play-state&quot;, &quot;-o-animation-play-state&quot;, &quot;animation-play-state&quot;, &quot;-webkit-animation-timing-function&quot;, &quot;-moz-animation-timing-function&quot;, &quot;-ms-animation-timing-function&quot;, &quot;-o-animation-timing-function&quot;, &quot;animation-timing-function&quot;, &quot;-webkit-animation-delay&quot;, &quot;-moz-animation-delay&quot;, &quot;-ms-animation-delay&quot;, &quot;-o-animation-delay&quot;, &quot;animation-delay&quot;, &quot;-webkit-animation-iteration-count&quot;, &quot;-moz-animation-iteration-count&quot;, &quot;-ms-animation-iteration-count&quot;, &quot;-o-animation-iteration-count&quot;, &quot;animation-iteration-count&quot;, &quot;-webkit-animation-direction&quot;, &quot;-moz-animation-direction&quot;, &quot;-ms-animation-direction&quot;, &quot;-o-animation-direction&quot;, &quot;animation-direction&quot;, &quot;text-align&quot;, &quot;-webkit-text-align-last&quot;, &quot;-moz-text-align-last&quot;, &quot;-ms-text-align-last&quot;, &quot;text-align-last&quot;, &quot;vertical-align&quot;, &quot;white-space&quot;, &quot;text-decoration&quot;, &quot;text-emphasis&quot;, &quot;text-emphasis-color&quot;, &quot;text-emphasis-style&quot;, &quot;text-emphasis-position&quot;, &quot;text-indent&quot;, &quot;-ms-text-justify&quot;, &quot;text-justify&quot;, &quot;letter-spacing&quot;, &quot;word-spacing&quot;, &quot;-ms-writing-mode&quot;, &quot;text-outline&quot;, &quot;text-transform&quot;, &quot;text-wrap&quot;, &quot;text-overflow&quot;, &quot;-ms-text-overflow&quot;, &quot;text-overflow-ellipsis&quot;, &quot;text-overflow-mode&quot;, &quot;-ms-word-wrap&quot;, &quot;word-wrap&quot;, &quot;word-break&quot;, &quot;-ms-word-break&quot;, &quot;-moz-tab-size&quot;, &quot;-o-tab-size&quot;, &quot;tab-size&quot;, &quot;-webkit-hyphens&quot;, &quot;-moz-hyphens&quot;, &quot;hyphens&quot;, &quot;pointer-events&quot;, &quot;opacity&quot;, &quot;filter:progid:DXImageTransform.Microsoft.Alpha(Opacity&quot;, &quot;-ms-filter:\\\\&#39;progid:DXImageTransform.Microsoft.Alpha&quot;, &quot;-ms-interpolation-mode&quot;, &quot;color&quot;, &quot;border&quot;, &quot;border-width&quot;, &quot;border-style&quot;, &quot;border-color&quot;, &quot;border-top&quot;, &quot;border-top-width&quot;, &quot;border-top-style&quot;, &quot;border-top-color&quot;, &quot;border-right&quot;, &quot;border-right-width&quot;, &quot;border-right-style&quot;, &quot;border-right-color&quot;, &quot;border-bottom&quot;, &quot;border-bottom-width&quot;, &quot;border-bottom-style&quot;, &quot;border-bottom-color&quot;, &quot;border-left&quot;, &quot;border-left-width&quot;, &quot;border-left-style&quot;, &quot;border-left-color&quot;, &quot;-webkit-border-radius&quot;, &quot;-moz-border-radius&quot;, &quot;border-radius&quot;, &quot;-webkit-border-top-left-radius&quot;, &quot;-moz-border-radius-topleft&quot;, &quot;border-top-left-radius&quot;, &quot;-webkit-border-top-right-radius&quot;, &quot;-moz-border-radius-topright&quot;, &quot;border-top-right-radius&quot;, &quot;-webkit-border-bottom-right-radius&quot;, &quot;-moz-border-radius-bottomright&quot;, &quot;border-bottom-right-radius&quot;, &quot;-webkit-border-bottom-left-radius&quot;, &quot;-moz-border-radius-bottomleft&quot;, &quot;border-bottom-left-radius&quot;, &quot;-webkit-border-image&quot;, &quot;-moz-border-image&quot;, &quot;-o-border-image&quot;, &quot;border-image&quot;, &quot;-webkit-border-image-source&quot;, &quot;-moz-border-image-source&quot;, &quot;-o-border-image-source&quot;, &quot;border-image-source&quot;, &quot;-webkit-border-image-slice&quot;, &quot;-moz-border-image-slice&quot;, &quot;-o-border-image-slice&quot;, &quot;border-image-slice&quot;, &quot;-webkit-border-image-width&quot;, &quot;-moz-border-image-width&quot;, &quot;-o-border-image-width&quot;, &quot;border-image-width&quot;, &quot;-webkit-border-image-outset&quot;, &quot;-moz-border-image-outset&quot;, &quot;-o-border-image-outset&quot;, &quot;border-image-outset&quot;, &quot;-webkit-border-image-repeat&quot;, &quot;-moz-border-image-repeat&quot;, &quot;-o-border-image-repeat&quot;, &quot;border-image-repeat&quot;, &quot;outline&quot;, &quot;outline-width&quot;, &quot;outline-style&quot;, &quot;outline-color&quot;, &quot;outline-offset&quot;, &quot;background&quot;, &quot;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader&quot;, &quot;background-color&quot;, &quot;background-image&quot;, &quot;background-repeat&quot;, &quot;background-attachment&quot;, &quot;background-position&quot;, &quot;background-position-x&quot;, &quot;-ms-background-position-x&quot;, &quot;background-position-y&quot;, &quot;-ms-background-position-y&quot;, &quot;-webkit-background-clip&quot;, &quot;-moz-background-clip&quot;, &quot;background-clip&quot;, &quot;background-origin&quot;, &quot;-webkit-background-size&quot;, &quot;-moz-background-size&quot;, &quot;-o-background-size&quot;, &quot;background-size&quot;, &quot;box-decoration-break&quot;, &quot;-webkit-box-shadow&quot;, &quot;-moz-box-shadow&quot;, &quot;box-shadow&quot;, &quot;filter:progid:DXImageTransform.Microsoft.gradient&quot;, &quot;-ms-filter:\\\\&#39;progid:DXImageTransform.Microsoft.gradient&quot;, &quot;text-shadow&quot; ] ] &#125;","tags":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"},{"name":"eslint","slug":"eslint","permalink":"http://example.com/tags/eslint/"}]},{"title":"webpack4学习笔记","date":"2022-04-01T16:00:00.000Z","path":"2022/04/02/其他/webpack4学习笔记/","text":"HMR :热模块替换,一个模块发生变化,只会重新打包这一个模块而不是所有模块提高构建速度js,html 文件没有这个功能 source-map :调试优化通过 devtool 配置 oneOf loader 优化代码分割 不让 js 打包在一个 js 文件中问题:会重复被下载 多入口(不推荐) entry: &#123; main: &#39;.&#x2F;src&#x2F;index.js&#39;, test: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39; &#125;, 配置 加 动态导入语法 (推荐) 让 node_module 的文件单独打包,并解决同一文件重复打包(前提是 node_module 下的文件) 缺点:所有用过的 node_module 包都会打包成一个文件 解决:配合下面的 dll 技术 optimization: &#123; splitChunks: &#123; chunks: &#39;all&#39; &#x2F;&#x2F; 解决重复打包 &#125; &#125;, 让其它文件单独打包 ccc 问自定义的 id 也会被打包出口解析成文件名 import(&#x2F;* webpackChunkName: &quot;ccc&quot; *&#x2F;&#39;.&#x2F;js3&#x2F;index.js&#39;).then(res &#x3D;&gt; &#123; &#125;).catch(() &#x3D;&gt; &#123; console.log(&#39;文件加载失败&#39;); &#125;) 懒加载 通过某种事件触发加载,不会跟随页面加载 tip:(不会重复加载)优点:提高速度 div.onclick&#x3D;()&#x3D;&gt;&#123; import(&#x2F;* webpackChunkName: &quot;ccc&quot; *&#x2F;&#39;.&#x2F;js3&#x2F;index.js&#39;).then(res &#x3D;&gt; &#123; fn() &#125;).catch(() &#x3D;&gt; &#123; console.log(&#39;文件加载失败&#39;); &#125;) &#125; 预加载 在懒加载中添加一个 webpackPrefetch:true (浏览器其它资源加载完再偷偷加载)(推荐)区别:预加载提前加载但是不运行 div.onclick&#x3D;()&#x3D;&gt;&#123; import(&#x2F;* webpackChunkName: &quot;ccc&quot;, webpackPrefetch:true *&#x2F;&#39;.&#x2F;js3&#x2F;index.js&#39;).then(res &#x3D;&gt; &#123; fn() &#125;).catch(() &#x3D;&gt; &#123; console.log(&#39;文件加载失败&#39;); &#125;) &#125; 忽略打包 当已经使用了 cdn 引入的包后,在打包的时候可以防止 webpack 再次进行打包 externals:&#123; &#x2F;&#x2F;拒绝打包jQuery 库名:npm包名 jquery:&#39;jQuery&#39; &#125; dll 技术 让某些库单独打包新建 webpack.dll.js主要作用:单独打包 entry 对应的包,并且生成 json 文件,内容是每个包对应的包名跟所在目录tip:将这个内容提供给 webpack.config,让其知道这几个包不需要再打包了,(dll.js)运行一次后不需要再运行tip:但是不打包最后就没法用这个包的方法,然后就需要使用到&#97;&#x64;&#100;&#x2d;&#x61;&#x73;&#x73;&#x65;&#116;&#45;&#104;&#x74;&#x6d;&#108;&#x2d;&#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#x6b;&#x2d;&#x70;&#x6c;&#x75;&#103;&#x69;&#110;&#64;&#51;&#46;&#49;&#46;&#x33;插件tip:这个插件就是将之前忽略的包再自动引入到 html 文件 const &#123;resolve&#125;&#x3D;require(&#39;path&#39;) const webpack&#x3D;require(&#39;webpack&#39;) module.exports&#x3D;&#123; entry:&#123; dll:[&#39;jqeury&#39;] &#x2F;&#x2F; 最终打包后生成的[name]:需要打包的库的库名 &#125;, output:&#123; filename:&#39;[name].js&#39;, &#x2F;&#x2F; [name]&#x3D;&#x3D;&#x3D;dll path:resolve(__dirname,&#39;dll&#39;) &#x2F;&#x2F;这些单独打包的库文件都放入dll文件夹下 library:&#39;[name]_[hash:6]&#39;,&#x2F;&#x2F;这是打包后库里面暴露出去的名字 &#125;, plugins:[ new webpack.DllPlugin(&#123;&#x2F;&#x2F; 生成一个映射关系文件告诉webpack这些内容不用打包 name:&#39;[name]_[hash:6]&#39;,&#x2F;&#x2F;映射库暴露的内容 path:resolve(__dirname,&#39;dll&#x2F;manifest.json&#39;) &#x2F;&#x2F;映射库暴露的内容保存到这个路径 &#125;) ] &#125; 运行一次 webpack –config webpack.dll.js然后再配置 webpack.config.js下载插件add-asset-html-webpack-plugin@3.1.3 plugins:[ new webpack.DllReferencePlugin(&#123;&#x2F;&#x2F;根据这个文件告诉webpack哪些库不参与打包,并且修改库暴露的名称 manifest:resolve(__dirname,&#39;dll&#x2F;manifest.json&#39;) &#125;), new AddAssetHtmlWebpackPlugin(&#123; filepath:resolve(__dirname,&#39;dll&#x2F;dll.js&#39;) &#125;) ] 使用tsyarn add -D typescriptyarn add -D ts-loader@8.0.11 rules:[ &#123; test: &#x2F;\\.ts$&#x2F;i, loader: &#39;ts-loader&#39;, &#125;, ]","tags":[{"name":"webpack4","slug":"webpack4","permalink":"http://example.com/tags/webpack4/"}]},{"title":"一些常用库的指定版本 版本对应问题","date":"2022-03-24T16:00:00.000Z","path":"2022/03/25/Npm/一些库的对应版本/","text":"vue2脚手架安装sass 如果在搭建脚手架时没有选择sass编译器就需要下载sass版本yarn add sass sass-loader@10.0.0 -D 其中sass版本为 “sass”: “^1.53.0” vue-routervue2 yarn add vue-router@3 vuexvue2 yarn add vuex@3.6.0 ant-design-vuevue2 yarn add ant-design-vue@1.7.8","tags":[{"name":"npm","slug":"npm","permalink":"http://example.com/tags/npm/"},{"name":"版本","slug":"版本","permalink":"http://example.com/tags/%E7%89%88%E6%9C%AC/"}]},{"title":"npm发布包","date":"2022-03-24T16:00:00.000Z","path":"2022/03/25/Npm/发布npm包/","text":"参照:https://blog.csdn.net/taoerchun/article/details/82531549 注册账号https://www.npmjs.com/ 准备文件 npm init依次按提示填入包名、版本、描述、github地址、关键字、license等 这步完成之后会生成一个package.json文件，上面输入的这些信息可以在该文件中修改 注意：如果你的包引用了第三方包，则需要在package.json文件种增加dependencies节点，写入依赖的包及版本 &quot;dependencies&quot;: &#123; &quot;colors&quot;: &quot;^1.3.2&quot;, &quot;on-finished&quot;: &quot;^2.3.0&quot; &#125; 登录 npm login npm publish –access public发布为公开包 修改版本 npm loginnpm version patch npm publish –access public","tags":[{"name":"npm","slug":"npm","permalink":"http://example.com/tags/npm/"}]},{"title":"Ts 学习笔记","date":"2022-03-24T16:00:00.000Z","path":"2022/03/25/Ts/ts学习笔记/","text":"官网https://www.tslang.cn/docs/release-notes/typescript-3.1.html 特性 1.ts由微软开发 2.ts是js的超集 es2017往后统称es7,ts包含所有版本的js语法浏览器能够识别ts编译后的js语法,但不识别ts语法js是动态类型 ts是静态类型(定义类型后不可赋值其它类型) 3.ts提供丰富的语法提示,比如一些变量的方法 4.ts提供丰富的错误提示,在编写阶段能够检查错误 安装&amp;编译 npm install typescript -gtsc helloworld.ts 数据类型ts包含所有js数据类型,ts对引用类型进一步区分,下面是类型关键字首字母小写 js 原始数据类型:boolean string number null array undefined es6:symbol 引用数据类型:object typeof:function ts 基础数据类型:js中的原始类型 +:any:任意数据类型 never没有类型 void无 联合类型:一个变量可能有多个类型,如:let num:number | string; 对象类型:interface接口关键字 数组类型:number[] string[] 泛型的写法:Array 用于构造函数 函数类型:定义参数的类型 function(argument:number),定义返回值 function():number{} 类型的说法 类型注解:就是给变量定义一个类型,简单能推断出类型的时候没必要注解类型推断:就是在未定义类型时,ts会根据所赋予的值推断出变量的类型 注解 数字类型注解,字符串注解,对象类型接口方式注解,联合类型注解,数组注解 注解就是在数据后面注解相关的类型 布尔注解 let flag: boolean &#x3D; false; 数字注解 let price: number &#x3D; 12; any注解 这个能不用则不用 未声明类型的变量 可以任意赋值,使用任意方法 Object:任意赋值,只能使用对应的方法let myIsAny:any&#x3D;6 myIsAny&#x3D;&quot;text&quot; &#x2F;&#x2F; no problem myIsAny&#x3D;[1] &#x2F;&#x2F;no problem 对象注解 let obj:&#123; num:string, toString:()&#x3D;&gt;void &#x2F;&#x2F;无返回值 &#125;&#x3D;&#123; num:&quot;12&quot;, toString:()&#x3D;&gt;&#123;&#125; &#125; interface接口关键字使用 为了方便多次使用,定义对象类型的形状定义后的变量默认不可多不可少,需要?:可有可无,[propName:string]:any;任意属性,任意类型使用接口定义对象形状 interface Obj&#123; num:string, toString:()&#x3D;&gt;void &#125; let obj:Obj&#x3D;&#123; num:&quot;12&quot;, toString:()&#x3D;&gt;&#123;&#125; &#125; console.log(obj) &#x2F;&#x2F;no problem 属性可多可少/任意属性 interface Person&#123; num:number, age?:number,&#x2F;&#x2F;这个属性可有可无 [propName:string]:any, &#x2F;&#x2F;可以添加其它的任意属性 &#125; let obj: Person &#x3D; &#123; num: 12, age: 12, others:&quot;12&quot;&#x2F;&#x2F;no problem &#125; 只读属性 interface Person&#123; readonly id:number &#125; let obj:Person&#123; id:12 &#125; obj.id&#x3D;1212 &#x2F;&#x2F;at question Because:只读不可更改的属性 null &amp; undefined null跟undefined是所有类型的子类型 但是如果给某类型赋值 null 跟 undefined 需要配置 strictNullChecks 为false 联合类型使用 注意:function test(a: number | string)&#123; return a.toString() &#x2F;&#x2F;no problem:共有方法 or return a.split() &#x2F;&#x2F;at question:number没有这个方法 &#125; 数组的注解 方式 类型[]&#x2F;&#x2F;numer[] 2.Array[类型] &#x2F;&#x2F;Array[number] 3.interface 方式;Array等效 定义一个接口联合类型的写法 let test_array: (number | string)[] &#x3D; [112, &#39;text&#39;] test_array.push(&#123;&#125;) &#x2F;&#x2F;at question Because:只能填入相关类型 test_array.push(&#39;text&#39;)&#x2F;&#x2F;no problem test_array.push(12)&#x2F;&#x2F;no problem 等效Array&lt;number&gt;的Test接口 let test_array: Array&lt;number&gt; &#x3D; [1, 32, 324] &#x2F;&#x2F;Array内置对象 interface Test &#123; [index: number]: number | string &#x2F;&#x2F;任意数字类型键,值为数字类型 &#125; &#x2F;&#x2F; let result_array: Test &#x3D; &#123; &#x2F;&#x2F; name:12 &#x2F;&#x2F;at question Because 键必须是string类型 &#x2F;&#x2F; &#125; &#x2F;&#x2F; let result_array:Test &#x3D;[1,23,32,&#123;&#125;] &#x2F;&#x2F;at question Because 值必须是 number 跟 string 类型 let result_array: Test &#x3D; [12, 23, 342] &#x2F;&#x2F;no problem 函数里面的arguments类数组 function fn() &#123; let a: IArguments &#x3D; arguments &#x2F;&#x2F;任意类型的 arguments, IArguments 内置对象 &#125; fn()&#x2F;&#x2F;no problem 函数注解 1.函数声明 函数声明:普通的给参数和返回值注解如果函数抛出错误,返回值需要赋值never类型这样注解参数多传少传不报错表达式注解并且函数内部抛出错误 let fn: (a: number, b: string) &#x3D;&gt; never &#x3D; (a, b) &#x3D;&gt; &#123; throw new Error() &#125; 参数可有可无 function fn(a: number, b &#x3D; &#39;text&#39;) &#123;&#125; &#x2F;&#x2F;same as b?:string fn(1,&quot;1&quot;,2) &#x2F;&#x2F; at question Because 参数不能更多 fn(1,&quot;1&quot;)&#x2F;&#x2F;no problem 可以有更多的参数 function fn(a: number, b?: number, ...others: any[]): void &#123; &#125; fn(1, 2, &quot;3&quot;, 23, &#123;&#125;, [])&#x2F;&#x2F; no problem 函数的重载 当参数是字符或数字类型,返回值就必须是相对应类型时 function fn(arg: string): string function fn(arg: number): number function fn(arg: string | number) &#123; if (typeof arg &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123; return arg &#x2F;&#x2F;no problem &#x2F;&#x2F; return Number(arg) &#x2F;&#x2F;at question Because 返回值必须字符类型 &#x2F;&#x2F; return &quot;string&quot; &#x2F;&#x2F;at question Because 不能直接返回固定值 &#125; if (typeof arg &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123; return Number(arg) &#125; &#125; console.log(fn(12)) 类的注解&#x2F;** * @Tip: 类的注解 * 类的属性如果声明,不初始化或者使用是会报错的,需要配置strictPropertyInitialization为false *&#x2F; ;(function () &#123; class Father &#123; &#x2F;* 属性 *&#x2F; name: string &#x2F;* 构造函数本身 *&#x2F; constructor(name: string) &#123; this.name &#x3D; name console.log(&#96;这是我的名字:$&#123;this.name&#125;&#96;) &#125; &#x2F;* 方法 *&#x2F; hobby(name: string) &#123; console.log(this.name) &#125; &#125; class Son extends Father &#123; constructor(father_name: string) &#123; &#x2F;* 在子类构造中可以通过super调用父类的构造,并且继承后super必须调用一次 *&#x2F; super(father_name) &#125; hobby(name: string): void &#123; super.hobby(&#39;&#39;) &#x2F;* 子类构造外部可以通过super调用父类的一些属性 *&#x2F; &#x2F;* Tip:super.name为undefined,父级原属性不能被调用,只能通过super调用父类方法,或者直接使用this调用 *&#x2F; console.log(&#96;my name is $&#123;name&#125;,and father is $&#123;super.name&#125;&#96;) &#125; &#125; let new_obj &#x3D; new Son(&#39;张三&#39;) new_obj.hobby(&#39;阿三&#39;) console.log(new_obj.name) &#x2F;&#x2F;no problem &#125;)() 一种简写&#x2F;* Tip:另一种简写 *&#x2F; class Father &#123; constructor(public name: string, public age: number &#x3D; 12) &#123; this.name &#x3D; name this.age &#x3D; age &#125; show_attribute() &#123; console.log(this.name) console.log(this.age) &#125; &#125; let new_father &#x3D; new Father(&#39;张三&#39;) &#x2F;* no problem *&#x2F; new_father.show_attribute() &#x2F;&#x2F;张三 12 新语法特性 as 断言 class(oop 面向对象三大特性):封装,继承,多态 封装:比如修饰符继承:比如类的 extends 继承父类多态:多种生态,相同的方法实现不同的功能,比如不同子类可以使用相同父类的方法 修饰符的使用 public 公共的:自身调用,子类可以调用,实例调用private 仅自身调用protected 自身调用,子类调用,实例不能调用readonly 只读不可写,必须写在其它修饰符后面,并且只能出现在属性中abstract 抽象类，声明之后必须使用get set:获取属性会调用get,修改赋值会执行set,get set最好同时出现类中使用接口 implements(实现), 接口继承接口，类实现接口 class Top &#123; public name: string private age: number constructor() &#123; this.name &#x3D; &#39;张三&#39; this.age &#x3D; 12 &#125; protected move() &#123; console.log(&#39;methods!&#39;) &#125; &#125; class Bottom extends Top &#123; constructor() &#123; super() &#125; bottom_move() &#123; &#x2F;* no problem *&#x2F; this.name &#x2F;* At Question Because: age 是private私有属性不能调用 *&#x2F; &#x2F;&#x2F; this.age &#x2F;* no problem *&#x2F; this.move() &#125; &#125; let new_obj &#x3D; new Bottom() &#x2F;* At Question Because: 父类方法 move 是受保护,只有子类跟自身可以调用 *&#x2F; &#x2F;&#x2F; new_obj.move() 断言 常用的断言，在给初始值时使用 let new_obj&#x3D;{} as 类型接口; 泛型 泛型2种用法:fn(arg:T):T{} 1.fn(1)&#x2F;&#x2F;传什么类型就是什么类型，推荐的写法2.fn(1)&#x2F;&#x2F;固定是number类型 泛型的约束 泛型约束:fn&lt;T extends 接口&gt;()T，这样T就会包含接口的类型 元祖 let price:[string,…number[]]fn(…arg[number,string]) 库 库的分类:全局库:暴露一个全局变量，除此就是模块化库模块化库:在某环境中运行的库 UMD模块:模块化+全局 声明文件 全局变量 index.d.ts 定义全局变量declare let numnamespase命名空间 配置 生成配置文件如果爆红,则是配置出错 tsc –init 路径都是基于config.json文件位置等同于.&#x2F;&#123; &lt;!-- 将编译后的js文件放入dist文件夹下 --&gt; &quot;outDir&quot;:&quot;.&#x2F;dist&quot;, &lt;!-- ts文件所在位置 --&gt; &quot;rootDir&quot;:&quot;.&#x2F;src&quot;, &lt;!-- 允许赋值为 null 跟 undefined,不建议关闭 --&gt; &quot;strictNullChecks&quot;:true, &lt;!-- 全局声明文件所在路径 --&gt; &quot;baseUrl&quot;: &quot;.&#x2F;&quot;, &lt;!-- 支持commonJs方式导入 --&gt; &quot;esmoduleinterop&quot;:ture &#125;","tags":[{"name":"ts","slug":"ts","permalink":"http://example.com/tags/ts/"}]},{"title":"Ts 常用bug解决方法","date":"2022-03-24T16:00:00.000Z","path":"2022/03/25/Ts/ts常用bug解决方法/","text":"引入图片报错declare module &#39;*.svg&#39; declare module &#39;*.png&#39; declare module &#39;*.jpg&#39; declare module &#39;*.jpeg&#39; declare module &#39;*.gif&#39; declare module &#39;*.bmp&#39; declare module &#39;*.tiff&#39;","tags":[{"name":"ts","slug":"ts","permalink":"http://example.com/tags/ts/"}]},{"title":"node如何搭建服务","date":"2022-03-17T16:00:00.000Z","path":"2022/03/18/Node/node搭建服务/","text":"fs操作文件fs.readFile(path[,options],callback(err,dataStr)) 读取指定文件的内容fs.writeFile(file,data[,options],callback(err)) 向指定文件写入内容 &#x2F;** * 读取text.txt 文件的内容 * 读取成功err 为null * 读取失败 err &#x3D;&gt; 错误对象 dataStr &#x3D;&gt; undefined *&#x2F; path路径模块path.join() 将多个路径拼接成一个字符串path.basename(path[,ext]) 获取路径中的文件名 httpweb 服务http.createServer()server.on(‘request’,(req,res)&#x3D;&gt;{}) 为服务器实例绑定 request 事件,监听客户端发送过来的请求server.listen(port,callback()) 启动服务器 express极简框架(创建 web 服务器) yarn add express@4.17.1 use const express&#x3D;require(&#39;express&#39;) &#x2F;&#x2F; 导包 const app&#x3D;express() &#x2F;&#x2F; 创建实例 app.listen(888,()&#x3D;&gt;&#123; &#x2F;&#x2F; 启动服务 console.log(&#39;server ok!&#39;) &#125;) app.post(url,callback(req,res)) &#x2F;&#x2F; 监听不同url的post请求 app.get(url,callback(req,res)) &#x2F;&#x2F;监听不同url的get请求 req.query 获取客户端发送的查询参数req.params 获取客户端发送的 params 参数 中间件 &#x2F;&#x2F; 全局中间件 const mw&#x3D;function(req,res,next)&#123;next()&#125; const err&#x3D;function(err,req,res,next)&#123;res.send(err.message)&#125; app.use(mw) app.use(err) &#x2F;&#x2F;错误级必须在最后 &#x2F;&#x2F; 第三方中间件yarn add body-parser@1.19.0 &#x2F;&#x2F;防止跨域 app.all(&#39;*&#39;, function (req, res, next) &#123; console.log(&#39;处理中...&#39;) res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); res.header(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;utf-8&quot;); res.header(&quot;Content-Type&quot;, &quot;application&#x2F;x-www-form-urlencoded;charset&#x3D;utf-8&quot;); res.header(&#39;Access-Control-Allow-Methods&#39;, &#39;PUT, POST, GET, DELETE, OPTIONS&#39;); res.header(&#39;Access-Control-Allow-Headers&#39;, &#39;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#39;); if (req.method.toLowerCase() &#x3D;&#x3D; &#39;options&#39;) &#123; res.send(200); &#x2F;&#x2F;让options尝试请求快速结束 &#125; else &#123; next(); &#125; &#125;); app.use(bodyParser.urlencoded(&#123; extended: false &#125;)) app.use(bodyParser.json()) app.use(testRouter) express.static()静态资源托管 app.use(express.static(&#39;public&#39;))&#x2F;&#x2F;开发public目录下的资源 &#x2F;&#x2F; 现public下有img文件夹 ***&#x2F;img&#x2F;*.png &#x2F;&#x2F;访问静态文件 app.use(&#39;&#x2F;img&#39;,express.static(&#39;.&#x2F;img&#39;)) &#x2F;&#x2F;前缀,只放问当前目录 ***&#x2F;img&#x2F;*.png &#x2F;&#x2F;访问静态文件 express.Router()路由实例 &#x2F;** * 路由模块 *&#x2F; const express &#x3D; require(&#39;express&#39;); const testRouter &#x3D; express.Router() testRouter.get(&#39;&#x2F;test&#39;, (req, res) &#x3D;&gt; &#123; console.log(&#39;有请求&#39;); res.send(JSON.stringify(&#123; name: &#39;还给你&#39; &#125;)) &#125;) module.exports &#x3D; testRouter","tags":[{"name":"node","slug":"node","permalink":"http://example.com/tags/node/"},{"name":"express","slug":"express","permalink":"http://example.com/tags/express/"}]},{"title":"node环境安装","date":"2022-03-17T16:00:00.000Z","path":"2022/03/18/Node/node环境安装/","text":"node-v8.9.3-x64 1.安装路径D:\\Program Files\\nodejs\\ 2.选Add to PATH 默认添加环境变量 3.cmd 查看环境变量 echo %PATH% &#x2F;&#x2F;其中的D:\\Program Files\\nodejs\\ 就是了 node -v 查看版本 v8.9.3 npm -v 5.5.1 4.C:\\Users\\Administrator\\AppData\\Roaming npm npm-cache 再看看另外2个目录，npm的本地仓库跑在系统盘c盘的用户目录了(没见到npm-cache是因为没有用过，一使用缓存目录就生成了)，我们准备把这2个目录移动回到D:\\nodejs 5.先在D:\\nodejs 添加node_cache node_global文件夹 ：-g全局 cache：缓存文件 6.然后运行以下2条命令 npm config set prefix &quot;D:\\Program Files\\nodejs\\node_global&quot; npm config set cache &quot;D:\\Program Files\\nodejs\\node_cache&quot; 7.npm list -global 检查目录改变了没 配置镜像站 npm config set registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org 9.npm config list 查看配置信息 配置文件c盘中会有3条 npm config list 10.检查镜像站 npm config get registry 11.能否获得vue的信息 npm info vue 12.增加环境变量NODE_PATH 系统变量 直接运行npm install等命令会报错 NODE_PATH D:\\Program Files\\nodejs\\node_global\\node_modules 需要重新打开CMD让上面的环境变量生效 13.更新npm npm install npm -g &#x2F;&#x2F;npm -v 会看到最新版 14.配置path系统环境变量 D:\\Program Files\\nodejs\\node_global D:\\Program Files\\nodejs\\ 15.查看有什么模块 npm list -global 此时报错大概是node.js版本太低，去官网下最新版安装覆盖原版 16.安装vue.js npm install vue -g 去global文件下看看node_mo&#x2F;vue下有没有dist 17.安装vue-router npm install vue-router -g 18.安装vue脚手架 npm install vue-cli -g 这是2版本 npm uninstall -g vue-cli npm install -g @vue&#x2F;cli 这是3版本 19.检查 vue -V 大写， 报错检查14步 这是低版本，创建项目是vue init webpack 项目名 npm run dev 启动，好配置 yarnnpm install yarn -g # 全局安装目录 yarn config set global-folder &quot;D:\\Program Files\\Yarn\\yarn_global&quot; # 缓存目录 yarn config set cache-folder &quot;D:\\Program Files\\Yarn\\yarn_cache&quot; # 查看当前源 yarn config get registry # 修改为淘宝镜像源 yarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org 如果你遇到了yarn命令无法执行的情况，可以试着删掉这个文件再重新配置 .yarnrc yarn list -global查看配置信息 # 改变yarn全局安装位置 yarn config set global-folder &quot;D:\\Program Files\\nodejs&quot; # 改变yarn全局缓存位置 yarn config set cache-folder &quot;D:\\Program Files\\nodejs&quot; 检查当前yarn 的 bin的 位置 yarn global bin 检查当前 yarn 的 全局安装位置 yarn global dir 配置变量 通过node找到cmd文件，通过cmd脚本执行对应的文件bin，bin执行.arnrc配置信息，将包下载到对应的文件夹。 在没有配置好快捷命令前 yarn global add 包 yarn global remove 包 yarn全局基本不使用 有npm npm管理全局包 yarn用来管理项目包 直接add remove 操作init过的目录,也就是package loader:936 node node_cache损坏需要重新装 npm缺陷：很多依赖不会指定版本号，默认会安装最新的版本 如果新的版本无法兼容你的项目，你的程序可能就会出BUG yarn : yarn为了解决这个问题推出了yarn.lock的机制，项目中的yarn.lock文件 启动项目安装依赖时把这个yarn.lock拷贝到相应的环境项目下再安装 快速删除node_module 秒删 npm install rimraf -g rimraf node_modules rimraf &quot;ruoy - 副本&quot; &#x2F;&#x2F;任何文件，文件名分离就用引号包裹","tags":[{"name":"node","slug":"node","permalink":"http://example.com/tags/node/"}]},{"title":"Git 笔记","date":"2022-03-16T16:00:00.000Z","path":"2022/03/17/其他/Git/","text":"01-理论点 .git文件 &#x3D;&#x3D;&#x3D; 版本库：存储版本号、提交时间等信息 git fetch &#x3D;&#x3D;&#x3D; 拉取版本库 git merge &#x3D;&#x3D;&#x3D; 同步到工作区 git pull &#x3D;&#x3D;&#x3D; git fetch+git merge git init –bare name1.git &#x3D;&#x3D;&#x3D; 创建一个name1.git的裸库(公共库) 文件状态>untracked 未跟踪： 最初状态，不参与版本控制 >unmodify 未修改 ： commit入库后状态 >modifled 已修改： 跟踪后文件被修改 >staged 暂存 ： add后的状态 commit 提交规范type 用于说明 commit 的类别，只允许使用下面7个标识。 feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：构建过程或辅助工具的变动 如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。 git commit -m &quot;feat:新增a.java&quot; 修改状态add 进入staged rm 将库中文件移除，然后文件就会从unmodify到untracked checkout 从库中取出文件覆盖当前文件，最后状态unmodify reset HEAD filename 取消暂存，最后状态modefled 总结 rm:撤销提交commit checkout -- &lt;file>:撤销修改 reset:撤销跟踪 02-裸库 git init –bare name1.git &#x3D;&#x3D;&#x3D; 存放记录，共享记录，不存放文件，不能进行工作区的操作：push checkout..。用”git init”初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。因此在多人开发时就使用裸库，一个人就不存在自己提交时远程仓库处于工作状态区别 https://blog.csdn.net/sinat_34349564/article/details/52487860 使用：https://blog.csdn.net/u013541707/article/details/107482045 config文件中 直接 git init 创建的仓库: [core] repositoryformatversion &#x3D; 0 filemode &#x3D; true bare &#x3D; false logallrefupdates &#x3D; true ignorecase &#x3D; true precomposeunicode &#x3D; true 加了 --bare 创建的裸仓库: [core] repositoryformatversion &#x3D; 0 filemode &#x3D; true bare &#x3D; true ignorecase &#x3D; true precomposeunicode &#x3D; true 区别 logallrefupdates = true git的一道防线 不能向工作中的分支上提交信息,如果在工作状态就把服务器上切换到另一个分支 裸库就是没有这道防线，比如码云上创建一个创库，可以直接push 02.1-标签相当于不能修改的分支,先提交再打标签 查看标签 git tag 创建标签版本号知识：a.b.c a大版本大改变b添加修改了功能c修改了一下bug git tag -a 版本(比如:v1.0.0) -m \"备注\" 删除标签 git tag -d tagname 提交标签 git push --tags 03-配置部分全局配置 用户&#x2F;.gitconfig文件 git config --global --list 系统配置 系统：etc&#x2F;.gitconfig文件 git config --system --list .gitignore*.txt 所有txt !a.txt 排除a.txt，也就是a要提交 b/*txt b文件夹下所有txt文件 .gitkeep占位文件 ssh公钥免密登录1.ssh-keygen -t rsa 生产公钥，生成后第三行会有.ssh文件存放地址 2.pub里内容粘贴到码云公钥下 https ssh区别 https:通过url克隆每次都需要输入一个账号密码 ssh:只能通过拥有者的公钥克隆 04-命令工作区对比git diff ： 对比工作区(未 git add)和暂存区(git add 之后) git diff --cached: 对比暂存区(git add 之后)和版本库(git commit 之后) git diff HEAD: 对比工作区(未 git add)和版本库(git commit 之后) 查看fetch过来的信息git log -p FETCH_HEAD 查看到提交过的信息能看到回退后的版本 git reflog 强制推送git push -f 退出输入模式q 创建文件夹mkdir FileName 创建文件touch FileName.txt 查看文本信息cat FileName.txt 回退版本git reset --hard fa770f 查看某一个版本的信息git show fa770f 查看提交日志信息看不了回退后的版本 git log git log --pretty = online 显示简略信息 提交指定origin主机为默认主机 并且提交 ，往后提交就可以直接push省略主机 git push -u origin master 05-merge rebase的区别 merge:从共同节点开始(包括)，将两者最新节点融合成一个新节点_适用在公共分支merge 其它子分支(因为会保留公共分支的祖先记录) rebase:a git rebase b,a:变基分支 b：基分支，变基分支相同节点(不包括)往后的每次提交形成新的commitid叠加到基节点后面(适用拉取最新公共代码时) 不在公共库用rebase是因为在对方pull后，存在有未pull到的提交(如果rebase这些提交就会消失，总之顺序会出问题) merge B+a+a.1+b.1+b&#x3D;Bcrebase B+a+a.1+b.1+b&#x3D;Baa.1c.1c https://juejin.cn/post/7026724793047220254 06-整套fetch拉取远程注意语法 git fetch origin &lt;brach> git log -p FETCH_HEAD 查看fetch信息 git merge origin/branch 最后合并 or git pull origin 远程：本地分支 or git fetch origin &lt;branch> &lt;branch>:远程分支 git log -p FETCH_HEAD 查看是否是自己要的内容 git checkout -b newBranch origin/&lt;远程分支> git log 查看是否成功 git checkout -b master git branch -d newBranch git log 查看是否成功 回退先拉取到远程的代码 然后 git reset --hard 版本号 git push -f -u origin:branch 强制提交","tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"rem自动生成","date":"2022-03-15T16:00:00.000Z","path":"2022/03/16/其他/flexible rem自动生成/","text":"&#x2F;* * @Author: 无聊的鬼_ * @Date: 2022-03-16 18:44:47 * @LastEditTime: 2022-03-16 19:02:30 * @Description: *&#x2F; ;(function flexible(window, document) &#123; var docEl &#x3D; document.documentElement var dpr &#x3D; window.devicePixelRatio || 1 &#x2F;&#x2F; adjust body font size function setBodyFontSize() &#123; if (document.body) &#123; document.body.style.fontSize &#x3D; 12 * dpr + &quot;px&quot; &#125; else &#123; document.addEventListener(&quot;DOMContentLoaded&quot;, setBodyFontSize) &#125; &#125; setBodyFontSize() &#x2F;&#x2F; set 1rem &#x3D; viewWidth &#x2F; 10 function setRemUnit() &#123; var rem &#x3D; docEl.clientWidth &#x2F; 24 if (docEl.clientWidth &lt; 1024) &#123; rem &#x3D; 1024 &#x2F; 24 &#125; docEl.style.fontSize &#x3D; rem + &quot;px&quot; &#125; setRemUnit() &#x2F;&#x2F; reset rem unit on page resize window.addEventListener(&quot;resize&quot;, setRemUnit) window.addEventListener(&quot;pageshow&quot;, function (e) &#123; if (e.persisted) &#123; setRemUnit() &#125; &#125;) &#x2F;&#x2F; detect 0.5px supports if (dpr &gt;&#x3D; 2) &#123; var fakeBody &#x3D; document.createElement(&quot;body&quot;) var testElement &#x3D; document.createElement(&quot;div&quot;) testElement.style.border &#x3D; &quot;.5px solid transparent&quot; fakeBody.appendChild(testElement) docEl.appendChild(fakeBody) if (testElement.offsetHeight &#x3D;&#x3D;&#x3D; 1) &#123; docEl.classList.add(&quot;hairlines&quot;) &#125; docEl.removeChild(fakeBody) &#125; &#125;)(window, document)","tags":[{"name":"flexible","slug":"flexible","permalink":"http://example.com/tags/flexible/"}]},{"title":"rem自动生成","date":"2022-03-15T16:00:00.000Z","path":"2022/03/16/插件库/flexible rem自动生成/","text":"&#x2F;* * @Author: 无聊的鬼_ * @Date: 2022-03-16 18:44:47 * @LastEditTime: 2022-03-16 19:02:30 * @Description: *&#x2F; ;(function flexible(window, document) &#123; var docEl &#x3D; document.documentElement var dpr &#x3D; window.devicePixelRatio || 1 &#x2F;&#x2F; adjust body font size function setBodyFontSize() &#123; if (document.body) &#123; document.body.style.fontSize &#x3D; 12 * dpr + &quot;px&quot; &#125; else &#123; document.addEventListener(&quot;DOMContentLoaded&quot;, setBodyFontSize) &#125; &#125; setBodyFontSize() &#x2F;&#x2F; set 1rem &#x3D; viewWidth &#x2F; 10 function setRemUnit() &#123; var rem &#x3D; docEl.clientWidth &#x2F; 24 if (docEl.clientWidth &lt; 1024) &#123; rem &#x3D; 1024 &#x2F; 24 &#125; docEl.style.fontSize &#x3D; rem + &quot;px&quot; &#125; setRemUnit() &#x2F;&#x2F; reset rem unit on page resize window.addEventListener(&quot;resize&quot;, setRemUnit) window.addEventListener(&quot;pageshow&quot;, function (e) &#123; if (e.persisted) &#123; setRemUnit() &#125; &#125;) &#x2F;&#x2F; detect 0.5px supports if (dpr &gt;&#x3D; 2) &#123; var fakeBody &#x3D; document.createElement(&quot;body&quot;) var testElement &#x3D; document.createElement(&quot;div&quot;) testElement.style.border &#x3D; &quot;.5px solid transparent&quot; fakeBody.appendChild(testElement) docEl.appendChild(fakeBody) if (testElement.offsetHeight &#x3D;&#x3D;&#x3D; 1) &#123; docEl.classList.add(&quot;hairlines&quot;) &#125; docEl.removeChild(fakeBody) &#125; &#125;)(window, document)","tags":[{"name":"flexible","slug":"flexible","permalink":"http://example.com/tags/flexible/"}]},{"title":"openlayer封装","date":"2022-03-10T16:00:00.000Z","path":"2022/03/11/Ditu/openlayer封装/","text":"v1.1.0优化已处理 只传ip跟中心点地图不显示问题 marKerDots不支持动图效果 marKerDots单词错误导致报错 添加 对marKerDots新添加了一个必传属性isGif:Boolean;用来实现动态图标效果 如果为false则不做任何动画操作,如果为true,则需要再传一个gifImg属性,这个属性跟img一样,图标动图实现方法就是在img 跟gifImg两张图来回切换图片大小最好保持一直 v1.2.0 优化已处理 传入参数但是没有点位数据导致报错等问题 画布右侧有空白区问题 添加 gifSuDu:Number属性，默认500对动态图标扇动速度的控制 propspopup:Object 属性对弹窗样式的控制 v-slot:popup&#x3D;’obj’ 具名作用域插槽可自己制作一些简单标签的弹窗 在传入标点数据marKerDots时参入了一个标识的值到dot里面,也就是经纬度值后面可以跟一个标识标识可在插槽当中的obj.popupInfo中获取 marKerDots[0].dots[0]&#x3D;[经度,纬度,标识] &#x2F;&#x2F;这种形式 使用 弹窗使用1.开启弹窗功能:isOpenMarkerMove&#x3D;&#39;true&#39; 2.使用具名作用域插槽&lt;mapTemplate :mapSourceIP&#x3D;&#39;mapSourceIP&#39; :centerDot&#x3D;&#39;centerDot&#39; :isOpenMarkerMove&#x3D;&#39;true&#39; :marKerDots&#x3D;&#39;marKerDots&#39; :zoom&#x3D;&quot;zoom&quot;&gt; &lt;template v-slot:popup&#x3D;&#39;obj&#39;&gt; &lt;div class&#x3D;&quot;popupClassName&quot;&gt; &#123;&#123;obj.popupInfo&#125;&#125; &lt;&#x2F;div&gt; &lt;&#x2F;template&gt; &lt;&#x2F;mapTemplate&gt; obj.popupInfo里面有需要的内容 3.传入弹窗的参数 &lt;mapTemplate :propspopup&#x3D;&#39;propspopup&#39;&gt; &lt;&#x2F;mapTemplate&gt; propspopup&#x3D;&#123; domName:&#39;popupClassName&#39;, styles:&#123; position: absolute, top: 0, width: &quot;200px&quot;, height: &quot;100px&quot;, color: &quot;white&quot;, border: &quot;1px solid #00b4d8&quot;, backgroundColor: &quot;#377299&quot; &#125; &#125; v1.2.1 优化已解决 id为0时浮窗不显示问题 浮动导致的图标移位问题 添加 对区域填充的颜色的自定义和线的宽度AreaGeoColor:String AreaGeoLinWith:Number 边界区域显示隐藏的控件添加开关isShowControlBianJian:Boolean 默认false v1.3.0 优化添加 添加对百度地图瓦片的加载,如果瓦片源是百度地图的,需要传一个isBaiduDots:Boolean属性,并设置为true 解决 (openlayer只支持3857跟4326坐标系转换):解决百度地图瓦片BD-09坐标在openlayer上偏移的问题Bug 依旧存在偏移,所以要做百度地图离线,还是使用百度地图的离线接口 最终参数 &#x2F;** * @Tip: 使用所传递相关的参数, 所有坐标以EPSG:4326为准 * centerDot:Array&lt;parseFloat&gt;地图中心点 * mapSourceIP:String 地图资源ip地址 * marKerDots:Array&lt;Object&lt;img:String,dots:Array&lt;经,纬,标识&gt;,isGif:Boolean,gifImg:String&gt;&gt;地图marker点位与相应的图片,isGif:是否想要动态效果,这个参数必须传,如果开启,就必须传gifImg属性 * zoom:Number 地图默认级别 * MaxMinZoom:Array&lt;Number&gt;地图最大最小缩放级别 默认28-0 * isShowArea:Boolean 是否添加边界 * AreaGeo:Array&lt;JSON&gt; 边界json数据 * isShowControlBianJian:Boolean 是否添加边界区域显示影藏的控件 * AreaGeoLinColor:String 设置边界时,边界线的颜色 * AreaGeoLinWith:Number 边界线的宽度 * AreaGeoColor:String 区域颜色 * tControl:Array&lt;Object&lt;dom:Dom,style:Style&lt;Object&gt;,isevent&lt;Boolean&gt;,eventType:String,event&lt;事件名&gt;&gt;&gt; 控件,需要创建好dom后再传值isevent:是否绑定事件,如果为true请先确定好有没有像正常传事件(@eventName)传入事件并且名称前面的event&lt;事件名&gt;参数一致 * isOpenMarkerMove:Boolean 是否启用图标的鼠标移入事件 * propspopup:Object&lt;domName:String&gt; 如果启用了图标的鼠标移入事件，就需要传递相关的参数,并且查看html部分的插槽信息 * propspopup下：domName:弹窗(插槽)标签类名,类名必须唯一 * propspopup下：styles:Object 弹窗的样式 * nowMapClass:String 这是图层的类名,如果自己设置样式可将类名传过来(需要在外部组件穿透样式,可参考默认的ol-layer样式名) * 图层样式类名参考 https:&#x2F;&#x2F;www.cnblogs.com&#x2F;shiyangxt&#x2F;archive&#x2F;2008&#x2F;11&#x2F;16&#x2F;1334633.html * gifSuDu:Number 动态图片的闪动速度,默认500 * isBaiduDots:Boolean 瓦片源是否为百度地图 *&#x2F;","tags":[{"name":"openlayer","slug":"openlayer","permalink":"http://example.com/tags/openlayer/"}]},{"title":"openlayer部分功能","date":"2022-03-10T16:00:00.000Z","path":"2022/03/11/Ditu/openlayer功能/","text":"geoJson地图数据下载下来的坐标数据好像就是EPSG:4326类型不需要转化http://datav.aliyun.com/portal/school/atlas/area_selector 图层层级层级问题 一定要建号图层并添加到地图后再用setZIndex()方法来修改层级 做一些遮罩效果 ol-ext插件 气泡弹窗类 ol.overlay 海量图标事件监听 ol.Feature.on大部分事件不能监听只能通过 map的on来监听再判断 通过forEachFeatureAtPixel函数过滤掉没有Feature对象的地方,必须要有返回值 不能在函数里面操作,返回boolean,在进行判断 然后再通过Feature的setId赋予单独的id,事件触发时获取id来判断是否要进行下一步操作,赋予id时一定不能相同,否则会被覆盖 操作中on的事件回调e里面有部分可用的数据,比如窗口位置跟坐标数据 瓦片样式瓦片的样式是不能改变的","tags":[{"name":"openlayer","slug":"openlayer","permalink":"http://example.com/tags/openlayer/"}]},{"title":"百度地图控件+弹窗+全屏+去除弹窗样式","date":"2022-03-10T16:00:00.000Z","path":"2022/03/11/Ditu/地图控件与弹窗+全屏/","text":"自定义控件 &#x2F;** * @event: 控件 * @params &#123;*&#125; * @Tip: *&#x2F; createFullCrennControl() &#123; function ZoomControl() &#123; this.defaultAnchor &#x3D; BMAP_ANCHOR_BOTTOM_RIGHT; this.defaultOffset &#x3D; new BMap.Size(10, 10); &#125; let that &#x3D; this ZoomControl.prototype &#x3D; new BMap.Control(); ZoomControl.prototype.initialize &#x3D; function (map) &#123; var div &#x3D; document.createElement(&#39;div&#39;); div.classList.add(&#39;GoMapCenterDot&#39;) div.innerText &#x3D; &#39;切到中心点&#39; div.onclick &#x3D; function (e) &#123; console.log(&#39;dianji&#39;) &#125; map.getContainer().appendChild(div); return div; &#125; var myZoomCtrl &#x3D; new ZoomControl(); this.map_.addControl(myZoomCtrl); &#125;, 依赖插件import { beFull, isFull, exitFull } from ‘be-full’; 添加全屏控件监听控件的点击事件 进入全屏后开启计时器判断,直到监听到地图已经全屏后调用地图的checkResize方法重新铺图 let isFullFlag &#x3D; isFull(document.getElementById(&#39;Bmap-container&#39;)) let timerFn &#x3D; (Flag) &#x3D;&gt; &#123; let timer &#x3D; setTimeout(() &#x3D;&gt; &#123; let isFullFlag &#x3D; isFull(document.getElementById(&#39;Bmap-container&#39;)) if (isFullFlag &#x3D;&#x3D;&#x3D; Flag) &#123; that.map_.checkResize() clearTimeout(timer) timer &#x3D; null &#125; else &#123; timerFn() that.map_.checkResize() &#125; &#125;, 500); &#125; if (isFullFlag) &#123; exitFull() timerFn(false) &#125; else &#123; beFull(document.getElementById(&#39;Bmap-container&#39;)) timerFn(true) &#125; &#x2F;** * @event: 创建一个全屏控件 * @params &#123;*&#125; * @Tip: *&#x2F; createFullCrennControl() &#123; function ZoomControl() &#123; this.defaultAnchor &#x3D; BMAP_ANCHOR_BOTTOM_RIGHT; this.defaultOffset &#x3D; new BMap.Size(10, 10); &#125; let that &#x3D; this ZoomControl.prototype &#x3D; new BMap.Control(); ZoomControl.prototype.initialize &#x3D; function (map) &#123; var div &#x3D; document.createElement(&#39;div&#39;); div.classList.add(&#39;FullCrennControlButton&#39;) div.innerText &#x3D; &#39;全屏&#x2F;退出&#39; div.onclick &#x3D; function (e) &#123; let isFullFlag &#x3D; isFull(document.getElementById(&#39;Bmap-container&#39;)) let timerFn &#x3D; (Flag) &#x3D;&gt; &#123; let timer &#x3D; setTimeout(() &#x3D;&gt; &#123; let isFullFlag &#x3D; isFull(document.getElementById(&#39;Bmap-container&#39;)) if (isFullFlag &#x3D;&#x3D;&#x3D; Flag) &#123; that.map_.checkResize() clearTimeout(timer) timer &#x3D; null &#125; else &#123; timerFn() that.map_.checkResize() &#125; &#125;, 500); &#125; if (isFullFlag) &#123; exitFull() timerFn(false) &#125; else &#123; beFull(document.getElementById(&#39;Bmap-container&#39;)) timerFn(true) &#125; &#125; map.getContainer().appendChild(div); return div; &#125; var myZoomCtrl &#x3D; new ZoomControl(); this.map_.addControl(myZoomCtrl); &#125;, 地图弹窗使用let MapWindowInfo &#x3D; new BMap.InfoWindow(&#39;&#39;, &#123; width: 200, &#x2F;&#x2F; 信息窗口宽度 height: 100, &#x2F;&#x2F; 信息窗口高度 title: &quot;故宫博物院&quot;, &#x2F;&#x2F; 信息窗口标题 message: &quot;这里是故宫&quot; &#125;)&#x2F;&#x2F;创建一个信息窗口 that.map_.openInfoWindow(MapWindowInfo, 这是经纬度); that.map_.closeInfoWindow(MapWindowInfo) &#x2F;*地图标题*&#x2F; ::v-deep .BMap_bubble_title &#123; color: white; font-size: 13px; font-weight: bold; text-align: left; padding-left: 5px; padding-top: 5px; border-bottom: 1px solid gray; background-color: #0066b3; &#125; &#x2F;* 消息内容 *&#x2F; ::v-deep .BMap_bubble_content &#123; &#125; &#x2F;* 内容 *&#x2F; ::v-deep .BMap_pop div:nth-child(9) &#123; top: 35px !important; border-radius: 7px; background-color: red; &#125; &#x2F;* 左上角删除按键 与底部箭头图片 *&#x2F; ::v-deep .BMap_pop img &#123; display: none; &#125; &#x2F;* 上边框 *&#x2F; ::v-deep .BMap_top &#123; display: none; &#125; &#x2F;* 下边框 *&#x2F; ::v-deep .BMap_bottom &#123; display: none; &#125; &#x2F;* 中心内容底框 *&#x2F; ::v-deep .BMap_center &#123; display: none; &#125; &#x2F;* 左上角 *&#x2F; ::v-deep .BMap_pop div:nth-child(1) div &#123; display: none; &#125; &#x2F;* 左下角 *&#x2F; ::v-deep .BMap_pop div:nth-child(5) div &#123; display: none; &#125; &#x2F;* 右上角 *&#x2F; ::v-deep .BMap_pop div:nth-child(3) &#123; display: none; &#125; &#x2F;* 右下角 *&#x2F; ::v-deep .BMap_pop div:nth-child(7) &#123; display: none; &#125; 标签百度地图的弹窗并不好用,便可以通过标签来代替,内容时支持html的 创建&#x2F;&#x2F;设置好 偏移 不允许使用clearOverlays方法清除 let LabelInfo &#x3D; new BMap.Label(&#39;&#39;, &#123; offset: new BMap.Size(0, -30), enableMassClear: false &#125;) &#x2F;&#x2F;设置好层级 LabelInfo.setZIndex(99) let styles &#x3D; &#123; color: &#39;white&#39;, fontSize: &#39;13px&#39;, backgroundColor: &quot;rgba(0, 180, 216,.6)&quot;, border: &#39;2px solid #00b4d8&#39;, opacity: 0 &#125; &#x2F;&#x2F;设置好样式,默认透明度为0 LabelInfo.setStyle(styles) &#x2F;&#x2F;添加到地图 this.map_.addOverlay(LabelInfo); 使用&#x2F;&#x2F;在标注的事件中使用,修改好内容修改位置,修改透明度显示 tyles.opacity &#x3D; 1 LabelInfo.setStyle(styles) LabelInfo.setContent(ev.target.data.name) LabelInfo.setPosition(ev.target.data.position) &#x2F;&#x2F;隐藏,修改透明度使其隐藏,内容改为空,是为了不占位 styles.opacity &#x3D; 0 LabelInfo.setContent(&#39;&#39;) LabelInfo.setStyle(styles)","tags":[{"name":"BMap","slug":"BMap","permalink":"http://example.com/tags/BMap/"}]},{"title":"js 文件下载上传","date":"2022-03-10T16:00:00.000Z","path":"2022/03/11/原生/Js文件下载上传/","text":"export function getModuleDown() &#123; return request(&#123; url: &quot;&#x2F;downloadTemp&quot;, method: &quot;get&quot;, responseType: &quot;blob&quot;&#x2F;&#x2F;重点 &#125;); &#125; getModuleDown().then(res &#x3D;&gt; &#123; &#x2F;&#x2F; console.log(res); &#x2F;&#x2F;下载文件操作 const link &#x3D; document.createElement(&quot;a&quot;); let blob &#x3D; new Blob([res], &#123; type: &quot;application&#x2F;vnd.ms-excel&quot; &#125;); &#x2F;&#x2F;生成blob对象 console.log(blob); link.style.display &#x3D; &quot;none&quot;; link.href &#x3D; URL.createObjectURL(blob); link.setAttribute(&quot;download&quot;, &quot;模板&quot; + &quot;.xls&quot;); &#x2F;&#x2F;下载的文件名以及文件格式 document.body.appendChild(link); link.click(); document.body.removeChild(link); &#125;); &#x2F;** * 下载blob格式的文件 * @param &#123;Blob&#125; blob blob数据 * @param &#123;String&#125; fileName 下载的文件名，不写后缀名则默认为原文件类型 *&#x2F; function downloadBlobFile(blob, fileName) &#123; try &#123; const objUrl &#x3D; window.URL.createObjectURL(blob); const link &#x3D; window.document.createElement(&quot;a&quot;); link.download &#x3D; fileName; link.href &#x3D; objUrl; link.click(); URL.revokeObjectURL(objUrl); &#125; catch (error) &#123; console.error(error); &#125; &#125; &#x2F;** * 通过文件url地址下载 * @param &#123;String&#125; fileUrl url文件地址 * @param &#123;String&#125; fileName 下载的文件名，不写后缀名则默认为原文件类型 *&#x2F; function downloadFileUrl(fileUrl, fileName) &#123; try &#123; const link &#x3D; window.document.createElement(&quot;a&quot;); link.download &#x3D; fileName; link.href &#x3D; fileUrl; &#x2F;&#x2F; 生成节点点击 window.document.body.appendChild(link); link.click(); &#x2F;&#x2F; 点击后移除节点 window.document.body.removeChild(link); &#125; catch (error) &#123; console.error(error); &#125; &#125;","tags":[{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"}]},{"title":"js 滚动条相关","date":"2022-03-10T16:00:00.000Z","path":"2022/03/11/原生/Js滚动条相关/","text":"https://blog.csdn.net/Jack_zengzhen/article/details/79013841 offset带边框 clint不带边框,边框以内时间内容 document.body.scrollTop谷歌:滚动条距离顶部的距离 document.documentElement.scrollTopIE:滚动条距离顶部的距离 window.screen.height电脑屏的高度 document.body.scrollHeight谷歌&amp;IE: 浏览器所有内容的高度 document.documentElement.clientHeight谷歌&amp;IE: 可视区的高度 监听触底必须将方法绑在this上否则无法移除 mounted() &#123; window.addEventListener(&#39;scroll&#39;, this.listenerScroll) &#125;, beforeDestroy() &#123; window.removeEventListener(&#39;scroll&#39;, this.listenerScroll) &#125;, methods:&#123; &#x2F;** * @event: 监听滚轮触底 * @params &#123;*&#125; * @Tip: https:&#x2F;&#x2F;blog.csdn.net&#x2F;Jack_zengzhen&#x2F;article&#x2F;details&#x2F;79013841 * scrollTop 距离顶部的距离,做兼容处理 * bodyHeight 浏览器所有内容的高度 * clientHeight 可视区高 * 每次截取新的长度给需要渲染的数据,知道需要渲染的数据不小与所有数据 *&#x2F; listenerScroll() &#123; let scrollTop &#x3D; window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop let bodyHeight &#x3D; document.body.scrollHeight let clientHeight &#x3D; document.documentElement.clientHeight if (clientHeight + scrollTop + 50 &gt;&#x3D; bodyHeight) &#123;&#x2F;&#x2F;加50防止滚动条一直呆在底部 let loadList &#x3D; this.stationList if (loadList.length &lt; nowDataList.length) &#123; this.loading&#x3D;true let endNum &#x3D; loadList.length + numList loadList &#x3D; [...loadList, ...nowDataList.slice(loadList.length, endNum)] this.stationList &#x3D; loadList this.$nextTick(()&#x3D;&gt;&#123;this.loading&#x3D;false&#125;) &#125; &#125; &#125;, &#125;","tags":[{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"}]},{"title":"js 时间相关功能","date":"2022-03-06T16:00:00.000Z","path":"2022/03/07/原生/Js时间相关功能/","text":"new Date()对象var date &#x3D; new Date(); date.getYear(); &#x2F;&#x2F;获取年份(2位) date.getFullYear(); &#x2F;&#x2F;获取完整的年份(4位,1970-) date.getMonth(); &#x2F;&#x2F;获取月份(0-11,0代表1月，所以在显示当前时间的时候需要date.getMonth() + 1） date.getDate(); &#x2F;&#x2F;获取日(1-31) date.getDay(); &#x2F;&#x2F;获取星期?(0-6,0代表星期天) date.getTime(); &#x2F;&#x2F;获取时间(从1970.1.1开始的毫秒数) date.getHours(); &#x2F;&#x2F;获取小时数(0-23) date.getMinutes(); &#x2F;&#x2F;获取分钟数(0-59) date.getSeconds(); &#x2F;&#x2F;获取秒数(0-59) date.getMilliseconds(); &#x2F;&#x2F;获取毫秒数(0-999) date.toLocaleString(); &#x2F;&#x2F;获取日期与时间 2020&#x2F;8&#x2F;9 上午11:20:28 date.toLocaleDateString(); &#x2F;&#x2F;2020&#x2F;8&#x2F;9 date.toLocaleTimeString(); &#x2F;&#x2F;上午11:20:28 判断当天是否为最后一天&#x2F;** * @event: 判断当天是否为当月最后一天 *&#x2F; export const isLastDay &#x3D; () &#x3D;&gt; &#123; let flag &#x3D; false; let date &#x3D; new Date(); let year &#x3D; date.getFullYear(); let month &#x3D; date.getMonth() + 1; let today &#x3D; date.getDate(); let new_year &#x3D; year; &#x2F;&#x2F;取当前的年份 let new_month &#x3D; month++; &#x2F;&#x2F;取下一个月的第一天，方便计算（最后一天不固定） if (month &gt; 12) &#123; &#x2F;&#x2F;如果当前大于12月，则年份转到下一年 new_month -&#x3D; 12; &#x2F;&#x2F;月份减 new_year++; &#x2F;&#x2F;年份增 &#125; let new_date &#x3D; new Date(new_year, new_month, 1); &#x2F;&#x2F;取当年当月中的第一天 var month_last_day &#x3D; new Date( new_date.getTime() - 1000 * 60 * 60 * 24 ).getDate(); if (today &#x3D;&#x3D; month_last_day) &#123; flag &#x3D; true; &#125; return flag; &#125;; 固定时间不操作重新登录;(function () &#123; &#x2F;** * @Tip: * FenZhon:Number 设置超时时间(分钟) * timeoutJianCha:时间戳 多久检查一次 * lastTime:时间戳 最后一次操作的时间 * currentTime:时间戳 当前操作的时间 * timer:计时器 *&#x2F; let FenZhon &#x3D; 0.1 let lastTime &#x3D; new Date().getTime() let currentTime &#x3D; new Date().getTime() let timeout &#x3D; FenZhon * 60 * 1000 let timer &#x3D; null let timeoutJianCha &#x3D; 1000 &#x2F;** * @event: 监听鼠标按下事件并更新最后一次操作的时间 * @Tip: *&#x2F; window.onload &#x3D; function () &#123; window.document.onmousedown &#x3D; function () &#123; localStorage.setItem(&#39;yemiandingshiqi&#39;, new Date().getTime()) &#125; &#125; &#x2F;** * @event: 检查是否超时,并且设置每隔多久检查一次 *&#x2F; function checkTimeout() &#123; currentTime &#x3D; new Date().getTime() lastTime &#x3D; localStorage.getItem(&#39;yemiandingshiqi&#39;) if (currentTime - lastTime &gt; timeout) &#123; console.log(&#96;你已经有$&#123;FenZhon&#125;分钟没有操作了&#96;) &#125; &#125; timer &#x3D; setInterval(checkTimeout, timeoutJianCha) &#125;)() ### vue项目中 在登录之后,调用方法 &#x2F;** * @event: 如果长时间不操作退出登录 * @params &#123;*&#125; * @Tip: *&#x2F; export const refreshPage &#x3D; () &#x3D;&gt; &#123; window.localStorage.setItem(&quot;yemiandingshiqi&quot;, new Date().getTime()); &#x2F;&#x2F;首次开启需要更新数据 &#x2F;** * @Tip: * FenZhon:Number 设置超时时间(分钟) * timeoutJianCha:时间戳 多久检查一次 * lastTime:时间戳 最后一次操作的时间 * currentTime:时间戳 当前操作的时间 * timer:计时器 *&#x2F; let FenZhon &#x3D; 1; let lastTime &#x3D; new Date().getTime(); let currentTime &#x3D; new Date().getTime(); let timeout &#x3D; FenZhon * 60 * 1000; let timer &#x3D; null; let timeoutJianCha &#x3D; 60000; &#x2F;** * @event: 监听鼠标按下事件并更新最后一次操作的时间 * @Tip: *&#x2F; window.onload &#x3D; function() &#123; window.document.onmousedown &#x3D; function() &#123; window.localStorage.setItem(&quot;yemiandingshiqi&quot;, new Date().getTime()); &#125;; &#125;; &#x2F;** * @event: 检查是否超时,并且设置每隔多久检查一次 *&#x2F; function checkTimeout() &#123; currentTime &#x3D; new Date().getTime(); lastTime &#x3D; window.localStorage.getItem(&quot;yemiandingshiqi&quot;); if (currentTime - lastTime &gt; timeout) &#123; Message.error(&#96;$&#123;FenZhon&#125;分钟为操作,已退出登录&#96;); store.dispatch(&quot;LogOut&quot;); router.push(&quot;&#x2F;login&quot;); &#125; &#125; timer &#x3D; setInterval(checkTimeout, timeoutJianCha); &#125;;","tags":[{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"}]},{"title":"css开发常用","date":"2022-02-26T16:00:00.000Z","path":"2022/02/27/原生/Css常用点/","text":"禁止用户复制文本.box&#123; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; &#125; 文字间距letter-spacing: 10px; 滚动条&#x2F;* 整体,width:横向宽 height:竖向宽 *&#x2F; ::-webkit-scrollbar &#123; width: 16px; height: 16px; &#125; &#x2F;* 滚动条的轨道（里面装有Thumb） *&#x2F; ::-webkit-scrollbar-track &#123; box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); background-color: #fff; &#125; &#x2F;* 滚动条里面的小方块，能向上向下移动 *&#x2F; ::-webkit-scrollbar-thumb &#123; background-color: red; &#125; &#x2F;* 滚动条的轨道的两端按钮 *&#x2F; ::-webkit-scrollbar-button &#123; background-color: gray; &#125; &#x2F;* 边角，即两个滚动条的交汇处 *&#x2F; ::-webkit-scrollbar-corner &#123; background-color: black; &#125;","tags":[{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"js开发难点","date":"2022-02-26T16:00:00.000Z","path":"2022/02/27/原生/Js难点/","text":"js util包&#x2F;*! * @lime-util&#x2F;util * Version: v3.0.10 * * Copyright 2021-2022, Gaoshiwei &lt;575792372@qq.com&gt; * Licensed under the MIT License. * http:&#x2F;&#x2F;www.opensource.org&#x2F;licenses&#x2F;mit-license * *&#x2F; select 标签 通过js选中指定某一项 let dom_value &#x3D; document.getElementById(&#39;select_id&#39;) let tag_dom &#x3D; dom_value.getElementsByTagName(&#39;option&#39;) for (let item of tag_dom) &#123; if (load_value &#x3D;&#x3D;&#x3D; item.value) &#123; item.selected &#x3D; true &#125; &#125; 非空验证export const isNull&#x3D;(date)&#x3D;&gt;&#123; if (date &#x3D;&#x3D;&#x3D; 0) return false; if(!date)return true; if (JSON.stringify(date) &#x3D;&#x3D;&#x3D; &#39;&#123;&#125;&#39;) return true; if (JSON.stringify(date) &#x3D;&#x3D;&#x3D; &#39;[]&#39;) return true; &#125; 截取字符串let str&#x3D;&#39;abcdkfss&#39; str.lastIndexOf(&#39;a&#39;) &#x2F;&#x2F; 0 查看该字符最后出现的位置 str.substr(-2) &#x2F;&#x2F;ss 截取倒数第一位往后,包括倒数第一位 js 修改样式(可修改伪类) function addCSSRule(sheet, selector, rules, index) &#123; try &#123; if (&quot;insertRule&quot; in sheet) &#123; sheet.insertRule(selector + &quot;&#123;&quot; + rules + &quot;&#125;&quot;, index); &#125; else if (&quot;addRule&quot; in sheet) &#123; sheet.addRule(selector, rules, index); &#125; &#125; catch (error) &#123; console.log(error); &#125; &#125; &#x2F;&#x2F; 使用方式 addCSSRule( document.styleSheets[0],&#x2F;&#x2F;不需要动 &quot;.BoxLayout:hover&quot;, &quot;background-color:teal!important;&quot; );","tags":[{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"}]}]